
DRONI-1.1-STABILIZER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004764  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20400000  00404764  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000450  20400438  00404ba0  00020438  2**3
                  ALLOC
  3 .heap         00000200  20400888  00404ff0  00020438  2**0
                  ALLOC
  4 .stack        00000400  20400a88  004051f0  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f2a9  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021ab  00000000  00000000  0002f764  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000061c6  00000000  00000000  0003190f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009e0  00000000  00000000  00037ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a50  00000000  00000000  000384b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ed1c  00000000  00000000  00038f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b0aa  00000000  00000000  00057c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000838be  00000000  00000000  00062ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000018f4  00000000  00000000  000e658c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20400e88 	.word	0x20400e88
  400004:	004001a1 	.word	0x004001a1
  400008:	0040019d 	.word	0x0040019d
  40000c:	0040019d 	.word	0x0040019d
  400010:	0040019d 	.word	0x0040019d
  400014:	0040019d 	.word	0x0040019d
  400018:	0040019d 	.word	0x0040019d
	...
  40002c:	0040019d 	.word	0x0040019d
  400030:	0040019d 	.word	0x0040019d
  400034:	00000000 	.word	0x00000000
  400038:	0040019d 	.word	0x0040019d
  40003c:	00401a55 	.word	0x00401a55
  400040:	0040019d 	.word	0x0040019d
  400044:	0040019d 	.word	0x0040019d
  400048:	0040019d 	.word	0x0040019d
  40004c:	0040019d 	.word	0x0040019d
  400050:	0040019d 	.word	0x0040019d
  400054:	0040019d 	.word	0x0040019d
  400058:	0040019d 	.word	0x0040019d
  40005c:	00400329 	.word	0x00400329
  400060:	0040019d 	.word	0x0040019d
  400064:	00000000 	.word	0x00000000
  400068:	00402445 	.word	0x00402445
  40006c:	00402459 	.word	0x00402459
  400070:	00000000 	.word	0x00000000
  400074:	0040019d 	.word	0x0040019d
  400078:	0040019d 	.word	0x0040019d
  40007c:	0040019d 	.word	0x0040019d
  400080:	0040246d 	.word	0x0040246d
  400084:	00000000 	.word	0x00000000
  400088:	0040019d 	.word	0x0040019d
  40008c:	0040019d 	.word	0x0040019d
  400090:	0040019d 	.word	0x0040019d
  400094:	0040019d 	.word	0x0040019d
  400098:	0040019d 	.word	0x0040019d
  40009c:	0040019d 	.word	0x0040019d
  4000a0:	0040019d 	.word	0x0040019d
  4000a4:	0040019d 	.word	0x0040019d
	...
  4000b4:	0040019d 	.word	0x0040019d
  4000b8:	0040019d 	.word	0x0040019d
  4000bc:	0040019d 	.word	0x0040019d
  4000c0:	0040019d 	.word	0x0040019d
  4000c4:	0040019d 	.word	0x0040019d
  4000c8:	0040019d 	.word	0x0040019d
  4000cc:	0040019d 	.word	0x0040019d
  4000d0:	00000000 	.word	0x00000000
  4000d4:	0040019d 	.word	0x0040019d
  4000d8:	00000000 	.word	0x00000000
  4000dc:	0040019d 	.word	0x0040019d
  4000e0:	0040019d 	.word	0x0040019d
  4000e4:	0040019d 	.word	0x0040019d
  4000e8:	0040019d 	.word	0x0040019d
  4000ec:	0040019d 	.word	0x0040019d
  4000f0:	0040019d 	.word	0x0040019d
  4000f4:	0040019d 	.word	0x0040019d
  4000f8:	0040019d 	.word	0x0040019d
	...
  400108:	0040019d 	.word	0x0040019d
  40010c:	0040019d 	.word	0x0040019d
  400110:	0040019d 	.word	0x0040019d
	...
  400120:	0040019d 	.word	0x0040019d
  400124:	0040019d 	.word	0x0040019d
  400128:	0040019d 	.word	0x0040019d
  40012c:	0040019d 	.word	0x0040019d
  400130:	0040019d 	.word	0x0040019d
	...
  40013c:	0040019d 	.word	0x0040019d

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400438 	.word	0x20400438
  40015c:	00000000 	.word	0x00000000
  400160:	00404764 	.word	0x00404764

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	2040043c 	.word	0x2040043c
  400190:	00404764 	.word	0x00404764
  400194:	00404764 	.word	0x00404764
  400198:	00000000 	.word	0x00000000

0040019c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40019c:	e7fe      	b.n	40019c <Dummy_Handler>
  40019e:	bf00      	nop

004001a0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4001a0:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  4001a2:	4b19      	ldr	r3, [pc, #100]	; (400208 <Reset_Handler+0x68>)
  4001a4:	4a19      	ldr	r2, [pc, #100]	; (40020c <Reset_Handler+0x6c>)
  4001a6:	429a      	cmp	r2, r3
  4001a8:	d003      	beq.n	4001b2 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  4001aa:	4b19      	ldr	r3, [pc, #100]	; (400210 <Reset_Handler+0x70>)
  4001ac:	4a16      	ldr	r2, [pc, #88]	; (400208 <Reset_Handler+0x68>)
  4001ae:	429a      	cmp	r2, r3
  4001b0:	d304      	bcc.n	4001bc <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4001b2:	4b18      	ldr	r3, [pc, #96]	; (400214 <Reset_Handler+0x74>)
  4001b4:	4a18      	ldr	r2, [pc, #96]	; (400218 <Reset_Handler+0x78>)
  4001b6:	429a      	cmp	r2, r3
  4001b8:	d30f      	bcc.n	4001da <Reset_Handler+0x3a>
  4001ba:	e01a      	b.n	4001f2 <Reset_Handler+0x52>
  4001bc:	4912      	ldr	r1, [pc, #72]	; (400208 <Reset_Handler+0x68>)
  4001be:	4b17      	ldr	r3, [pc, #92]	; (40021c <Reset_Handler+0x7c>)
  4001c0:	1a5b      	subs	r3, r3, r1
  4001c2:	f023 0303 	bic.w	r3, r3, #3
  4001c6:	3304      	adds	r3, #4
  4001c8:	4a10      	ldr	r2, [pc, #64]	; (40020c <Reset_Handler+0x6c>)
  4001ca:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4001cc:	f852 0b04 	ldr.w	r0, [r2], #4
  4001d0:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4001d4:	429a      	cmp	r2, r3
  4001d6:	d1f9      	bne.n	4001cc <Reset_Handler+0x2c>
  4001d8:	e7eb      	b.n	4001b2 <Reset_Handler+0x12>
  4001da:	4b11      	ldr	r3, [pc, #68]	; (400220 <Reset_Handler+0x80>)
  4001dc:	4a11      	ldr	r2, [pc, #68]	; (400224 <Reset_Handler+0x84>)
  4001de:	1ad2      	subs	r2, r2, r3
  4001e0:	f022 0203 	bic.w	r2, r2, #3
  4001e4:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4001e6:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4001e8:	2100      	movs	r1, #0
  4001ea:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4001ee:	4293      	cmp	r3, r2
  4001f0:	d1fb      	bne.n	4001ea <Reset_Handler+0x4a>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4001f2:	4a0d      	ldr	r2, [pc, #52]	; (400228 <Reset_Handler+0x88>)
  4001f4:	4b0d      	ldr	r3, [pc, #52]	; (40022c <Reset_Handler+0x8c>)
  4001f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4001fa:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4001fc:	4b0c      	ldr	r3, [pc, #48]	; (400230 <Reset_Handler+0x90>)
  4001fe:	4798      	blx	r3

        /* Branch to main function */
        main();
  400200:	4b0c      	ldr	r3, [pc, #48]	; (400234 <Reset_Handler+0x94>)
  400202:	4798      	blx	r3
  400204:	e7fe      	b.n	400204 <Reset_Handler+0x64>
  400206:	bf00      	nop
  400208:	20400000 	.word	0x20400000
  40020c:	00404764 	.word	0x00404764
  400210:	20400438 	.word	0x20400438
  400214:	20400888 	.word	0x20400888
  400218:	20400438 	.word	0x20400438
  40021c:	20400437 	.word	0x20400437
  400220:	2040043c 	.word	0x2040043c
  400224:	2040088b 	.word	0x2040088b
  400228:	e000ed00 	.word	0xe000ed00
  40022c:	00400000 	.word	0x00400000
  400230:	00404211 	.word	0x00404211
  400234:	004011f1 	.word	0x004011f1

00400238 <_Z11parseAnglesPc>:
static double _reqThrottle	= 0;
static double _reqRoll_x	= 0;
static double _reqPitch_y	= 0;
static double _reqYaw_z	= 0;

void parseAngles(char* d){
  400238:	b5f0      	push	{r4, r5, r6, r7, lr}
  40023a:	b097      	sub	sp, #92	; 0x5c
  40023c:	4605      	mov	r5, r0
	char * pch;
	char buff1[20];strcpy(buff1,"0");
  40023e:	2330      	movs	r3, #48	; 0x30
  400240:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
	char buff2[20];strcpy(buff2,"0");
  400244:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	char buff3[20];strcpy(buff3,"0");
  400248:	f8ad 301c 	strh.w	r3, [sp, #28]
	char buff4[20];strcpy(buff4,"0");
  40024c:	f8ad 3008 	strh.w	r3, [sp, #8]
	//TinkerUart0.println(d);
	int i = 0;
	char c = d[i];
  400250:	7803      	ldrb	r3, [r0, #0]
	char _p[2];_p[0]=d[i];_p[1]='\0';
  400252:	f88d 3004 	strb.w	r3, [sp, #4]
  400256:	2400      	movs	r4, #0
  400258:	f88d 4005 	strb.w	r4, [sp, #5]
  40025c:	4606      	mov	r6, r0
	while(c != '\0' && i<100){
		_p[0]=d[i];
		strcat(buff1,_p);i++;
  40025e:	4f2f      	ldr	r7, [pc, #188]	; (40031c <_Z11parseAnglesPc+0xe4>)
  400260:	e000      	b.n	400264 <_Z11parseAnglesPc+0x2c>
  400262:	4614      	mov	r4, r2
	char buff4[20];strcpy(buff4,"0");
	//TinkerUart0.println(d);
	int i = 0;
	char c = d[i];
	char _p[2];_p[0]=d[i];_p[1]='\0';
	while(c != '\0' && i<100){
  400264:	b313      	cbz	r3, 4002ac <_Z11parseAnglesPc+0x74>
  400266:	2c63      	cmp	r4, #99	; 0x63
  400268:	dc20      	bgt.n	4002ac <_Z11parseAnglesPc+0x74>
		_p[0]=d[i];
  40026a:	7833      	ldrb	r3, [r6, #0]
  40026c:	f88d 3004 	strb.w	r3, [sp, #4]
		strcat(buff1,_p);i++;
  400270:	a901      	add	r1, sp, #4
  400272:	a811      	add	r0, sp, #68	; 0x44
  400274:	47b8      	blx	r7
  400276:	1c62      	adds	r2, r4, #1
		c=d[i];
  400278:	f816 3f01 	ldrb.w	r3, [r6, #1]!
		if(c==' '){
  40027c:	2b20      	cmp	r3, #32
  40027e:	d1f0      	bne.n	400262 <_Z11parseAnglesPc+0x2a>
			i++;c=d[i];
  400280:	3402      	adds	r4, #2
  400282:	5d2b      	ldrb	r3, [r5, r4]
  400284:	192e      	adds	r6, r5, r4
			break;
		}
	}
	while(c != '\0' && i<100){
		_p[0]=d[i];
		strcat(buff2,_p);i++;
  400286:	4f25      	ldr	r7, [pc, #148]	; (40031c <_Z11parseAnglesPc+0xe4>)
  400288:	e000      	b.n	40028c <_Z11parseAnglesPc+0x54>
  40028a:	4614      	mov	r4, r2
		if(c==' '){
			i++;c=d[i];
			break;
		}
	}
	while(c != '\0' && i<100){
  40028c:	b173      	cbz	r3, 4002ac <_Z11parseAnglesPc+0x74>
  40028e:	2c63      	cmp	r4, #99	; 0x63
  400290:	dc0c      	bgt.n	4002ac <_Z11parseAnglesPc+0x74>
		_p[0]=d[i];
  400292:	7833      	ldrb	r3, [r6, #0]
  400294:	f88d 3004 	strb.w	r3, [sp, #4]
		strcat(buff2,_p);i++;
  400298:	a901      	add	r1, sp, #4
  40029a:	a80c      	add	r0, sp, #48	; 0x30
  40029c:	47b8      	blx	r7
  40029e:	1c62      	adds	r2, r4, #1
		c=d[i];
  4002a0:	f816 3f01 	ldrb.w	r3, [r6, #1]!
		if(c==' '){
  4002a4:	2b20      	cmp	r3, #32
  4002a6:	d1f0      	bne.n	40028a <_Z11parseAnglesPc+0x52>
			i++;c=d[i];
  4002a8:	3402      	adds	r4, #2
  4002aa:	5d2b      	ldrb	r3, [r5, r4]
  4002ac:	192e      	adds	r6, r5, r4
			break;
		}
	}
	while(c != '\0' && i<100){
		_p[0]=d[i];
		strcat(buff3,_p);i++;
  4002ae:	4f1b      	ldr	r7, [pc, #108]	; (40031c <_Z11parseAnglesPc+0xe4>)
  4002b0:	e000      	b.n	4002b4 <_Z11parseAnglesPc+0x7c>
  4002b2:	4614      	mov	r4, r2
		if(c==' '){
			i++;c=d[i];
			break;
		}
	}
	while(c != '\0' && i<100){
  4002b4:	b1f3      	cbz	r3, 4002f4 <_Z11parseAnglesPc+0xbc>
  4002b6:	2c63      	cmp	r4, #99	; 0x63
  4002b8:	dc1c      	bgt.n	4002f4 <_Z11parseAnglesPc+0xbc>
		_p[0]=d[i];
  4002ba:	7833      	ldrb	r3, [r6, #0]
  4002bc:	f88d 3004 	strb.w	r3, [sp, #4]
		strcat(buff3,_p);i++;
  4002c0:	a901      	add	r1, sp, #4
  4002c2:	a807      	add	r0, sp, #28
  4002c4:	47b8      	blx	r7
  4002c6:	1c62      	adds	r2, r4, #1
		c=d[i];
  4002c8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
		if(c==' '){
  4002cc:	2b20      	cmp	r3, #32
  4002ce:	d1f0      	bne.n	4002b2 <_Z11parseAnglesPc+0x7a>
			i++;c=d[i];
  4002d0:	3402      	adds	r4, #2
  4002d2:	5d2b      	ldrb	r3, [r5, r4]
  4002d4:	4425      	add	r5, r4
			break;
		}
	}
	while(c != '\0' && i<100){
		_p[0]=d[i];
		strcat(buff4,_p);i++;
  4002d6:	4e11      	ldr	r6, [pc, #68]	; (40031c <_Z11parseAnglesPc+0xe4>)
		if(c==' '){
			i++;c=d[i];
			break;
		}
	}
	while(c != '\0' && i<100){
  4002d8:	b163      	cbz	r3, 4002f4 <_Z11parseAnglesPc+0xbc>
  4002da:	2c63      	cmp	r4, #99	; 0x63
  4002dc:	dc0a      	bgt.n	4002f4 <_Z11parseAnglesPc+0xbc>
		_p[0]=d[i];
  4002de:	782b      	ldrb	r3, [r5, #0]
  4002e0:	f88d 3004 	strb.w	r3, [sp, #4]
		strcat(buff4,_p);i++;
  4002e4:	a901      	add	r1, sp, #4
  4002e6:	a802      	add	r0, sp, #8
  4002e8:	47b0      	blx	r6
  4002ea:	3401      	adds	r4, #1
		c=d[i];
  4002ec:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		if(c==' '){
  4002f0:	2b20      	cmp	r3, #32
  4002f2:	d1f1      	bne.n	4002d8 <_Z11parseAnglesPc+0xa0>
	//TinkerUart0.println(buff2);
	//TinkerUart0.println(buff3);
	//TinkerUart0.println(buff4);
	
	//--
	_reqThrottle = _atof(buff1);
  4002f4:	a811      	add	r0, sp, #68	; 0x44
  4002f6:	4d0a      	ldr	r5, [pc, #40]	; (400320 <_Z11parseAnglesPc+0xe8>)
  4002f8:	47a8      	blx	r5
  4002fa:	4c0a      	ldr	r4, [pc, #40]	; (400324 <_Z11parseAnglesPc+0xec>)
  4002fc:	e9c4 0100 	strd	r0, r1, [r4]
	_reqRoll_x	 = _atof(buff2);
  400300:	a80c      	add	r0, sp, #48	; 0x30
  400302:	47a8      	blx	r5
  400304:	e9c4 0102 	strd	r0, r1, [r4, #8]
	_reqPitch_y	 = _atof(buff3);
  400308:	a807      	add	r0, sp, #28
  40030a:	47a8      	blx	r5
  40030c:	e9c4 0104 	strd	r0, r1, [r4, #16]
	_reqYaw_z	 = _atof(buff4);
  400310:	a802      	add	r0, sp, #8
  400312:	47a8      	blx	r5
  400314:	e9c4 0106 	strd	r0, r1, [r4, #24]
//
	



}
  400318:	b017      	add	sp, #92	; 0x5c
  40031a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40031c:	00404275 	.word	0x00404275
  400320:	00401aed 	.word	0x00401aed
  400324:	20400458 	.word	0x20400458

00400328 <UART0_Handler>:

char _data[256];
uint32_t _data_index = 0;
bool _data_start = false;
uint8_t c = 0;
void UART0_Handler(void){
  400328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t status = UART0->UART_SR;
  40032c:	4b2b      	ldr	r3, [pc, #172]	; (4003dc <UART0_Handler+0xb4>)
  40032e:	f8d3 9014 	ldr.w	r9, [r3, #20]

	// Did we receive data ?
	if ((status & UART_SR_RXRDY) == UART_SR_RXRDY)
  400332:	f019 0f01 	tst.w	r9, #1
  400336:	d03d      	beq.n	4003b4 <UART0_Handler+0x8c>
	{
		while(uart_is_rx_ready(UART0)){
  400338:	461e      	mov	r6, r3
  40033a:	4d29      	ldr	r5, [pc, #164]	; (4003e0 <UART0_Handler+0xb8>)

		void init(){
			tinkerUartInit(_uartId);
		};
		void read(uint8_t *str){
			tinkerUartGetChar(_uartId,str);
  40033c:	4c29      	ldr	r4, [pc, #164]	; (4003e4 <UART0_Handler+0xbc>)
  40033e:	f104 0820 	add.w	r8, r4, #32
  400342:	4f29      	ldr	r7, [pc, #164]	; (4003e8 <UART0_Handler+0xc0>)
					}
					_data_start = false;
					parseAngles(_data);
					break;
				default:
					if(_data_start && (isdigit(c) || c==' ' || c=='.')){
  400344:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 4003f0 <UART0_Handler+0xc8>
	uint32_t status = UART0->UART_SR;

	// Did we receive data ?
	if ((status & UART_SR_RXRDY) == UART_SR_RXRDY)
	{
		while(uart_is_rx_ready(UART0)){
  400348:	4630      	mov	r0, r6
  40034a:	47a8      	blx	r5
  40034c:	b390      	cbz	r0, 4003b4 <UART0_Handler+0x8c>
  40034e:	4641      	mov	r1, r8
  400350:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400352:	47b8      	blx	r7
			TinkerUart0.read(&c);
			
			if(_data_index>255) _data_index = 0;
  400354:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400356:	2bff      	cmp	r3, #255	; 0xff
  400358:	d901      	bls.n	40035e <UART0_Handler+0x36>
  40035a:	2300      	movs	r3, #0
  40035c:	63e3      	str	r3, [r4, #60]	; 0x3c
			switch(c){
  40035e:	f894 3020 	ldrb.w	r3, [r4, #32]
  400362:	2b7b      	cmp	r3, #123	; 0x7b
  400364:	d002      	beq.n	40036c <UART0_Handler+0x44>
  400366:	2b7d      	cmp	r3, #125	; 0x7d
  400368:	d004      	beq.n	400374 <UART0_Handler+0x4c>
  40036a:	e014      	b.n	400396 <UART0_Handler+0x6e>
				case '{':
					_data_start = true;
  40036c:	2301      	movs	r3, #1
  40036e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
					break;
  400372:	e7e9      	b.n	400348 <UART0_Handler+0x20>
				case '}':
					_data[_data_index] = '\0';
  400374:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400376:	4423      	add	r3, r4
  400378:	2200      	movs	r2, #0
  40037a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					_data_index = 0;
  40037e:	63e2      	str	r2, [r4, #60]	; 0x3c
					if(!_data_start){						
  400380:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  400384:	2b00      	cmp	r3, #0
  400386:	d0df      	beq.n	400348 <UART0_Handler+0x20>
						break;
					}
					_data_start = false;
  400388:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
					parseAngles(_data);
  40038c:	f104 0044 	add.w	r0, r4, #68	; 0x44
  400390:	4b16      	ldr	r3, [pc, #88]	; (4003ec <UART0_Handler+0xc4>)
  400392:	4798      	blx	r3
					break;
  400394:	e7d8      	b.n	400348 <UART0_Handler+0x20>
				default:
					if(_data_start && (isdigit(c) || c==' ' || c=='.')){
  400396:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  40039a:	2a00      	cmp	r2, #0
  40039c:	d0d4      	beq.n	400348 <UART0_Handler+0x20>
  40039e:	f1a3 0220 	sub.w	r2, r3, #32
  4003a2:	b2d2      	uxtb	r2, r2
  4003a4:	2a19      	cmp	r2, #25
  4003a6:	d8cf      	bhi.n	400348 <UART0_Handler+0x20>
  4003a8:	fa2a f202 	lsr.w	r2, sl, r2
  4003ac:	f012 0f01 	tst.w	r2, #1
  4003b0:	d10a      	bne.n	4003c8 <UART0_Handler+0xa0>
  4003b2:	e7c9      	b.n	400348 <UART0_Handler+0x20>
			//TinkerUart0.printlnNumber(*c);
		}
	}

	// Acknowledge errors
	if (status & (UART_SR_OVRE | UART_SR_FRAME))
  4003b4:	f019 0f60 	tst.w	r9, #96	; 0x60
  4003b8:	d00d      	beq.n	4003d6 <UART0_Handler+0xae>
	{
		UART0->UART_CR |= UART_CR_RSTSTA;
  4003ba:	4a08      	ldr	r2, [pc, #32]	; (4003dc <UART0_Handler+0xb4>)
  4003bc:	6813      	ldr	r3, [r2, #0]
  4003be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4003c2:	6013      	str	r3, [r2, #0]
	}	
}
  4003c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					_data_start = false;
					parseAngles(_data);
					break;
				default:
					if(_data_start && (isdigit(c) || c==' ' || c=='.')){
						_data[_data_index] = c;
  4003c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4003ca:	18a1      	adds	r1, r4, r2
  4003cc:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
						_data_index ++;
  4003d0:	3201      	adds	r2, #1
  4003d2:	63e2      	str	r2, [r4, #60]	; 0x3c
  4003d4:	e7b8      	b.n	400348 <UART0_Handler+0x20>
  4003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003da:	bf00      	nop
  4003dc:	400e0800 	.word	0x400e0800
  4003e0:	00402a79 	.word	0x00402a79
  4003e4:	20400458 	.word	0x20400458
  4003e8:	00402195 	.word	0x00402195
  4003ec:	00400239 	.word	0x00400239
  4003f0:	03ff4001 	.word	0x03ff4001

004003f4 <_ZN13DroniAttitudeC1Ev>:


#define RAD_TO_DEG	57.295779513082320876798154814105
#define  RESTRICT_PITCH

class DroniAttitude{
  4003f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4003f8:	4604      	mov	r4, r0
  4003fa:	4d24      	ldr	r5, [pc, #144]	; (40048c <_ZN13DroniAttitudeC1Ev+0x98>)
  4003fc:	47a8      	blx	r5
  4003fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
  400402:	47a8      	blx	r5
		double mag_x = 0;
		double mag_y = 0;
		double mag_z = 0;

	public:
		TinkerIMU(uint8_t address){_address = address;}
  400404:	2200      	movs	r2, #0
  400406:	2300      	movs	r3, #0
  400408:	e9c4 232e 	strd	r2, r3, [r4, #184]	; 0xb8
  40040c:	e9c4 2330 	strd	r2, r3, [r4, #192]	; 0xc0
  400410:	e9c4 2332 	strd	r2, r3, [r4, #200]	; 0xc8
  400414:	e9c4 2334 	strd	r2, r3, [r4, #208]	; 0xd0
  400418:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  40041c:	e9c4 2338 	strd	r2, r3, [r4, #224]	; 0xe0
  400420:	e9c4 233a 	strd	r2, r3, [r4, #232]	; 0xe8
  400424:	e9c4 233c 	strd	r2, r3, [r4, #240]	; 0xf0
  400428:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
  40042c:	2168      	movs	r1, #104	; 0x68
  40042e:	f884 10b0 	strb.w	r1, [r4, #176]	; 0xb0
	private:
		double _accel_range = 2;
		double _gyro_range = 250;

	public:
		TinkerBMI160(uint8_t add):TinkerIMU(add){			
  400432:	f504 7180 	add.w	r1, r4, #256	; 0x100
  400436:	f04f 0800 	mov.w	r8, #0
  40043a:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
  40043e:	e9c1 8900 	strd	r8, r9, [r1]
  400442:	f504 7184 	add.w	r1, r4, #264	; 0x108
  400446:	2600      	movs	r6, #0
  400448:	4f11      	ldr	r7, [pc, #68]	; (400490 <_ZN13DroniAttitudeC1Ev+0x9c>)
  40044a:	e9c1 6700 	strd	r6, r7, [r1]
  40044e:	f504 7188 	add.w	r1, r4, #272	; 0x110
  400452:	e9c1 2302 	strd	r2, r3, [r1, #8]
  400456:	e9c1 2304 	strd	r2, r3, [r1, #16]
  40045a:	e9c1 2306 	strd	r2, r3, [r1, #24]
  40045e:	e9c1 2308 	strd	r2, r3, [r1, #32]
  400462:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  400466:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  40046a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  40046e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  400472:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  400476:	2369      	movs	r3, #105	; 0x69
  400478:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
  40047c:	e9c1 8914 	strd	r8, r9, [r1, #80]	; 0x50
  400480:	e9c1 6716 	strd	r6, r7, [r1, #88]	; 0x58
  400484:	4620      	mov	r0, r4
  400486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40048a:	bf00      	nop
  40048c:	00401c2d 	.word	0x00401c2d
  400490:	406f4000 	.word	0x406f4000
  400494:	00000000 	.word	0x00000000

00400498 <_Z22task1_estimateAttitudev>:
//-- Droni Attitude Estimation
DroniAttitude droniAtt;
static uint32_t task1_timestamp = 0;
static uint32_t task1_period = 2000; //period of 2ms
static uint32_t task1_duration = 0;
void task1_estimateAttitude(void){
  400498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40049c:	b08f      	sub	sp, #60	; 0x3c
	
	uint32_t now = micros();
  40049e:	4cae      	ldr	r4, [pc, #696]	; (400758 <_Z22task1_estimateAttitudev+0x2c0>)
  4004a0:	47a0      	blx	r4
  4004a2:	9003      	str	r0, [sp, #12]
	if(micros() < task1_timestamp + task1_period) return;
  4004a4:	47a0      	blx	r4
  4004a6:	4bad      	ldr	r3, [pc, #692]	; (40075c <_Z22task1_estimateAttitudev+0x2c4>)
  4004a8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
  4004ac:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
  4004b0:	4290      	cmp	r0, r2
  4004b2:	f0c0 83a1 	bcc.w	400bf8 <_Z22task1_estimateAttitudev+0x760>

	//--
	droniAtt.step(((double)(now - task1_timestamp))/1000000);
  4004b6:	9a03      	ldr	r2, [sp, #12]
  4004b8:	1ad0      	subs	r0, r2, r3
  4004ba:	4ba9      	ldr	r3, [pc, #676]	; (400760 <_Z22task1_estimateAttitudev+0x2c8>)
  4004bc:	4798      	blx	r3
  4004be:	4ea9      	ldr	r6, [pc, #676]	; (400764 <_Z22task1_estimateAttitudev+0x2cc>)
  4004c0:	a39f      	add	r3, pc, #636	; (adr r3, 400740 <_Z22task1_estimateAttitudev+0x2a8>)
  4004c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4004c6:	47b0      	blx	r6
  4004c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
				_gyro_range = 125;
			tinkerWriteI2C(_address,BMI160_RA_GYRO_RANGE,range);
		}

		void update(void){
			accel_x = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_X_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_X_L_G))
  4004cc:	4ca3      	ldr	r4, [pc, #652]	; (40075c <_Z22task1_estimateAttitudev+0x2c4>)
  4004ce:	2113      	movs	r1, #19
  4004d0:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  4004d4:	4da4      	ldr	r5, [pc, #656]	; (400768 <_Z22task1_estimateAttitudev+0x2d0>)
  4004d6:	47a8      	blx	r5
  4004d8:	4607      	mov	r7, r0
  4004da:	2112      	movs	r1, #18
  4004dc:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  4004e0:	47a8      	blx	r5
				*_accel_range
				/(double)MAX_UINT16;
  4004e2:	f504 79a4 	add.w	r9, r4, #328	; 0x148
  4004e6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  4004ea:	f8df 8284 	ldr.w	r8, [pc, #644]	; 400770 <_Z22task1_estimateAttitudev+0x2d8>
  4004ee:	b200      	sxth	r0, r0
  4004f0:	47c0      	blx	r8
			tinkerWriteI2C(_address,BMI160_RA_GYRO_RANGE,range);
		}

		void update(void){
			accel_x = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_X_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_X_L_G))
				*_accel_range
  4004f2:	46a2      	mov	sl, r4
				/(double)MAX_UINT16;
  4004f4:	4f9d      	ldr	r7, [pc, #628]	; (40076c <_Z22task1_estimateAttitudev+0x2d4>)
  4004f6:	e9fa 2392 	ldrd	r2, r3, [sl, #584]!	; 0x248
  4004fa:	47b8      	blx	r7
  4004fc:	a392      	add	r3, pc, #584	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  4004fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  400502:	47b0      	blx	r6
  400504:	e9c9 012e 	strd	r0, r1, [r9, #184]	; 0xb8
			accel_y = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Y_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Y_L_G))
  400508:	2115      	movs	r1, #21
  40050a:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  40050e:	47a8      	blx	r5
  400510:	4683      	mov	fp, r0
  400512:	2114      	movs	r1, #20
  400514:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  400518:	47a8      	blx	r5
				*_accel_range
				/(double)MAX_UINT16;
  40051a:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
  40051e:	b200      	sxth	r0, r0
  400520:	47c0      	blx	r8
  400522:	e9da 2300 	ldrd	r2, r3, [sl]
  400526:	47b8      	blx	r7
  400528:	a387      	add	r3, pc, #540	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  40052a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40052e:	47b0      	blx	r6
  400530:	e9c9 0130 	strd	r0, r1, [r9, #192]	; 0xc0
			accel_z = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Z_L_G))
  400534:	2117      	movs	r1, #23
  400536:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  40053a:	47a8      	blx	r5
  40053c:	4683      	mov	fp, r0
  40053e:	2116      	movs	r1, #22
  400540:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  400544:	47a8      	blx	r5
				*_accel_range
				/(double)MAX_UINT16;
  400546:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
  40054a:	b200      	sxth	r0, r0
  40054c:	47c0      	blx	r8
  40054e:	e9da 2300 	ldrd	r2, r3, [sl]
  400552:	47b8      	blx	r7
  400554:	a37c      	add	r3, pc, #496	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  400556:	e9d3 2300 	ldrd	r2, r3, [r3]
  40055a:	47b0      	blx	r6
  40055c:	e9c9 0132 	strd	r0, r1, [r9, #200]	; 0xc8

			gyro_x = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_X_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_X_L_G))
  400560:	210d      	movs	r1, #13
  400562:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  400566:	47a8      	blx	r5
  400568:	4682      	mov	sl, r0
  40056a:	210c      	movs	r1, #12
  40056c:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  400570:	47a8      	blx	r5
				*_gyro_range
				/(double)MAX_UINT16;
  400572:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  400576:	b200      	sxth	r0, r0
  400578:	47c0      	blx	r8
			accel_z = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Z_L_G))
				*_accel_range
				/(double)MAX_UINT16;

			gyro_x = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_X_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_X_L_G))
				*_gyro_range
  40057a:	46a2      	mov	sl, r4
				/(double)MAX_UINT16;
  40057c:	e9fa 2394 	ldrd	r2, r3, [sl, #592]!	; 0x250
  400580:	47b8      	blx	r7
  400582:	a371      	add	r3, pc, #452	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  400584:	e9d3 2300 	ldrd	r2, r3, [r3]
  400588:	47b0      	blx	r6
  40058a:	e9c9 0134 	strd	r0, r1, [r9, #208]	; 0xd0
			gyro_y = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_Y_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_Y_L_G))
  40058e:	210f      	movs	r1, #15
  400590:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  400594:	47a8      	blx	r5
  400596:	4683      	mov	fp, r0
  400598:	210e      	movs	r1, #14
  40059a:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  40059e:	47a8      	blx	r5
				*_gyro_range
				/(double)MAX_UINT16;
  4005a0:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
  4005a4:	b200      	sxth	r0, r0
  4005a6:	47c0      	blx	r8
  4005a8:	e9da 2300 	ldrd	r2, r3, [sl]
  4005ac:	47b8      	blx	r7
  4005ae:	a366      	add	r3, pc, #408	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  4005b0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005b4:	47b0      	blx	r6
  4005b6:	e9c9 0136 	strd	r0, r1, [r9, #216]	; 0xd8
			gyro_z = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_Z_L_G))
  4005ba:	2111      	movs	r1, #17
  4005bc:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  4005c0:	47a8      	blx	r5
  4005c2:	4683      	mov	fp, r0
  4005c4:	2110      	movs	r1, #16
  4005c6:	f894 01f8 	ldrb.w	r0, [r4, #504]	; 0x1f8
  4005ca:	47a8      	blx	r5
				*_gyro_range
				/(double)MAX_UINT16;
  4005cc:	ea40 200b 	orr.w	r0, r0, fp, lsl #8
  4005d0:	b200      	sxth	r0, r0
  4005d2:	47c0      	blx	r8
  4005d4:	e9da 2300 	ldrd	r2, r3, [sl]
  4005d8:	47b8      	blx	r7
  4005da:	a35b      	add	r3, pc, #364	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  4005dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4005e0:	47b0      	blx	r6
  4005e2:	e9c9 0138 	strd	r0, r1, [r9, #224]	; 0xe0
				_gyro_range = 125;
			tinkerWriteI2C(_address,BMI160_RA_GYRO_RANGE,range);
		}

		void update(void){
			accel_x = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_X_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_X_L_G))
  4005e6:	2113      	movs	r1, #19
  4005e8:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  4005ec:	47a8      	blx	r5
  4005ee:	4681      	mov	r9, r0
  4005f0:	2112      	movs	r1, #18
  4005f2:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  4005f6:	47a8      	blx	r5
				*_accel_range
				/(double)MAX_UINT16;
  4005f8:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
  4005fc:	b200      	sxth	r0, r0
  4005fe:	47c0      	blx	r8
			tinkerWriteI2C(_address,BMI160_RA_GYRO_RANGE,range);
		}

		void update(void){
			accel_x = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_X_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_X_L_G))
				*_accel_range
  400600:	46a1      	mov	r9, r4
				/(double)MAX_UINT16;
  400602:	e9f9 23aa 	ldrd	r2, r3, [r9, #680]!	; 0x2a8
  400606:	47b8      	blx	r7
  400608:	a34f      	add	r3, pc, #316	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  40060a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40060e:	47b0      	blx	r6
  400610:	4623      	mov	r3, r4
  400612:	e9e3 0198 	strd	r0, r1, [r3, #608]!	; 0x260
  400616:	9300      	str	r3, [sp, #0]
			accel_y = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Y_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Y_L_G))
  400618:	2115      	movs	r1, #21
  40061a:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  40061e:	47a8      	blx	r5
  400620:	4682      	mov	sl, r0
  400622:	2114      	movs	r1, #20
  400624:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  400628:	47a8      	blx	r5
				*_accel_range
				/(double)MAX_UINT16;
  40062a:	f504 7b1a 	add.w	fp, r4, #616	; 0x268
  40062e:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  400632:	b200      	sxth	r0, r0
  400634:	47c0      	blx	r8
  400636:	e9d9 2300 	ldrd	r2, r3, [r9]
  40063a:	47b8      	blx	r7
  40063c:	a342      	add	r3, pc, #264	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  40063e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400642:	47b0      	blx	r6
  400644:	e9cb 0100 	strd	r0, r1, [fp]
			accel_z = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Z_L_G))
  400648:	2117      	movs	r1, #23
  40064a:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  40064e:	47a8      	blx	r5
  400650:	4682      	mov	sl, r0
  400652:	2116      	movs	r1, #22
  400654:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  400658:	47a8      	blx	r5
				*_accel_range
				/(double)MAX_UINT16;
  40065a:	f504 7b1c 	add.w	fp, r4, #624	; 0x270
  40065e:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  400662:	b200      	sxth	r0, r0
  400664:	47c0      	blx	r8
  400666:	e9d9 2300 	ldrd	r2, r3, [r9]
  40066a:	47b8      	blx	r7
  40066c:	a336      	add	r3, pc, #216	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  40066e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400672:	47b0      	blx	r6
  400674:	e9cb 0100 	strd	r0, r1, [fp]

			gyro_x = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_X_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_X_L_G))
  400678:	210d      	movs	r1, #13
  40067a:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  40067e:	47a8      	blx	r5
  400680:	4681      	mov	r9, r0
  400682:	210c      	movs	r1, #12
  400684:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  400688:	47a8      	blx	r5
				*_gyro_range
				/(double)MAX_UINT16;
  40068a:	f504 7a1e 	add.w	sl, r4, #632	; 0x278
  40068e:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
  400692:	b200      	sxth	r0, r0
  400694:	47c0      	blx	r8
			accel_z = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Z_L_G))
				*_accel_range
				/(double)MAX_UINT16;

			gyro_x = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_X_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_X_L_G))
				*_gyro_range
  400696:	46a1      	mov	r9, r4
				/(double)MAX_UINT16;
  400698:	e9f9 23ac 	ldrd	r2, r3, [r9, #688]!	; 0x2b0
  40069c:	47b8      	blx	r7
  40069e:	a32a      	add	r3, pc, #168	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  4006a0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006a4:	47b0      	blx	r6
  4006a6:	e9ca 0100 	strd	r0, r1, [sl]
			gyro_y = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_Y_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_Y_L_G))
  4006aa:	210f      	movs	r1, #15
  4006ac:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  4006b0:	47a8      	blx	r5
  4006b2:	4682      	mov	sl, r0
  4006b4:	210e      	movs	r1, #14
  4006b6:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  4006ba:	47a8      	blx	r5
				*_gyro_range
				/(double)MAX_UINT16;
  4006bc:	f504 7b20 	add.w	fp, r4, #640	; 0x280
  4006c0:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  4006c4:	b200      	sxth	r0, r0
  4006c6:	47c0      	blx	r8
  4006c8:	e9d9 2300 	ldrd	r2, r3, [r9]
  4006cc:	47b8      	blx	r7
  4006ce:	a31e      	add	r3, pc, #120	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  4006d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4006d4:	47b0      	blx	r6
  4006d6:	e9cb 0100 	strd	r0, r1, [fp]
			gyro_z = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_Z_L_G))
  4006da:	2111      	movs	r1, #17
  4006dc:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  4006e0:	47a8      	blx	r5
  4006e2:	4682      	mov	sl, r0
  4006e4:	2110      	movs	r1, #16
  4006e6:	f894 0258 	ldrb.w	r0, [r4, #600]	; 0x258
  4006ea:	47a8      	blx	r5
				*_gyro_range
				/(double)MAX_UINT16;
  4006ec:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  4006f0:	b200      	sxth	r0, r0
  4006f2:	47c0      	blx	r8
  4006f4:	e9d9 2300 	ldrd	r2, r3, [r9]
  4006f8:	47b8      	blx	r7
  4006fa:	a313      	add	r3, pc, #76	; (adr r3, 400748 <_Z22task1_estimateAttitudev+0x2b0>)
  4006fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400700:	47b0      	blx	r6
  400702:	4606      	mov	r6, r0
  400704:	460f      	mov	r7, r1
  400706:	f504 7422 	add.w	r4, r4, #648	; 0x288
  40070a:	e9c4 6700 	strd	r6, r7, [r4]
			_bmi1.update();
			_bmi2.update();
		}

		double getAccelX(void){
			return _bmi2.accel_x > BMI160_2G ? _bmi2.accel_x : (0.2*_bmi2.accel_x + 0.8*_bmi1.accel_x) ;
  40070e:	9b00      	ldr	r3, [sp, #0]
  400710:	e9d3 4500 	ldrd	r4, r5, [r3]
  400714:	2200      	movs	r2, #0
  400716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40071a:	4620      	mov	r0, r4
  40071c:	4629      	mov	r1, r5
  40071e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 400774 <_Z22task1_estimateAttitudev+0x2dc>
  400722:	47c0      	blx	r8
  400724:	2800      	cmp	r0, #0
  400726:	d137      	bne.n	400798 <_Z22task1_estimateAttitudev+0x300>
  400728:	f8df a040 	ldr.w	sl, [pc, #64]	; 40076c <_Z22task1_estimateAttitudev+0x2d4>
  40072c:	a308      	add	r3, pc, #32	; (adr r3, 400750 <_Z22task1_estimateAttitudev+0x2b8>)
  40072e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400732:	f5ab 719c 	sub.w	r1, fp, #312	; 0x138
  400736:	e9d1 012e 	ldrd	r0, r1, [r1, #184]	; 0xb8
  40073a:	47d0      	blx	sl
  40073c:	e01c      	b.n	400778 <_Z22task1_estimateAttitudev+0x2e0>
  40073e:	bf00      	nop
  400740:	00000000 	.word	0x00000000
  400744:	412e8480 	.word	0x412e8480
  400748:	00000000 	.word	0x00000000
  40074c:	40dfffc0 	.word	0x40dfffc0
  400750:	9999999a 	.word	0x9999999a
  400754:	3fe99999 	.word	0x3fe99999
  400758:	00401a79 	.word	0x00401a79
  40075c:	20400458 	.word	0x20400458
  400760:	004035cd 	.word	0x004035cd
  400764:	0040390d 	.word	0x0040390d
  400768:	00402325 	.word	0x00402325
  40076c:	004036b9 	.word	0x004036b9
  400770:	004035ed 	.word	0x004035ed
  400774:	00403bd9 	.word	0x00403bd9
  400778:	4680      	mov	r8, r0
  40077a:	4689      	mov	r9, r1
  40077c:	a3a0      	add	r3, pc, #640	; (adr r3, 400a00 <_Z22task1_estimateAttitudev+0x568>)
  40077e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400782:	4620      	mov	r0, r4
  400784:	4629      	mov	r1, r5
  400786:	47d0      	blx	sl
  400788:	4602      	mov	r2, r0
  40078a:	460b      	mov	r3, r1
  40078c:	4640      	mov	r0, r8
  40078e:	4649      	mov	r1, r9
  400790:	4ca1      	ldr	r4, [pc, #644]	; (400a18 <_Z22task1_estimateAttitudev+0x580>)
  400792:	47a0      	blx	r4
  400794:	4604      	mov	r4, r0
  400796:	460d      	mov	r5, r1
		void step(double dt){
			
			_droniSens.update();

			//--
			accX	= _droniSens.getAccelX();
  400798:	4ba0      	ldr	r3, [pc, #640]	; (400a1c <_Z22task1_estimateAttitudev+0x584>)
  40079a:	f503 72a4 	add.w	r2, r3, #328	; 0x148
  40079e:	e9c2 4514 	strd	r4, r5, [r2, #80]	; 0x50
		}
		double getAccelY(void){
			return _bmi2.accel_y > BMI160_2G ? _bmi2.accel_y : (0.2*_bmi2.accel_y + 0.8*_bmi1.accel_y) ;
  4007a2:	f503 731a 	add.w	r3, r3, #616	; 0x268
  4007a6:	e9d3 ab00 	ldrd	sl, fp, [r3]
  4007aa:	2200      	movs	r2, #0
  4007ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4007b0:	4650      	mov	r0, sl
  4007b2:	4659      	mov	r1, fp
  4007b4:	4c9a      	ldr	r4, [pc, #616]	; (400a20 <_Z22task1_estimateAttitudev+0x588>)
  4007b6:	47a0      	blx	r4
  4007b8:	b9b8      	cbnz	r0, 4007ea <_Z22task1_estimateAttitudev+0x352>
  4007ba:	4c9a      	ldr	r4, [pc, #616]	; (400a24 <_Z22task1_estimateAttitudev+0x58c>)
  4007bc:	a392      	add	r3, pc, #584	; (adr r3, 400a08 <_Z22task1_estimateAttitudev+0x570>)
  4007be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4007c2:	4999      	ldr	r1, [pc, #612]	; (400a28 <_Z22task1_estimateAttitudev+0x590>)
  4007c4:	e9d1 0130 	ldrd	r0, r1, [r1, #192]	; 0xc0
  4007c8:	47a0      	blx	r4
  4007ca:	4680      	mov	r8, r0
  4007cc:	4689      	mov	r9, r1
  4007ce:	a38c      	add	r3, pc, #560	; (adr r3, 400a00 <_Z22task1_estimateAttitudev+0x568>)
  4007d0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4007d4:	4650      	mov	r0, sl
  4007d6:	4659      	mov	r1, fp
  4007d8:	47a0      	blx	r4
  4007da:	4602      	mov	r2, r0
  4007dc:	460b      	mov	r3, r1
  4007de:	4640      	mov	r0, r8
  4007e0:	4649      	mov	r1, r9
  4007e2:	4c8d      	ldr	r4, [pc, #564]	; (400a18 <_Z22task1_estimateAttitudev+0x580>)
  4007e4:	47a0      	blx	r4
  4007e6:	4682      	mov	sl, r0
  4007e8:	468b      	mov	fp, r1
			accY	= _droniSens.getAccelY();
  4007ea:	4b8c      	ldr	r3, [pc, #560]	; (400a1c <_Z22task1_estimateAttitudev+0x584>)
  4007ec:	f503 72a4 	add.w	r2, r3, #328	; 0x148
  4007f0:	e9c2 ab16 	strd	sl, fp, [r2, #88]	; 0x58
		}
		double getAccelZ(void){
			return _bmi2.accel_z > BMI160_2G ? _bmi2.accel_z : (0.2*_bmi2.accel_z + 0.8*_bmi1.accel_z) ;
  4007f4:	f503 731c 	add.w	r3, r3, #624	; 0x270
  4007f8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4007fc:	4618      	mov	r0, r3
  4007fe:	4621      	mov	r1, r4
  400800:	2200      	movs	r2, #0
  400802:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  400806:	e9cd 0100 	strd	r0, r1, [sp]
  40080a:	4c85      	ldr	r4, [pc, #532]	; (400a20 <_Z22task1_estimateAttitudev+0x588>)
  40080c:	47a0      	blx	r4
  40080e:	b9b8      	cbnz	r0, 400840 <_Z22task1_estimateAttitudev+0x3a8>
  400810:	4c84      	ldr	r4, [pc, #528]	; (400a24 <_Z22task1_estimateAttitudev+0x58c>)
  400812:	a37d      	add	r3, pc, #500	; (adr r3, 400a08 <_Z22task1_estimateAttitudev+0x570>)
  400814:	e9d3 2300 	ldrd	r2, r3, [r3]
  400818:	4983      	ldr	r1, [pc, #524]	; (400a28 <_Z22task1_estimateAttitudev+0x590>)
  40081a:	e9d1 0132 	ldrd	r0, r1, [r1, #200]	; 0xc8
  40081e:	47a0      	blx	r4
  400820:	4680      	mov	r8, r0
  400822:	4689      	mov	r9, r1
  400824:	a376      	add	r3, pc, #472	; (adr r3, 400a00 <_Z22task1_estimateAttitudev+0x568>)
  400826:	e9d3 2300 	ldrd	r2, r3, [r3]
  40082a:	e9dd 0100 	ldrd	r0, r1, [sp]
  40082e:	47a0      	blx	r4
  400830:	4602      	mov	r2, r0
  400832:	460b      	mov	r3, r1
  400834:	4640      	mov	r0, r8
  400836:	4649      	mov	r1, r9
  400838:	4c77      	ldr	r4, [pc, #476]	; (400a18 <_Z22task1_estimateAttitudev+0x580>)
  40083a:	47a0      	blx	r4
  40083c:	e9cd 0100 	strd	r0, r1, [sp]
			accZ	= _droniSens.getAccelZ();
  400840:	4b76      	ldr	r3, [pc, #472]	; (400a1c <_Z22task1_estimateAttitudev+0x584>)
  400842:	f503 72a4 	add.w	r2, r3, #328	; 0x148
  400846:	e9dd 0100 	ldrd	r0, r1, [sp]
  40084a:	e9c2 0118 	strd	r0, r1, [r2, #96]	; 0x60
		}

		double getGyroX(void){
			return _bmi2.gyro_x > BMI160_250DEG ? _bmi2.gyro_x : (0.2*_bmi2.gyro_x + 0.8*_bmi1.gyro_x) ;
  40084e:	f503 731e 	add.w	r3, r3, #632	; 0x278
  400852:	e9d3 4500 	ldrd	r4, r5, [r3]
  400856:	2200      	movs	r2, #0
  400858:	4b74      	ldr	r3, [pc, #464]	; (400a2c <_Z22task1_estimateAttitudev+0x594>)
  40085a:	4620      	mov	r0, r4
  40085c:	4629      	mov	r1, r5
  40085e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 400a20 <_Z22task1_estimateAttitudev+0x588>
  400862:	47c0      	blx	r8
  400864:	b9c0      	cbnz	r0, 400898 <_Z22task1_estimateAttitudev+0x400>
  400866:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 400a24 <_Z22task1_estimateAttitudev+0x58c>
  40086a:	a367      	add	r3, pc, #412	; (adr r3, 400a08 <_Z22task1_estimateAttitudev+0x570>)
  40086c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400870:	496d      	ldr	r1, [pc, #436]	; (400a28 <_Z22task1_estimateAttitudev+0x590>)
  400872:	e9d1 0134 	ldrd	r0, r1, [r1, #208]	; 0xd0
  400876:	47c0      	blx	r8
  400878:	e9cd 0106 	strd	r0, r1, [sp, #24]
  40087c:	a360      	add	r3, pc, #384	; (adr r3, 400a00 <_Z22task1_estimateAttitudev+0x568>)
  40087e:	e9d3 2300 	ldrd	r2, r3, [r3]
  400882:	4620      	mov	r0, r4
  400884:	4629      	mov	r1, r5
  400886:	47c0      	blx	r8
  400888:	4602      	mov	r2, r0
  40088a:	460b      	mov	r3, r1
  40088c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400890:	4c61      	ldr	r4, [pc, #388]	; (400a18 <_Z22task1_estimateAttitudev+0x580>)
  400892:	47a0      	blx	r4
  400894:	4604      	mov	r4, r0
  400896:	460d      	mov	r5, r1
			gyroX	= _droniSens.getGyroX();
  400898:	4b60      	ldr	r3, [pc, #384]	; (400a1c <_Z22task1_estimateAttitudev+0x584>)
  40089a:	f503 72a4 	add.w	r2, r3, #328	; 0x148
  40089e:	e9c2 451a 	strd	r4, r5, [r2, #104]	; 0x68
		}
		double getGyroY(void){
			return _bmi2.gyro_y > BMI160_250DEG ? _bmi2.gyro_y : (0.2*_bmi2.gyro_y + 0.8*_bmi1.gyro_y) ;
  4008a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
  4008a6:	e9d3 4500 	ldrd	r4, r5, [r3]
  4008aa:	2200      	movs	r2, #0
  4008ac:	4b5f      	ldr	r3, [pc, #380]	; (400a2c <_Z22task1_estimateAttitudev+0x594>)
  4008ae:	4620      	mov	r0, r4
  4008b0:	4629      	mov	r1, r5
  4008b2:	f8df 816c 	ldr.w	r8, [pc, #364]	; 400a20 <_Z22task1_estimateAttitudev+0x588>
  4008b6:	47c0      	blx	r8
  4008b8:	b9c0      	cbnz	r0, 4008ec <_Z22task1_estimateAttitudev+0x454>
  4008ba:	f8df 8168 	ldr.w	r8, [pc, #360]	; 400a24 <_Z22task1_estimateAttitudev+0x58c>
  4008be:	a352      	add	r3, pc, #328	; (adr r3, 400a08 <_Z22task1_estimateAttitudev+0x570>)
  4008c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4008c4:	4958      	ldr	r1, [pc, #352]	; (400a28 <_Z22task1_estimateAttitudev+0x590>)
  4008c6:	e9d1 0136 	ldrd	r0, r1, [r1, #216]	; 0xd8
  4008ca:	47c0      	blx	r8
  4008cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  4008d0:	a34b      	add	r3, pc, #300	; (adr r3, 400a00 <_Z22task1_estimateAttitudev+0x568>)
  4008d2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4008d6:	4620      	mov	r0, r4
  4008d8:	4629      	mov	r1, r5
  4008da:	47c0      	blx	r8
  4008dc:	4602      	mov	r2, r0
  4008de:	460b      	mov	r3, r1
  4008e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4008e4:	4c4c      	ldr	r4, [pc, #304]	; (400a18 <_Z22task1_estimateAttitudev+0x580>)
  4008e6:	47a0      	blx	r4
  4008e8:	4604      	mov	r4, r0
  4008ea:	460d      	mov	r5, r1
			gyroY	= _droniSens.getGyroY();
  4008ec:	4b4e      	ldr	r3, [pc, #312]	; (400a28 <_Z22task1_estimateAttitudev+0x590>)
  4008ee:	e9c3 451c 	strd	r4, r5, [r3, #112]	; 0x70
		}
		double getGyroZ(void){
			return _bmi2.gyro_z > BMI160_250DEG ? _bmi2.gyro_z : (0.2*_bmi2.gyro_z + 0.8*_bmi1.gyro_z) ;
  4008f2:	2200      	movs	r2, #0
  4008f4:	4b4d      	ldr	r3, [pc, #308]	; (400a2c <_Z22task1_estimateAttitudev+0x594>)
  4008f6:	4630      	mov	r0, r6
  4008f8:	4639      	mov	r1, r7
  4008fa:	4c49      	ldr	r4, [pc, #292]	; (400a20 <_Z22task1_estimateAttitudev+0x588>)
  4008fc:	47a0      	blx	r4
  4008fe:	b9b8      	cbnz	r0, 400930 <_Z22task1_estimateAttitudev+0x498>
  400900:	4c48      	ldr	r4, [pc, #288]	; (400a24 <_Z22task1_estimateAttitudev+0x58c>)
  400902:	a341      	add	r3, pc, #260	; (adr r3, 400a08 <_Z22task1_estimateAttitudev+0x570>)
  400904:	e9d3 2300 	ldrd	r2, r3, [r3]
  400908:	4947      	ldr	r1, [pc, #284]	; (400a28 <_Z22task1_estimateAttitudev+0x590>)
  40090a:	e9d1 0138 	ldrd	r0, r1, [r1, #224]	; 0xe0
  40090e:	47a0      	blx	r4
  400910:	4680      	mov	r8, r0
  400912:	4689      	mov	r9, r1
  400914:	a33a      	add	r3, pc, #232	; (adr r3, 400a00 <_Z22task1_estimateAttitudev+0x568>)
  400916:	e9d3 2300 	ldrd	r2, r3, [r3]
  40091a:	4630      	mov	r0, r6
  40091c:	4639      	mov	r1, r7
  40091e:	47a0      	blx	r4
  400920:	4602      	mov	r2, r0
  400922:	460b      	mov	r3, r1
  400924:	4640      	mov	r0, r8
  400926:	4649      	mov	r1, r9
  400928:	4c3b      	ldr	r4, [pc, #236]	; (400a18 <_Z22task1_estimateAttitudev+0x580>)
  40092a:	47a0      	blx	r4
  40092c:	4606      	mov	r6, r0
  40092e:	460f      	mov	r7, r1
			gyroZ	= _droniSens.getGyroZ();
  400930:	4c3d      	ldr	r4, [pc, #244]	; (400a28 <_Z22task1_estimateAttitudev+0x590>)
  400932:	e9c4 671e 	strd	r6, r7, [r4, #120]	; 0x78

			//--
			#ifdef RESTRICT_PITCH // Eq. 25 and 26
				double roll  = atan2(accY, accZ) * RAD_TO_DEG;
  400936:	e9dd 2300 	ldrd	r2, r3, [sp]
  40093a:	4650      	mov	r0, sl
  40093c:	4659      	mov	r1, fp
  40093e:	4d3c      	ldr	r5, [pc, #240]	; (400a30 <_Z22task1_estimateAttitudev+0x598>)
  400940:	47a8      	blx	r5
  400942:	4d38      	ldr	r5, [pc, #224]	; (400a24 <_Z22task1_estimateAttitudev+0x58c>)
  400944:	a332      	add	r3, pc, #200	; (adr r3, 400a10 <_Z22task1_estimateAttitudev+0x578>)
  400946:	e9d3 2300 	ldrd	r2, r3, [r3]
  40094a:	47a8      	blx	r5
  40094c:	e9cd 0100 	strd	r0, r1, [sp]
				double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
  400950:	6d23      	ldr	r3, [r4, #80]	; 0x50
  400952:	9308      	str	r3, [sp, #32]
  400954:	6d66      	ldr	r6, [r4, #84]	; 0x54
  400956:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  40095a:	e9d4 8916 	ldrd	r8, r9, [r4, #88]	; 0x58
  40095e:	e9d4 ab18 	ldrd	sl, fp, [r4, #96]	; 0x60
  400962:	4642      	mov	r2, r8
  400964:	464b      	mov	r3, r9
  400966:	4640      	mov	r0, r8
  400968:	4649      	mov	r1, r9
  40096a:	47a8      	blx	r5
  40096c:	e9cd 0106 	strd	r0, r1, [sp, #24]
  400970:	4f29      	ldr	r7, [pc, #164]	; (400a18 <_Z22task1_estimateAttitudev+0x580>)
  400972:	4642      	mov	r2, r8
  400974:	464b      	mov	r3, r9
  400976:	4640      	mov	r0, r8
  400978:	4649      	mov	r1, r9
  40097a:	47a8      	blx	r5
  40097c:	4680      	mov	r8, r0
  40097e:	4689      	mov	r9, r1
  400980:	4652      	mov	r2, sl
  400982:	465b      	mov	r3, fp
  400984:	4650      	mov	r0, sl
  400986:	4659      	mov	r1, fp
  400988:	47a8      	blx	r5
  40098a:	4602      	mov	r2, r0
  40098c:	460b      	mov	r3, r1
  40098e:	4640      	mov	r0, r8
  400990:	4649      	mov	r1, r9
  400992:	47b8      	blx	r7
  400994:	4b27      	ldr	r3, [pc, #156]	; (400a34 <_Z22task1_estimateAttitudev+0x59c>)
  400996:	4798      	blx	r3
  400998:	4602      	mov	r2, r0
  40099a:	460b      	mov	r3, r1
  40099c:	9808      	ldr	r0, [sp, #32]
  40099e:	4631      	mov	r1, r6
  4009a0:	4e25      	ldr	r6, [pc, #148]	; (400a38 <_Z22task1_estimateAttitudev+0x5a0>)
  4009a2:	47b0      	blx	r6
  4009a4:	4b25      	ldr	r3, [pc, #148]	; (400a3c <_Z22task1_estimateAttitudev+0x5a4>)
  4009a6:	4798      	blx	r3
  4009a8:	a319      	add	r3, pc, #100	; (adr r3, 400a10 <_Z22task1_estimateAttitudev+0x578>)
  4009aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4009ae:	47a8      	blx	r5
  4009b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
				double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
				double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
			#endif

			//DO I NEED IT?
			double gyroXrate = gyroX;// / 131.0; // Convert to deg/s
  4009b4:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
			double gyroYrate = gyroY;// / 131.0; // Convert to deg/s
  4009b8:	6f26      	ldr	r6, [r4, #112]	; 0x70
  4009ba:	6f67      	ldr	r7, [r4, #116]	; 0x74

			#ifdef RESTRICT_PITCH
				// This fixes the transition problem when the accelerometer angle jumps between -180 and 180 degrees
				if ((roll < -90 && kalAngleX > 90) || (roll > 90 && kalAngleX < -90)) {
  4009bc:	2200      	movs	r2, #0
  4009be:	4b20      	ldr	r3, [pc, #128]	; (400a40 <_Z22task1_estimateAttitudev+0x5a8>)
  4009c0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4009c4:	4c1f      	ldr	r4, [pc, #124]	; (400a44 <_Z22task1_estimateAttitudev+0x5ac>)
  4009c6:	47a0      	blx	r4
  4009c8:	b140      	cbz	r0, 4009dc <_Z22task1_estimateAttitudev+0x544>
  4009ca:	2200      	movs	r2, #0
  4009cc:	4b1e      	ldr	r3, [pc, #120]	; (400a48 <_Z22task1_estimateAttitudev+0x5b0>)
  4009ce:	4916      	ldr	r1, [pc, #88]	; (400a28 <_Z22task1_estimateAttitudev+0x590>)
  4009d0:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
  4009d4:	4c12      	ldr	r4, [pc, #72]	; (400a20 <_Z22task1_estimateAttitudev+0x588>)
  4009d6:	47a0      	blx	r4
  4009d8:	2800      	cmp	r0, #0
  4009da:	d138      	bne.n	400a4e <_Z22task1_estimateAttitudev+0x5b6>
  4009dc:	2200      	movs	r2, #0
  4009de:	4b1a      	ldr	r3, [pc, #104]	; (400a48 <_Z22task1_estimateAttitudev+0x5b0>)
  4009e0:	e9dd 0100 	ldrd	r0, r1, [sp]
  4009e4:	4c0e      	ldr	r4, [pc, #56]	; (400a20 <_Z22task1_estimateAttitudev+0x588>)
  4009e6:	47a0      	blx	r4
  4009e8:	2800      	cmp	r0, #0
  4009ea:	d044      	beq.n	400a76 <_Z22task1_estimateAttitudev+0x5de>
  4009ec:	2200      	movs	r2, #0
  4009ee:	4b14      	ldr	r3, [pc, #80]	; (400a40 <_Z22task1_estimateAttitudev+0x5a8>)
  4009f0:	490d      	ldr	r1, [pc, #52]	; (400a28 <_Z22task1_estimateAttitudev+0x590>)
  4009f2:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
  4009f6:	4c13      	ldr	r4, [pc, #76]	; (400a44 <_Z22task1_estimateAttitudev+0x5ac>)
  4009f8:	47a0      	blx	r4
  4009fa:	e027      	b.n	400a4c <_Z22task1_estimateAttitudev+0x5b4>
  4009fc:	f3af 8000 	nop.w
  400a00:	9999999a 	.word	0x9999999a
  400a04:	3fc99999 	.word	0x3fc99999
  400a08:	9999999a 	.word	0x9999999a
  400a0c:	3fe99999 	.word	0x3fe99999
  400a10:	1a63c1f8 	.word	0x1a63c1f8
  400a14:	404ca5dc 	.word	0x404ca5dc
  400a18:	00403355 	.word	0x00403355
  400a1c:	20400458 	.word	0x20400458
  400a20:	00403bd9 	.word	0x00403bd9
  400a24:	004036b9 	.word	0x004036b9
  400a28:	204005a0 	.word	0x204005a0
  400a2c:	406f4000 	.word	0x406f4000
  400a30:	00402f75 	.word	0x00402f75
  400a34:	00402f79 	.word	0x00402f79
  400a38:	0040390d 	.word	0x0040390d
  400a3c:	00402c31 	.word	0x00402c31
  400a40:	c0568000 	.word	0xc0568000
  400a44:	00403b9d 	.word	0x00403b9d
  400a48:	40568000 	.word	0x40568000
  400a4c:	b198      	cbz	r0, 400a76 <_Z22task1_estimateAttitudev+0x5de>
					kalmanX.setAngle(roll);
  400a4e:	e9dd 8900 	ldrd	r8, r9, [sp]
  400a52:	4640      	mov	r0, r8
  400a54:	4649      	mov	r1, r9
  400a56:	4b6e      	ldr	r3, [pc, #440]	; (400c10 <_Z22task1_estimateAttitudev+0x778>)
  400a58:	4798      	blx	r3
  400a5a:	4c6e      	ldr	r4, [pc, #440]	; (400c14 <_Z22task1_estimateAttitudev+0x77c>)
  400a5c:	4601      	mov	r1, r0
  400a5e:	4620      	mov	r0, r4
  400a60:	4b6d      	ldr	r3, [pc, #436]	; (400c18 <_Z22task1_estimateAttitudev+0x780>)
  400a62:	4798      	blx	r3
					compAngleX = roll;
  400a64:	4642      	mov	r2, r8
  400a66:	464b      	mov	r3, r9
  400a68:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
					kalAngleX = roll;
  400a6c:	e9c4 2328 	strd	r2, r3, [r4, #160]	; 0xa0
					gyroXangle = roll;
  400a70:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
  400a74:	e016      	b.n	400aa4 <_Z22task1_estimateAttitudev+0x60c>
				} else
				kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
  400a76:	4c66      	ldr	r4, [pc, #408]	; (400c10 <_Z22task1_estimateAttitudev+0x778>)
  400a78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400a7c:	47a0      	blx	r4
  400a7e:	4680      	mov	r8, r0
  400a80:	4650      	mov	r0, sl
  400a82:	4659      	mov	r1, fp
  400a84:	47a0      	blx	r4
  400a86:	4605      	mov	r5, r0
  400a88:	e9dd 0100 	ldrd	r0, r1, [sp]
  400a8c:	47a0      	blx	r4
  400a8e:	4c61      	ldr	r4, [pc, #388]	; (400c14 <_Z22task1_estimateAttitudev+0x77c>)
  400a90:	4643      	mov	r3, r8
  400a92:	462a      	mov	r2, r5
  400a94:	4601      	mov	r1, r0
  400a96:	4620      	mov	r0, r4
  400a98:	4d60      	ldr	r5, [pc, #384]	; (400c1c <_Z22task1_estimateAttitudev+0x784>)
  400a9a:	47a8      	blx	r5
  400a9c:	4b60      	ldr	r3, [pc, #384]	; (400c20 <_Z22task1_estimateAttitudev+0x788>)
  400a9e:	4798      	blx	r3
  400aa0:	e9c4 0128 	strd	r0, r1, [r4, #160]	; 0xa0

				if (abs(kalAngleX) > 90)
  400aa4:	4b5b      	ldr	r3, [pc, #364]	; (400c14 <_Z22task1_estimateAttitudev+0x77c>)
  400aa6:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
  400aaa:	4b5e      	ldr	r3, [pc, #376]	; (400c24 <_Z22task1_estimateAttitudev+0x78c>)
  400aac:	4798      	blx	r3
  400aae:	2800      	cmp	r0, #0
  400ab0:	bfb8      	it	lt
  400ab2:	4240      	neglt	r0, r0
  400ab4:	285a      	cmp	r0, #90	; 0x5a
				gyroYrate = -gyroYrate; // Invert rate, so it fits the restriced accelerometer reading
  400ab6:	bfc8      	it	gt
  400ab8:	f107 4700 	addgt.w	r7, r7, #2147483648	; 0x80000000
				kalAngleY = kalmanY.getAngle(pitch, gyroYrate, dt);
  400abc:	4c54      	ldr	r4, [pc, #336]	; (400c10 <_Z22task1_estimateAttitudev+0x778>)
  400abe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400ac2:	47a0      	blx	r4
  400ac4:	4680      	mov	r8, r0
  400ac6:	4630      	mov	r0, r6
  400ac8:	4639      	mov	r1, r7
  400aca:	47a0      	blx	r4
  400acc:	4605      	mov	r5, r0
  400ace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400ad2:	47a0      	blx	r4
  400ad4:	f8df e164 	ldr.w	lr, [pc, #356]	; 400c3c <_Z22task1_estimateAttitudev+0x7a4>
  400ad8:	f50e 74a4 	add.w	r4, lr, #328	; 0x148
  400adc:	4643      	mov	r3, r8
  400ade:	462a      	mov	r2, r5
  400ae0:	4601      	mov	r1, r0
  400ae2:	f50e 70b8 	add.w	r0, lr, #368	; 0x170
  400ae6:	4d4d      	ldr	r5, [pc, #308]	; (400c1c <_Z22task1_estimateAttitudev+0x784>)
  400ae8:	47a8      	blx	r5
  400aea:	4b4d      	ldr	r3, [pc, #308]	; (400c20 <_Z22task1_estimateAttitudev+0x788>)
  400aec:	4798      	blx	r3
  400aee:	4602      	mov	r2, r0
  400af0:	460b      	mov	r3, r1
  400af2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  400af6:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
				if (abs(kalAngleY) > 90)
				gyroXrate = -gyroXrate; // Invert rate, so it fits the restriced accelerometer reading
				kalAngleX = kalmanX.getAngle(roll, gyroXrate, dt); // Calculate the angle using a Kalman filter
			#endif

			gyroXangle += gyroXrate * dt; // Calculate gyro angle without any filter
  400afa:	f8df 8144 	ldr.w	r8, [pc, #324]	; 400c40 <_Z22task1_estimateAttitudev+0x7a8>
  400afe:	4652      	mov	r2, sl
  400b00:	465b      	mov	r3, fp
  400b02:	e9dd 9a04 	ldrd	r9, sl, [sp, #16]
  400b06:	4648      	mov	r0, r9
  400b08:	4651      	mov	r1, sl
  400b0a:	47c0      	blx	r8
  400b0c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  400b10:	4d45      	ldr	r5, [pc, #276]	; (400c28 <_Z22task1_estimateAttitudev+0x790>)
  400b12:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
  400b16:	47a8      	blx	r5
  400b18:	4602      	mov	r2, r0
  400b1a:	460b      	mov	r3, r1
  400b1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  400b20:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
			gyroYangle += gyroYrate * dt;
  400b24:	4632      	mov	r2, r6
  400b26:	463b      	mov	r3, r7
  400b28:	4648      	mov	r0, r9
  400b2a:	4651      	mov	r1, sl
  400b2c:	47c0      	blx	r8
  400b2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  400b32:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
  400b36:	47a8      	blx	r5
  400b38:	4682      	mov	sl, r0
  400b3a:	468b      	mov	fp, r1
  400b3c:	e9c4 ab22 	strd	sl, fp, [r4, #136]	; 0x88
			//gyroXangle += kalmanX.getRate() * dt; // Calculate gyro angle using the unbiased rate
			//gyroYangle += kalmanY.getRate() * dt;

			compAngleX = 0.93 * (compAngleX + gyroXrate * dt) + 0.07 * roll; // Calculate the angle using a Complimentary filter
  400b40:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
  400b44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  400b48:	47a8      	blx	r5
  400b4a:	a32d      	add	r3, pc, #180	; (adr r3, 400c00 <_Z22task1_estimateAttitudev+0x768>)
  400b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400b50:	47c0      	blx	r8
  400b52:	4606      	mov	r6, r0
  400b54:	460f      	mov	r7, r1
  400b56:	a32c      	add	r3, pc, #176	; (adr r3, 400c08 <_Z22task1_estimateAttitudev+0x770>)
  400b58:	e9d3 2300 	ldrd	r2, r3, [r3]
  400b5c:	e9dd 0100 	ldrd	r0, r1, [sp]
  400b60:	47c0      	blx	r8
  400b62:	4602      	mov	r2, r0
  400b64:	460b      	mov	r3, r1
  400b66:	4630      	mov	r0, r6
  400b68:	4639      	mov	r1, r7
  400b6a:	47a8      	blx	r5
  400b6c:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
			compAngleY = 0.93 * (compAngleY + gyroYrate * dt) + 0.07 * pitch;
  400b70:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
  400b74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
  400b78:	47a8      	blx	r5
  400b7a:	a321      	add	r3, pc, #132	; (adr r3, 400c00 <_Z22task1_estimateAttitudev+0x768>)
  400b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  400b80:	47c0      	blx	r8
  400b82:	4606      	mov	r6, r0
  400b84:	460f      	mov	r7, r1
  400b86:	a320      	add	r3, pc, #128	; (adr r3, 400c08 <_Z22task1_estimateAttitudev+0x770>)
  400b88:	e9d3 2300 	ldrd	r2, r3, [r3]
  400b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400b90:	47c0      	blx	r8
  400b92:	4602      	mov	r2, r0
  400b94:	460b      	mov	r3, r1
  400b96:	4630      	mov	r0, r6
  400b98:	4639      	mov	r1, r7
  400b9a:	47a8      	blx	r5
  400b9c:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98

			// Reset the gyro angle when it has drifted too much
			if (gyroXangle < -180 || gyroXangle > 180)
  400ba0:	2200      	movs	r2, #0
  400ba2:	4b22      	ldr	r3, [pc, #136]	; (400c2c <_Z22task1_estimateAttitudev+0x794>)
  400ba4:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
  400ba8:	4628      	mov	r0, r5
  400baa:	4631      	mov	r1, r6
  400bac:	4c20      	ldr	r4, [pc, #128]	; (400c30 <_Z22task1_estimateAttitudev+0x798>)
  400bae:	47a0      	blx	r4
  400bb0:	b930      	cbnz	r0, 400bc0 <_Z22task1_estimateAttitudev+0x728>
  400bb2:	2200      	movs	r2, #0
  400bb4:	4b1f      	ldr	r3, [pc, #124]	; (400c34 <_Z22task1_estimateAttitudev+0x79c>)
  400bb6:	4628      	mov	r0, r5
  400bb8:	4631      	mov	r1, r6
  400bba:	4c1f      	ldr	r4, [pc, #124]	; (400c38 <_Z22task1_estimateAttitudev+0x7a0>)
  400bbc:	47a0      	blx	r4
  400bbe:	b120      	cbz	r0, 400bca <_Z22task1_estimateAttitudev+0x732>
				gyroXangle = kalAngleX;
  400bc0:	4914      	ldr	r1, [pc, #80]	; (400c14 <_Z22task1_estimateAttitudev+0x77c>)
  400bc2:	e9d1 2328 	ldrd	r2, r3, [r1, #160]	; 0xa0
  400bc6:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
			if (gyroYangle < -180 || gyroYangle > 180)
  400bca:	2200      	movs	r2, #0
  400bcc:	4b17      	ldr	r3, [pc, #92]	; (400c2c <_Z22task1_estimateAttitudev+0x794>)
  400bce:	4650      	mov	r0, sl
  400bd0:	4659      	mov	r1, fp
  400bd2:	4c17      	ldr	r4, [pc, #92]	; (400c30 <_Z22task1_estimateAttitudev+0x798>)
  400bd4:	47a0      	blx	r4
  400bd6:	b930      	cbnz	r0, 400be6 <_Z22task1_estimateAttitudev+0x74e>
  400bd8:	2200      	movs	r2, #0
  400bda:	4b16      	ldr	r3, [pc, #88]	; (400c34 <_Z22task1_estimateAttitudev+0x79c>)
  400bdc:	4650      	mov	r0, sl
  400bde:	4659      	mov	r1, fp
  400be0:	4c15      	ldr	r4, [pc, #84]	; (400c38 <_Z22task1_estimateAttitudev+0x7a0>)
  400be2:	47a0      	blx	r4
  400be4:	b120      	cbz	r0, 400bf0 <_Z22task1_estimateAttitudev+0x758>
				gyroYangle = kalAngleY;
  400be6:	4b0b      	ldr	r3, [pc, #44]	; (400c14 <_Z22task1_estimateAttitudev+0x77c>)
  400be8:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
  400bec:	e9c3 1222 	strd	r1, r2, [r3, #136]	; 0x88

	//--
	task1_timestamp = now;
  400bf0:	4b12      	ldr	r3, [pc, #72]	; (400c3c <_Z22task1_estimateAttitudev+0x7a4>)
  400bf2:	9a03      	ldr	r2, [sp, #12]
  400bf4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
}
  400bf8:	b00f      	add	sp, #60	; 0x3c
  400bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400bfe:	bf00      	nop
  400c00:	5c28f5c3 	.word	0x5c28f5c3
  400c04:	3fedc28f 	.word	0x3fedc28f
  400c08:	1eb851ec 	.word	0x1eb851ec
  400c0c:	3fb1eb85 	.word	0x3fb1eb85
  400c10:	00403ca9 	.word	0x00403ca9
  400c14:	204005a0 	.word	0x204005a0
  400c18:	00401d51 	.word	0x00401d51
  400c1c:	00401c55 	.word	0x00401c55
  400c20:	00403611 	.word	0x00403611
  400c24:	00403c19 	.word	0x00403c19
  400c28:	00403355 	.word	0x00403355
  400c2c:	c0668000 	.word	0xc0668000
  400c30:	00403b9d 	.word	0x00403b9d
  400c34:	40668000 	.word	0x40668000
  400c38:	00403bd9 	.word	0x00403bd9
  400c3c:	20400458 	.word	0x20400458
  400c40:	004036b9 	.word	0x004036b9

00400c44 <_Z26task4_update_target_anglesv>:

//----
static bool canReadTargetAngles = true;
void task4_update_target_angles(void){
  400c44:	b570      	push	{r4, r5, r6, lr}
	
	
	canReadTargetAngles = false;
	if(_reqRoll_x>-30 && _reqRoll_x<30)
  400c46:	4b14      	ldr	r3, [pc, #80]	; (400c98 <_Z26task4_update_target_anglesv+0x54>)
  400c48:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
  400c4c:	2200      	movs	r2, #0
  400c4e:	4b13      	ldr	r3, [pc, #76]	; (400c9c <_Z26task4_update_target_anglesv+0x58>)
  400c50:	4620      	mov	r0, r4
  400c52:	4629      	mov	r1, r5
  400c54:	4e12      	ldr	r6, [pc, #72]	; (400ca0 <_Z26task4_update_target_anglesv+0x5c>)
  400c56:	47b0      	blx	r6
  400c58:	b148      	cbz	r0, 400c6e <_Z26task4_update_target_anglesv+0x2a>
  400c5a:	2200      	movs	r2, #0
  400c5c:	4b11      	ldr	r3, [pc, #68]	; (400ca4 <_Z26task4_update_target_anglesv+0x60>)
  400c5e:	4620      	mov	r0, r4
  400c60:	4629      	mov	r1, r5
  400c62:	4e11      	ldr	r6, [pc, #68]	; (400ca8 <_Z26task4_update_target_anglesv+0x64>)
  400c64:	47b0      	blx	r6
  400c66:	b110      	cbz	r0, 400c6e <_Z26task4_update_target_anglesv+0x2a>
	targetAngX=_reqRoll_x;
  400c68:	4b10      	ldr	r3, [pc, #64]	; (400cac <_Z26task4_update_target_anglesv+0x68>)
  400c6a:	e9c3 4500 	strd	r4, r5, [r3]
	
	if(_reqPitch_y>-30 && _reqPitch_y<30)
  400c6e:	4b0a      	ldr	r3, [pc, #40]	; (400c98 <_Z26task4_update_target_anglesv+0x54>)
  400c70:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
  400c74:	2200      	movs	r2, #0
  400c76:	4b09      	ldr	r3, [pc, #36]	; (400c9c <_Z26task4_update_target_anglesv+0x58>)
  400c78:	4620      	mov	r0, r4
  400c7a:	4629      	mov	r1, r5
  400c7c:	4e08      	ldr	r6, [pc, #32]	; (400ca0 <_Z26task4_update_target_anglesv+0x5c>)
  400c7e:	47b0      	blx	r6
  400c80:	b148      	cbz	r0, 400c96 <_Z26task4_update_target_anglesv+0x52>
  400c82:	2200      	movs	r2, #0
  400c84:	4b07      	ldr	r3, [pc, #28]	; (400ca4 <_Z26task4_update_target_anglesv+0x60>)
  400c86:	4620      	mov	r0, r4
  400c88:	4629      	mov	r1, r5
  400c8a:	4e07      	ldr	r6, [pc, #28]	; (400ca8 <_Z26task4_update_target_anglesv+0x64>)
  400c8c:	47b0      	blx	r6
  400c8e:	b110      	cbz	r0, 400c96 <_Z26task4_update_target_anglesv+0x52>
	targetAngY=_reqPitch_y;
  400c90:	4b07      	ldr	r3, [pc, #28]	; (400cb0 <_Z26task4_update_target_anglesv+0x6c>)
  400c92:	e9c3 4500 	strd	r4, r5, [r3]
  400c96:	bd70      	pop	{r4, r5, r6, pc}
  400c98:	20400458 	.word	0x20400458
  400c9c:	c03e0000 	.word	0xc03e0000
  400ca0:	00403bd9 	.word	0x00403bd9
  400ca4:	403e0000 	.word	0x403e0000
  400ca8:	00403b9d 	.word	0x00403b9d
  400cac:	20400710 	.word	0x20400710
  400cb0:	20400718 	.word	0x20400718

00400cb4 <_Z12task0_tracesv>:
}

//-- traces
static uint32_t task0_timestamp = 0;
static uint32_t task0_period = 1000000; //period of 1 sec
void task0_traces(void){
  400cb4:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
	
	//--
	if(micros() < task0_timestamp + task0_period) return;
  400cb8:	4b65      	ldr	r3, [pc, #404]	; (400e50 <_Z12task0_tracesv+0x19c>)
  400cba:	4798      	blx	r3
  400cbc:	4b65      	ldr	r3, [pc, #404]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400cbe:	f8d3 22c8 	ldr.w	r2, [r3, #712]	; 0x2c8
  400cc2:	4b65      	ldr	r3, [pc, #404]	; (400e58 <_Z12task0_tracesv+0x1a4>)
  400cc4:	4413      	add	r3, r2
  400cc6:	4298      	cmp	r0, r3
  400cc8:	f0c0 80c0 	bcc.w	400e4c <_Z12task0_tracesv+0x198>
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
		};
		void println(const char *str){
			tinkerUartPutString(_uartId,str);
  400ccc:	4c61      	ldr	r4, [pc, #388]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400cce:	4963      	ldr	r1, [pc, #396]	; (400e5c <_Z12task0_tracesv+0x1a8>)
  400cd0:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400cd2:	4d63      	ldr	r5, [pc, #396]	; (400e60 <_Z12task0_tracesv+0x1ac>)
  400cd4:	47a8      	blx	r5
			tinkerUartPutString(_uartId,"\n");
  400cd6:	4963      	ldr	r1, [pc, #396]	; (400e64 <_Z12task0_tracesv+0x1b0>)
  400cd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400cda:	47a8      	blx	r5
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  400cdc:	4962      	ldr	r1, [pc, #392]	; (400e68 <_Z12task0_tracesv+0x1b4>)
  400cde:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400ce0:	47a8      	blx	r5
	TinkerUart0.println("-----------------");
	//TinkerUart0.print("gyroXangle:"); TinkerUart0.printlnDouble(droniAtt.gyroXangle);
	//TinkerUart0.print("gyroYangle:"); TinkerUart0.printlnDouble(droniAtt.gyroYangle);
	//TinkerUart0.print("compAngleX:"); TinkerUart0.printlnDouble(droniAtt.compAngleX);
	//TinkerUart0.print("compAngleY:"); TinkerUart0.printlnDouble(droniAtt.compAngleY);
	TinkerUart0.print("estimAngleX:"); TinkerUart0.printlnDouble(estimAngleX);
  400ce2:	f8d4 72d0 	ldr.w	r7, [r4, #720]	; 0x2d0
  400ce6:	f8d4 62d4 	ldr.w	r6, [r4, #724]	; 0x2d4
			
			size_t n = 0;
			
			//if (isnan(number)) return print("nan");
			//if (isinf(number)) return print("inf");
			if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  400cea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  400cee:	4b5f      	ldr	r3, [pc, #380]	; (400e6c <_Z12task0_tracesv+0x1b8>)
  400cf0:	4638      	mov	r0, r7
  400cf2:	4631      	mov	r1, r6
  400cf4:	4c5e      	ldr	r4, [pc, #376]	; (400e70 <_Z12task0_tracesv+0x1bc>)
  400cf6:	47a0      	blx	r4
  400cf8:	b120      	cbz	r0, 400d04 <_Z12task0_tracesv+0x50>
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  400cfa:	495e      	ldr	r1, [pc, #376]	; (400e74 <_Z12task0_tracesv+0x1c0>)
  400cfc:	4b55      	ldr	r3, [pc, #340]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400cfe:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400d00:	47a8      	blx	r5
  400d02:	e040      	b.n	400d86 <_Z12task0_tracesv+0xd2>
			size_t n = 0;
			
			//if (isnan(number)) return print("nan");
			//if (isinf(number)) return print("inf");
			if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
			if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  400d04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  400d08:	4b5b      	ldr	r3, [pc, #364]	; (400e78 <_Z12task0_tracesv+0x1c4>)
  400d0a:	4638      	mov	r0, r7
  400d0c:	4631      	mov	r1, r6
  400d0e:	4c5b      	ldr	r4, [pc, #364]	; (400e7c <_Z12task0_tracesv+0x1c8>)
  400d10:	47a0      	blx	r4
  400d12:	b128      	cbz	r0, 400d20 <_Z12task0_tracesv+0x6c>
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  400d14:	4957      	ldr	r1, [pc, #348]	; (400e74 <_Z12task0_tracesv+0x1c0>)
  400d16:	4b4f      	ldr	r3, [pc, #316]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400d18:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400d1a:	4b51      	ldr	r3, [pc, #324]	; (400e60 <_Z12task0_tracesv+0x1ac>)
  400d1c:	4798      	blx	r3
  400d1e:	e032      	b.n	400d86 <_Z12task0_tracesv+0xd2>
			//if (isinf(number)) return print("inf");
			if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
			if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
			
			// Handle negative numbers
			if (number < 0.0)
  400d20:	2200      	movs	r2, #0
  400d22:	2300      	movs	r3, #0
  400d24:	4638      	mov	r0, r7
  400d26:	4631      	mov	r1, r6
  400d28:	4c54      	ldr	r4, [pc, #336]	; (400e7c <_Z12task0_tracesv+0x1c8>)
  400d2a:	47a0      	blx	r4
  400d2c:	b130      	cbz	r0, 400d3c <_Z12task0_tracesv+0x88>
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  400d2e:	4954      	ldr	r1, [pc, #336]	; (400e80 <_Z12task0_tracesv+0x1cc>)
  400d30:	4b48      	ldr	r3, [pc, #288]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400d32:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400d34:	4b4a      	ldr	r3, [pc, #296]	; (400e60 <_Z12task0_tracesv+0x1ac>)
  400d36:	4798      	blx	r3
			// Handle negative numbers
			if (number < 0.0)
			{
				//n += print('-');
				print("-");
				number = -number;
  400d38:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
}

//-- traces
static uint32_t task0_timestamp = 0;
static uint32_t task0_period = 1000000; //period of 1 sec
void task0_traces(void){
  400d3c:	f04f 090a 	mov.w	r9, #10
			}

			

			// Round correctly so that print(1.999, 2) prints as "2.00"
			double rounding = 0.5;
  400d40:	2000      	movs	r0, #0
  400d42:	4950      	ldr	r1, [pc, #320]	; (400e84 <_Z12task0_tracesv+0x1d0>)
			for (uint8_t i=0; i<digits; ++i)
			rounding /= 10.0;
  400d44:	4c50      	ldr	r4, [pc, #320]	; (400e88 <_Z12task0_tracesv+0x1d4>)
  400d46:	f04f 0a00 	mov.w	sl, #0
  400d4a:	f8df b154 	ldr.w	fp, [pc, #340]	; 400ea0 <_Z12task0_tracesv+0x1ec>
  400d4e:	4652      	mov	r2, sl
  400d50:	465b      	mov	r3, fp
  400d52:	47a0      	blx	r4
  400d54:	f109 33ff 	add.w	r3, r9, #4294967295

			

			// Round correctly so that print(1.999, 2) prints as "2.00"
			double rounding = 0.5;
			for (uint8_t i=0; i<digits; ++i)
  400d58:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
  400d5c:	d1f7      	bne.n	400d4e <_Z12task0_tracesv+0x9a>
		void println(const char *str){
			tinkerUartPutString(_uartId,str);
			tinkerUartPutString(_uartId,"\n");
		};
		void printNumber(uint32_t number){
			_itoa(_char_number,number);
  400d5e:	463a      	mov	r2, r7
  400d60:	4633      	mov	r3, r6
  400d62:	4c4a      	ldr	r4, [pc, #296]	; (400e8c <_Z12task0_tracesv+0x1d8>)
  400d64:	47a0      	blx	r4
  400d66:	4b4a      	ldr	r3, [pc, #296]	; (400e90 <_Z12task0_tracesv+0x1dc>)
  400d68:	4798      	blx	r3
  400d6a:	4c3a      	ldr	r4, [pc, #232]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400d6c:	f104 0528 	add.w	r5, r4, #40	; 0x28
  400d70:	4601      	mov	r1, r0
  400d72:	4628      	mov	r0, r5
  400d74:	4b47      	ldr	r3, [pc, #284]	; (400e94 <_Z12task0_tracesv+0x1e0>)
  400d76:	4798      	blx	r3
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  400d78:	4629      	mov	r1, r5
  400d7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400d7c:	4d38      	ldr	r5, [pc, #224]	; (400e60 <_Z12task0_tracesv+0x1ac>)
  400d7e:	47a8      	blx	r5
  400d80:	4945      	ldr	r1, [pc, #276]	; (400e98 <_Z12task0_tracesv+0x1e4>)
  400d82:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400d84:	47a8      	blx	r5
  400d86:	4c33      	ldr	r4, [pc, #204]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400d88:	4936      	ldr	r1, [pc, #216]	; (400e64 <_Z12task0_tracesv+0x1b0>)
  400d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400d8c:	4d34      	ldr	r5, [pc, #208]	; (400e60 <_Z12task0_tracesv+0x1ac>)
  400d8e:	47a8      	blx	r5
  400d90:	4942      	ldr	r1, [pc, #264]	; (400e9c <_Z12task0_tracesv+0x1e8>)
  400d92:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400d94:	47a8      	blx	r5
	//TinkerUart0.print("gyroXangle:"); TinkerUart0.printlnDouble(droniAtt.gyroXangle);
	//TinkerUart0.print("gyroYangle:"); TinkerUart0.printlnDouble(droniAtt.gyroYangle);
	//TinkerUart0.print("compAngleX:"); TinkerUart0.printlnDouble(droniAtt.compAngleX);
	//TinkerUart0.print("compAngleY:"); TinkerUart0.printlnDouble(droniAtt.compAngleY);
	TinkerUart0.print("estimAngleX:"); TinkerUart0.printlnDouble(estimAngleX);
	TinkerUart0.print("estimAngleY:"); TinkerUart0.printlnDouble(estimAngleY);
  400d96:	f8d4 72d8 	ldr.w	r7, [r4, #728]	; 0x2d8
  400d9a:	f8d4 62dc 	ldr.w	r6, [r4, #732]	; 0x2dc
			
			size_t n = 0;
			
			//if (isnan(number)) return print("nan");
			//if (isinf(number)) return print("inf");
			if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  400d9e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  400da2:	4b32      	ldr	r3, [pc, #200]	; (400e6c <_Z12task0_tracesv+0x1b8>)
  400da4:	4638      	mov	r0, r7
  400da6:	4631      	mov	r1, r6
  400da8:	4c31      	ldr	r4, [pc, #196]	; (400e70 <_Z12task0_tracesv+0x1bc>)
  400daa:	47a0      	blx	r4
  400dac:	b120      	cbz	r0, 400db8 <_Z12task0_tracesv+0x104>
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  400dae:	4931      	ldr	r1, [pc, #196]	; (400e74 <_Z12task0_tracesv+0x1c0>)
  400db0:	4b28      	ldr	r3, [pc, #160]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400db2:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400db4:	47a8      	blx	r5
  400db6:	e040      	b.n	400e3a <_Z12task0_tracesv+0x186>
			size_t n = 0;
			
			//if (isnan(number)) return print("nan");
			//if (isinf(number)) return print("inf");
			if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
			if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  400db8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  400dbc:	4b2e      	ldr	r3, [pc, #184]	; (400e78 <_Z12task0_tracesv+0x1c4>)
  400dbe:	4638      	mov	r0, r7
  400dc0:	4631      	mov	r1, r6
  400dc2:	4c2e      	ldr	r4, [pc, #184]	; (400e7c <_Z12task0_tracesv+0x1c8>)
  400dc4:	47a0      	blx	r4
  400dc6:	b128      	cbz	r0, 400dd4 <_Z12task0_tracesv+0x120>
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  400dc8:	492a      	ldr	r1, [pc, #168]	; (400e74 <_Z12task0_tracesv+0x1c0>)
  400dca:	4b22      	ldr	r3, [pc, #136]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400dcc:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400dce:	4b24      	ldr	r3, [pc, #144]	; (400e60 <_Z12task0_tracesv+0x1ac>)
  400dd0:	4798      	blx	r3
  400dd2:	e032      	b.n	400e3a <_Z12task0_tracesv+0x186>
			//if (isinf(number)) return print("inf");
			if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
			if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
			
			// Handle negative numbers
			if (number < 0.0)
  400dd4:	2200      	movs	r2, #0
  400dd6:	2300      	movs	r3, #0
  400dd8:	4638      	mov	r0, r7
  400dda:	4631      	mov	r1, r6
  400ddc:	4c27      	ldr	r4, [pc, #156]	; (400e7c <_Z12task0_tracesv+0x1c8>)
  400dde:	47a0      	blx	r4
  400de0:	b130      	cbz	r0, 400df0 <_Z12task0_tracesv+0x13c>
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  400de2:	4927      	ldr	r1, [pc, #156]	; (400e80 <_Z12task0_tracesv+0x1cc>)
  400de4:	4b1b      	ldr	r3, [pc, #108]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400de6:	6a58      	ldr	r0, [r3, #36]	; 0x24
  400de8:	4b1d      	ldr	r3, [pc, #116]	; (400e60 <_Z12task0_tracesv+0x1ac>)
  400dea:	4798      	blx	r3
			// Handle negative numbers
			if (number < 0.0)
			{
				//n += print('-');
				print("-");
				number = -number;
  400dec:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
			}

			

			// Round correctly so that print(1.999, 2) prints as "2.00"
			double rounding = 0.5;
  400df0:	f04f 090a 	mov.w	r9, #10
  400df4:	2000      	movs	r0, #0
  400df6:	4923      	ldr	r1, [pc, #140]	; (400e84 <_Z12task0_tracesv+0x1d0>)
			for (uint8_t i=0; i<digits; ++i)
			rounding /= 10.0;
  400df8:	4c23      	ldr	r4, [pc, #140]	; (400e88 <_Z12task0_tracesv+0x1d4>)
  400dfa:	f04f 0a00 	mov.w	sl, #0
  400dfe:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 400ea0 <_Z12task0_tracesv+0x1ec>
  400e02:	4652      	mov	r2, sl
  400e04:	465b      	mov	r3, fp
  400e06:	47a0      	blx	r4
  400e08:	f109 33ff 	add.w	r3, r9, #4294967295

			

			// Round correctly so that print(1.999, 2) prints as "2.00"
			double rounding = 0.5;
			for (uint8_t i=0; i<digits; ++i)
  400e0c:	f013 09ff 	ands.w	r9, r3, #255	; 0xff
  400e10:	d1f7      	bne.n	400e02 <_Z12task0_tracesv+0x14e>
		void println(const char *str){
			tinkerUartPutString(_uartId,str);
			tinkerUartPutString(_uartId,"\n");
		};
		void printNumber(uint32_t number){
			_itoa(_char_number,number);
  400e12:	463a      	mov	r2, r7
  400e14:	4633      	mov	r3, r6
  400e16:	4c1d      	ldr	r4, [pc, #116]	; (400e8c <_Z12task0_tracesv+0x1d8>)
  400e18:	47a0      	blx	r4
  400e1a:	4b1d      	ldr	r3, [pc, #116]	; (400e90 <_Z12task0_tracesv+0x1dc>)
  400e1c:	4798      	blx	r3
  400e1e:	4c0d      	ldr	r4, [pc, #52]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400e20:	f104 0528 	add.w	r5, r4, #40	; 0x28
  400e24:	4601      	mov	r1, r0
  400e26:	4628      	mov	r0, r5
  400e28:	4b1a      	ldr	r3, [pc, #104]	; (400e94 <_Z12task0_tracesv+0x1e0>)
  400e2a:	4798      	blx	r3
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  400e2c:	4629      	mov	r1, r5
  400e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400e30:	4d0b      	ldr	r5, [pc, #44]	; (400e60 <_Z12task0_tracesv+0x1ac>)
  400e32:	47a8      	blx	r5
  400e34:	4918      	ldr	r1, [pc, #96]	; (400e98 <_Z12task0_tracesv+0x1e4>)
  400e36:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400e38:	47a8      	blx	r5
  400e3a:	4c06      	ldr	r4, [pc, #24]	; (400e54 <_Z12task0_tracesv+0x1a0>)
  400e3c:	4909      	ldr	r1, [pc, #36]	; (400e64 <_Z12task0_tracesv+0x1b0>)
  400e3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  400e40:	4b07      	ldr	r3, [pc, #28]	; (400e60 <_Z12task0_tracesv+0x1ac>)
  400e42:	4798      	blx	r3
	//udi_cdc_putc('A');
	

	//mdelay(1000000);
	//--
	task0_timestamp = micros();
  400e44:	4b02      	ldr	r3, [pc, #8]	; (400e50 <_Z12task0_tracesv+0x19c>)
  400e46:	4798      	blx	r3
  400e48:	f8c4 02c8 	str.w	r0, [r4, #712]	; 0x2c8
  400e4c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
  400e50:	00401a79 	.word	0x00401a79
  400e54:	20400458 	.word	0x20400458
  400e58:	000f4240 	.word	0x000f4240
  400e5c:	00404548 	.word	0x00404548
  400e60:	0040227d 	.word	0x0040227d
  400e64:	0040455c 	.word	0x0040455c
  400e68:	00404560 	.word	0x00404560
  400e6c:	41efffff 	.word	0x41efffff
  400e70:	00403bd9 	.word	0x00403bd9
  400e74:	00404570 	.word	0x00404570
  400e78:	c1efffff 	.word	0xc1efffff
  400e7c:	00403b9d 	.word	0x00403b9d
  400e80:	00404558 	.word	0x00404558
  400e84:	3fe00000 	.word	0x3fe00000
  400e88:	0040390d 	.word	0x0040390d
  400e8c:	00403355 	.word	0x00403355
  400e90:	00403c69 	.word	0x00403c69
  400e94:	00401a85 	.word	0x00401a85
  400e98:	00404574 	.word	0x00404574
  400e9c:	00404578 	.word	0x00404578
  400ea0:	40240000 	.word	0x40240000

00400ea4 <_Z13task2_computev>:
static double ITermX = 0, ITermY = 0;
static double lastInputX = 0,lastInputY = 0;
static double kp=2, ki=5 * task2_period/1000000, kd=1/ task2_period*1000000;
static double outMax = 100, outMin = -100;
void task2_compute(void)
{
  400ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ea8:	b08b      	sub	sp, #44	; 0x2c
	unsigned long now = micros();
  400eaa:	4b88      	ldr	r3, [pc, #544]	; (4010cc <_Z13task2_computev+0x228>)
  400eac:	4798      	blx	r3
  400eae:	4605      	mov	r5, r0
	unsigned long timeChange = (now - task2_timestamp);
  400eb0:	4b87      	ldr	r3, [pc, #540]	; (4010d0 <_Z13task2_computev+0x22c>)
  400eb2:	f8d3 42e0 	ldr.w	r4, [r3, #736]	; 0x2e0
  400eb6:	1b04      	subs	r4, r0, r4

	task4_update_target_angles();
  400eb8:	4b86      	ldr	r3, [pc, #536]	; (4010d4 <_Z13task2_computev+0x230>)
  400eba:	4798      	blx	r3

	if(timeChange>=task2_period)
  400ebc:	f241 3387 	movw	r3, #4999	; 0x1387
  400ec0:	429c      	cmp	r4, r3
  400ec2:	f240 8100 	bls.w	4010c6 <_Z13task2_computev+0x222>
	{		
		/*Compute all the working error variables*/
		double input_x = estimAngleX;
  400ec6:	4c82      	ldr	r4, [pc, #520]	; (4010d0 <_Z13task2_computev+0x22c>)
  400ec8:	f504 7334 	add.w	r3, r4, #720	; 0x2d0
  400ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400ed0:	4617      	mov	r7, r2
  400ed2:	4698      	mov	r8, r3
  400ed4:	e9cd 7800 	strd	r7, r8, [sp]
		double input_y = estimAngleY;
  400ed8:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
  400edc:	e9d3 2300 	ldrd	r2, r3, [r3]
  400ee0:	4691      	mov	r9, r2
  400ee2:	469a      	mov	sl, r3
  400ee4:	e9cd 9a02 	strd	r9, sl, [sp, #8]

		double error_x = targetAngX - input_x;
  400ee8:	f504 712e 	add.w	r1, r4, #696	; 0x2b8
  400eec:	4e7a      	ldr	r6, [pc, #488]	; (4010d8 <_Z13task2_computev+0x234>)
  400eee:	463a      	mov	r2, r7
  400ef0:	4643      	mov	r3, r8
  400ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
  400ef6:	47b0      	blx	r6
  400ef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
		double error_y = targetAngY - input_y;
  400efc:	f504 7130 	add.w	r1, r4, #704	; 0x2c0
  400f00:	464a      	mov	r2, r9
  400f02:	4653      	mov	r3, sl
  400f04:	e9d1 0100 	ldrd	r0, r1, [r1]
  400f08:	47b0      	blx	r6
  400f0a:	e9cd 0106 	strd	r0, r1, [sp, #24]

		ITermX+= (ki * error_x);
  400f0e:	f504 733a 	add.w	r3, r4, #744	; 0x2e8
  400f12:	e9d3 6700 	ldrd	r6, r7, [r3]
  400f16:	46a0      	mov	r8, r4
  400f18:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 4010f8 <_Z13task2_computev+0x254>
  400f1c:	4632      	mov	r2, r6
  400f1e:	463b      	mov	r3, r7
  400f20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400f24:	47d0      	blx	sl
  400f26:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 4010fc <_Z13task2_computev+0x258>
  400f2a:	e9f8 23bc 	ldrd	r2, r3, [r8, #752]!	; 0x2f0
  400f2e:	47c8      	blx	r9
  400f30:	4602      	mov	r2, r0
  400f32:	460b      	mov	r3, r1
  400f34:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400f38:	e9c8 2300 	strd	r2, r3, [r8]
		ITermY+= (ki * error_y);
  400f3c:	4632      	mov	r2, r6
  400f3e:	463b      	mov	r3, r7
  400f40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  400f44:	47d0      	blx	sl
  400f46:	e9f4 23be 	ldrd	r2, r3, [r4, #760]!	; 0x2f8
  400f4a:	47c8      	blx	r9
  400f4c:	4606      	mov	r6, r0
  400f4e:	460f      	mov	r7, r1
  400f50:	e9c4 6700 	strd	r6, r7, [r4]

		if(ITermX > outMax) ITermX= outMax;
  400f54:	2200      	movs	r2, #0
  400f56:	4b61      	ldr	r3, [pc, #388]	; (4010dc <_Z13task2_computev+0x238>)
  400f58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  400f5c:	4c60      	ldr	r4, [pc, #384]	; (4010e0 <_Z13task2_computev+0x23c>)
  400f5e:	47a0      	blx	r4
  400f60:	b128      	cbz	r0, 400f6e <_Z13task2_computev+0xca>
  400f62:	2000      	movs	r0, #0
  400f64:	495d      	ldr	r1, [pc, #372]	; (4010dc <_Z13task2_computev+0x238>)
  400f66:	4b5f      	ldr	r3, [pc, #380]	; (4010e4 <_Z13task2_computev+0x240>)
  400f68:	e9c3 0100 	strd	r0, r1, [r3]
  400f6c:	e00b      	b.n	400f86 <_Z13task2_computev+0xe2>
		else if(ITermX < outMin) ITermX= outMin;
  400f6e:	2200      	movs	r2, #0
  400f70:	4b5d      	ldr	r3, [pc, #372]	; (4010e8 <_Z13task2_computev+0x244>)
  400f72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  400f76:	4c5d      	ldr	r4, [pc, #372]	; (4010ec <_Z13task2_computev+0x248>)
  400f78:	47a0      	blx	r4
  400f7a:	b120      	cbz	r0, 400f86 <_Z13task2_computev+0xe2>
  400f7c:	2000      	movs	r0, #0
  400f7e:	495a      	ldr	r1, [pc, #360]	; (4010e8 <_Z13task2_computev+0x244>)
  400f80:	4b58      	ldr	r3, [pc, #352]	; (4010e4 <_Z13task2_computev+0x240>)
  400f82:	e9c3 0100 	strd	r0, r1, [r3]

		if(ITermY > outMax) ITermY= outMax;
  400f86:	2200      	movs	r2, #0
  400f88:	4b54      	ldr	r3, [pc, #336]	; (4010dc <_Z13task2_computev+0x238>)
  400f8a:	4630      	mov	r0, r6
  400f8c:	4639      	mov	r1, r7
  400f8e:	4c54      	ldr	r4, [pc, #336]	; (4010e0 <_Z13task2_computev+0x23c>)
  400f90:	47a0      	blx	r4
  400f92:	b128      	cbz	r0, 400fa0 <_Z13task2_computev+0xfc>
  400f94:	2000      	movs	r0, #0
  400f96:	4951      	ldr	r1, [pc, #324]	; (4010dc <_Z13task2_computev+0x238>)
  400f98:	4b55      	ldr	r3, [pc, #340]	; (4010f0 <_Z13task2_computev+0x24c>)
  400f9a:	e9c3 0100 	strd	r0, r1, [r3]
  400f9e:	e00b      	b.n	400fb8 <_Z13task2_computev+0x114>
		else if(ITermY < outMin) ITermY= outMin;
  400fa0:	2200      	movs	r2, #0
  400fa2:	4b51      	ldr	r3, [pc, #324]	; (4010e8 <_Z13task2_computev+0x244>)
  400fa4:	4630      	mov	r0, r6
  400fa6:	4639      	mov	r1, r7
  400fa8:	4c50      	ldr	r4, [pc, #320]	; (4010ec <_Z13task2_computev+0x248>)
  400faa:	47a0      	blx	r4
  400fac:	b120      	cbz	r0, 400fb8 <_Z13task2_computev+0x114>
  400fae:	2000      	movs	r0, #0
  400fb0:	494d      	ldr	r1, [pc, #308]	; (4010e8 <_Z13task2_computev+0x244>)
  400fb2:	4b4f      	ldr	r3, [pc, #316]	; (4010f0 <_Z13task2_computev+0x24c>)
  400fb4:	e9c3 0100 	strd	r0, r1, [r3]

		double dInputX = (input_x - lastInputX);
		double dInputY = (input_y - lastInputY);
		
		/*Compute PID Output*/
		double outputX = kp * error_x + ITermX- kd * dInputX;
  400fb8:	4c45      	ldr	r4, [pc, #276]	; (4010d0 <_Z13task2_computev+0x22c>)
  400fba:	f504 7340 	add.w	r3, r4, #768	; 0x300
  400fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  400fc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  400fc6:	f504 763c 	add.w	r6, r4, #752	; 0x2f0
  400fca:	f8df 8130 	ldr.w	r8, [pc, #304]	; 4010fc <_Z13task2_computev+0x258>
  400fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  400fd2:	4602      	mov	r2, r0
  400fd4:	460b      	mov	r3, r1
  400fd6:	47c0      	blx	r8
  400fd8:	e9d6 2300 	ldrd	r2, r3, [r6]
  400fdc:	47c0      	blx	r8
  400fde:	4606      	mov	r6, r0
  400fe0:	460f      	mov	r7, r1
		else if(ITermX < outMin) ITermX= outMin;

		if(ITermY > outMax) ITermY= outMax;
		else if(ITermY < outMin) ITermY= outMin;

		double dInputX = (input_x - lastInputX);
  400fe2:	f504 7342 	add.w	r3, r4, #776	; 0x308
		double dInputY = (input_y - lastInputY);
		
		/*Compute PID Output*/
		double outputX = kp * error_x + ITermX- kd * dInputX;
  400fe6:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 4010d8 <_Z13task2_computev+0x234>
  400fea:	e9d3 2300 	ldrd	r2, r3, [r3]
  400fee:	e9dd 0100 	ldrd	r0, r1, [sp]
  400ff2:	47d0      	blx	sl
  400ff4:	f8df b100 	ldr.w	fp, [pc, #256]	; 4010f8 <_Z13task2_computev+0x254>
  400ff8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  400ffc:	47d8      	blx	fp
  400ffe:	4602      	mov	r2, r0
  401000:	460b      	mov	r3, r1
  401002:	4630      	mov	r0, r6
  401004:	4639      	mov	r1, r7
  401006:	47d0      	blx	sl
  401008:	4606      	mov	r6, r0
  40100a:	460f      	mov	r7, r1
		double outputY = kp * error_y + ITermY- kd * dInputY;
  40100c:	f504 793e 	add.w	r9, r4, #760	; 0x2f8
  401010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  401014:	4602      	mov	r2, r0
  401016:	460b      	mov	r3, r1
  401018:	47c0      	blx	r8
  40101a:	e9d9 2300 	ldrd	r2, r3, [r9]
  40101e:	47c0      	blx	r8
  401020:	4680      	mov	r8, r0
  401022:	4689      	mov	r9, r1

		if(ITermY > outMax) ITermY= outMax;
		else if(ITermY < outMin) ITermY= outMin;

		double dInputX = (input_x - lastInputX);
		double dInputY = (input_y - lastInputY);
  401024:	f504 7444 	add.w	r4, r4, #784	; 0x310
		
		/*Compute PID Output*/
		double outputX = kp * error_x + ITermX- kd * dInputX;
		double outputY = kp * error_y + ITermY- kd * dInputY;
  401028:	e9d4 2300 	ldrd	r2, r3, [r4]
  40102c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401030:	47d0      	blx	sl
  401032:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  401036:	47d8      	blx	fp
  401038:	4602      	mov	r2, r0
  40103a:	460b      	mov	r3, r1
  40103c:	4640      	mov	r0, r8
  40103e:	4649      	mov	r1, r9
  401040:	47d0      	blx	sl
  401042:	4680      	mov	r8, r0
  401044:	4689      	mov	r9, r1
		
		if(outputX > outMax) outputX = outMax;
  401046:	2200      	movs	r2, #0
  401048:	4b24      	ldr	r3, [pc, #144]	; (4010dc <_Z13task2_computev+0x238>)
  40104a:	4630      	mov	r0, r6
  40104c:	4639      	mov	r1, r7
  40104e:	4c24      	ldr	r4, [pc, #144]	; (4010e0 <_Z13task2_computev+0x23c>)
  401050:	47a0      	blx	r4
  401052:	b948      	cbnz	r0, 401068 <_Z13task2_computev+0x1c4>
		else if(outputX < outMin) outputX = outMin;
  401054:	2200      	movs	r2, #0
  401056:	4b24      	ldr	r3, [pc, #144]	; (4010e8 <_Z13task2_computev+0x244>)
  401058:	4630      	mov	r0, r6
  40105a:	4639      	mov	r1, r7
  40105c:	4c23      	ldr	r4, [pc, #140]	; (4010ec <_Z13task2_computev+0x248>)
  40105e:	47a0      	blx	r4
  401060:	b120      	cbz	r0, 40106c <_Z13task2_computev+0x1c8>
  401062:	2600      	movs	r6, #0
  401064:	4f20      	ldr	r7, [pc, #128]	; (4010e8 <_Z13task2_computev+0x244>)
  401066:	e001      	b.n	40106c <_Z13task2_computev+0x1c8>
		
		/*Compute PID Output*/
		double outputX = kp * error_x + ITermX- kd * dInputX;
		double outputY = kp * error_y + ITermY- kd * dInputY;
		
		if(outputX > outMax) outputX = outMax;
  401068:	2600      	movs	r6, #0
  40106a:	4f1c      	ldr	r7, [pc, #112]	; (4010dc <_Z13task2_computev+0x238>)
		else if(outputX < outMin) outputX = outMin;
		pidAngX = outputX;
  40106c:	4b21      	ldr	r3, [pc, #132]	; (4010f4 <_Z13task2_computev+0x250>)
  40106e:	e9c3 6700 	strd	r6, r7, [r3]

		if(outputY > outMax) outputY = outMax;
  401072:	2200      	movs	r2, #0
  401074:	4b19      	ldr	r3, [pc, #100]	; (4010dc <_Z13task2_computev+0x238>)
  401076:	4640      	mov	r0, r8
  401078:	4649      	mov	r1, r9
  40107a:	4c19      	ldr	r4, [pc, #100]	; (4010e0 <_Z13task2_computev+0x23c>)
  40107c:	47a0      	blx	r4
  40107e:	b958      	cbnz	r0, 401098 <_Z13task2_computev+0x1f4>
		else if(outputY < outMin) outputY = outMin;
  401080:	2200      	movs	r2, #0
  401082:	4b19      	ldr	r3, [pc, #100]	; (4010e8 <_Z13task2_computev+0x244>)
  401084:	4640      	mov	r0, r8
  401086:	4649      	mov	r1, r9
  401088:	4c18      	ldr	r4, [pc, #96]	; (4010ec <_Z13task2_computev+0x248>)
  40108a:	47a0      	blx	r4
  40108c:	b140      	cbz	r0, 4010a0 <_Z13task2_computev+0x1fc>
  40108e:	f04f 0800 	mov.w	r8, #0
  401092:	f8df 9054 	ldr.w	r9, [pc, #84]	; 4010e8 <_Z13task2_computev+0x244>
  401096:	e003      	b.n	4010a0 <_Z13task2_computev+0x1fc>
		
		if(outputX > outMax) outputX = outMax;
		else if(outputX < outMin) outputX = outMin;
		pidAngX = outputX;

		if(outputY > outMax) outputY = outMax;
  401098:	f04f 0800 	mov.w	r8, #0
  40109c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 4010dc <_Z13task2_computev+0x238>
		else if(outputY < outMin) outputY = outMin;
		pidAngY = outputY;
  4010a0:	4b0b      	ldr	r3, [pc, #44]	; (4010d0 <_Z13task2_computev+0x22c>)
  4010a2:	f503 7248 	add.w	r2, r3, #800	; 0x320
  4010a6:	e9c2 8900 	strd	r8, r9, [r2]
		
		/*Remember some variables for next time*/
		lastInputX = input_x;
  4010aa:	f503 7242 	add.w	r2, r3, #776	; 0x308
  4010ae:	e9dd 0100 	ldrd	r0, r1, [sp]
  4010b2:	e9c2 0100 	strd	r0, r1, [r2]
		lastInputY = input_y;
  4010b6:	f503 7244 	add.w	r2, r3, #784	; 0x310
  4010ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4010be:	e9c2 0100 	strd	r0, r1, [r2]

		task2_timestamp = now;
  4010c2:	f8c3 52e0 	str.w	r5, [r3, #736]	; 0x2e0
	}
	
}
  4010c6:	b00b      	add	sp, #44	; 0x2c
  4010c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4010cc:	00401a79 	.word	0x00401a79
  4010d0:	20400458 	.word	0x20400458
  4010d4:	00400c45 	.word	0x00400c45
  4010d8:	00403351 	.word	0x00403351
  4010dc:	40590000 	.word	0x40590000
  4010e0:	00403bd9 	.word	0x00403bd9
  4010e4:	20400748 	.word	0x20400748
  4010e8:	c0590000 	.word	0xc0590000
  4010ec:	00403b9d 	.word	0x00403b9d
  4010f0:	20400750 	.word	0x20400750
  4010f4:	20400770 	.word	0x20400770
  4010f8:	004036b9 	.word	0x004036b9
  4010fc:	00403355 	.word	0x00403355

00401100 <_Z20task3_control_motorsv>:
static uint32_t task3_period = 10000;
static uint32_t motorA = 0;
static uint32_t motorB = 0;
static uint32_t motorC = 0;
static uint32_t motorD = 0;
void task3_control_motors(void){
  401100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401104:	b085      	sub	sp, #20
	uint32_t yawpid = 0;

	motorA = _reqThrottle + (int32_t) ( pidAngX - pidAngY) - yawpid;
  401106:	4c32      	ldr	r4, [pc, #200]	; (4011d0 <_Z20task3_control_motorsv+0xd0>)
  401108:	f8d4 a318 	ldr.w	sl, [r4, #792]	; 0x318
  40110c:	f8d4 931c 	ldr.w	r9, [r4, #796]	; 0x31c
  401110:	f504 7348 	add.w	r3, r4, #800	; 0x320
  401114:	e9d3 2300 	ldrd	r2, r3, [r3]
  401118:	e9d4 0100 	ldrd	r0, r1, [r4]
  40111c:	e9cd 0100 	strd	r0, r1, [sp]
	motorB = _reqThrottle + (int32_t) (-pidAngX - pidAngY) + yawpid;
  401120:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 4011e4 <_Z20task3_control_motorsv+0xe4>
  401124:	e9cd 2302 	strd	r2, r3, [sp, #8]
  401128:	4650      	mov	r0, sl
  40112a:	f109 4100 	add.w	r1, r9, #2147483648	; 0x80000000
  40112e:	47d8      	blx	fp
  401130:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4011e8 <_Z20task3_control_motorsv+0xe8>
  401134:	47c0      	blx	r8
  401136:	4f27      	ldr	r7, [pc, #156]	; (4011d4 <_Z20task3_control_motorsv+0xd4>)
  401138:	47b8      	blx	r7
  40113a:	4d27      	ldr	r5, [pc, #156]	; (4011d8 <_Z20task3_control_motorsv+0xd8>)
  40113c:	e9dd 2300 	ldrd	r2, r3, [sp]
  401140:	47a8      	blx	r5
  401142:	2200      	movs	r2, #0
  401144:	2300      	movs	r3, #0
  401146:	47a8      	blx	r5
  401148:	4e24      	ldr	r6, [pc, #144]	; (4011dc <_Z20task3_control_motorsv+0xdc>)
  40114a:	47b0      	blx	r6
  40114c:	f8c4 0328 	str.w	r0, [r4, #808]	; 0x328
	motorC = _reqThrottle + (int32_t) (-pidAngX + pidAngY) - yawpid;
  401150:	4652      	mov	r2, sl
  401152:	464b      	mov	r3, r9
  401154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  401158:	47d8      	blx	fp
  40115a:	47c0      	blx	r8
  40115c:	47b8      	blx	r7
  40115e:	e9dd 2300 	ldrd	r2, r3, [sp]
  401162:	47a8      	blx	r5
  401164:	47b0      	blx	r6
  401166:	f8c4 032c 	str.w	r0, [r4, #812]	; 0x32c
	motorD = _reqThrottle + (int32_t) ( pidAngX + pidAngY) + yawpid;
  40116a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40116e:	4650      	mov	r0, sl
  401170:	4649      	mov	r1, r9
  401172:	47a8      	blx	r5
  401174:	47c0      	blx	r8
  401176:	47b8      	blx	r7
  401178:	e9dd 2300 	ldrd	r2, r3, [sp]
  40117c:	47a8      	blx	r5
  40117e:	2200      	movs	r2, #0
  401180:	2300      	movs	r3, #0
  401182:	47a8      	blx	r5
  401184:	47b0      	blx	r6
  401186:	f8c4 0330 	str.w	r0, [r4, #816]	; 0x330
		void init(uint32_t pwmId){
			tinkerPwmInit(pwmId);
		}

		void write(uint32_t duty){
			tinkerPwmWrite(_pwmId, duty);
  40118a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40118e:	4650      	mov	r0, sl
  401190:	4649      	mov	r1, r9
  401192:	47d8      	blx	fp
  401194:	47c0      	blx	r8
  401196:	47b8      	blx	r7
  401198:	e9dd 2300 	ldrd	r2, r3, [sp]
  40119c:	47a8      	blx	r5
  40119e:	47b0      	blx	r6
  4011a0:	4601      	mov	r1, r0
  4011a2:	f8d4 0334 	ldr.w	r0, [r4, #820]	; 0x334
  4011a6:	4d0e      	ldr	r5, [pc, #56]	; (4011e0 <_Z20task3_control_motorsv+0xe0>)
  4011a8:	47a8      	blx	r5
  4011aa:	f8d4 1328 	ldr.w	r1, [r4, #808]	; 0x328
  4011ae:	f8d4 0338 	ldr.w	r0, [r4, #824]	; 0x338
  4011b2:	47a8      	blx	r5
  4011b4:	f8d4 132c 	ldr.w	r1, [r4, #812]	; 0x32c
  4011b8:	f8d4 033c 	ldr.w	r0, [r4, #828]	; 0x33c
  4011bc:	47a8      	blx	r5
  4011be:	f8d4 1330 	ldr.w	r1, [r4, #816]	; 0x330
  4011c2:	f8d4 0340 	ldr.w	r0, [r4, #832]	; 0x340
  4011c6:	47a8      	blx	r5

	motor1.write(motorA);
	motor2.write(motorB);
	motor3.write(motorC);
	motor4.write(motorD);
}
  4011c8:	b005      	add	sp, #20
  4011ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011ce:	bf00      	nop
  4011d0:	20400458 	.word	0x20400458
  4011d4:	004035ed 	.word	0x004035ed
  4011d8:	00403355 	.word	0x00403355
  4011dc:	00403c69 	.word	0x00403c69
  4011e0:	004020e5 	.word	0x004020e5
  4011e4:	00403351 	.word	0x00403351
  4011e8:	00403c19 	.word	0x00403c19
  4011ec:	00000000 	.word	0x00000000

004011f0 <main>:




int main (void)
{
  4011f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011f4:	b087      	sub	sp, #28
	/* Initialize the SAM system */
	//wdt_disable(WDT); --> we will use the watch dog for a period of 10ms
	sysclk_init();
  4011f6:	4b22      	ldr	r3, [pc, #136]	; (401280 <main+0x90>)
  4011f8:	4798      	blx	r3
	board_init();
  4011fa:	4b22      	ldr	r3, [pc, #136]	; (401284 <main+0x94>)
  4011fc:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4011fe:	200a      	movs	r0, #10
  401200:	4c21      	ldr	r4, [pc, #132]	; (401288 <main+0x98>)
  401202:	47a0      	blx	r4
  401204:	200b      	movs	r0, #11
  401206:	47a0      	blx	r4
  401208:	2010      	movs	r0, #16
  40120a:	47a0      	blx	r4
	ioport_init();
	// disable JTAG
	MATRIX->CCFG_SYSIO |= (1 << 4) | (1 << 5);//to use pin PB5 and PB4
  40120c:	4a1f      	ldr	r2, [pc, #124]	; (40128c <main+0x9c>)
  40120e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  401212:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  401216:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  40121a:	4b1d      	ldr	r3, [pc, #116]	; (401290 <main+0xa0>)
  40121c:	f240 122b 	movw	r2, #299	; 0x12b
  401220:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401222:	21e0      	movs	r1, #224	; 0xe0
  401224:	4a1b      	ldr	r2, [pc, #108]	; (401294 <main+0xa4>)
  401226:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  40122a:	2400      	movs	r4, #0
  40122c:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  40122e:	2207      	movs	r2, #7
  401230:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401232:	33f0      	adds	r3, #240	; 0xf0
  401234:	2280      	movs	r2, #128	; 0x80
  401236:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40123a:	2120      	movs	r1, #32
  40123c:	f883 1307 	strb.w	r1, [r3, #775]	; 0x307
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401240:	601a      	str	r2, [r3, #0]

	//- init CDC USB
	//irq_initialize_vectors();
	//cpu_irq_enable();
	irq_register_handler(UART0_IRQn,1);
	uart_enable_interrupt(UART0, UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME);
  401242:	2161      	movs	r1, #97	; 0x61
  401244:	4814      	ldr	r0, [pc, #80]	; (401298 <main+0xa8>)
  401246:	4b15      	ldr	r3, [pc, #84]	; (40129c <main+0xac>)
  401248:	4798      	blx	r3
		char _char_number[20];
	public:
		TinkerUart(uint32_t uartId){_uartId = uartId;};

		void init(){
			tinkerUartInit(_uartId);
  40124a:	4b15      	ldr	r3, [pc, #84]	; (4012a0 <main+0xb0>)
  40124c:	6a58      	ldr	r0, [r3, #36]	; 0x24
  40124e:	4b15      	ldr	r3, [pc, #84]	; (4012a4 <main+0xb4>)
  401250:	4798      	blx	r3
	
	//- init UART
	TinkerUart0.init();

	//- init I2C
	uint8_t status = tinkerInitI2C(0x00);
  401252:	4620      	mov	r0, r4
  401254:	4b14      	ldr	r3, [pc, #80]	; (4012a8 <main+0xb8>)
  401256:	4798      	blx	r3
	if(status != 0){
  401258:	f010 0fff 	tst.w	r0, #255	; 0xff
  40125c:	d02c      	beq.n	4012b8 <main+0xc8>
  40125e:	4607      	mov	r7, r0
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  401260:	4c0f      	ldr	r4, [pc, #60]	; (4012a0 <main+0xb0>)
  401262:	4912      	ldr	r1, [pc, #72]	; (4012ac <main+0xbc>)
  401264:	6a60      	ldr	r0, [r4, #36]	; 0x24
  401266:	4d12      	ldr	r5, [pc, #72]	; (4012b0 <main+0xc0>)
  401268:	47a8      	blx	r5
		void println(const char *str){
			tinkerUartPutString(_uartId,str);
			tinkerUartPutString(_uartId,"\n");
		};
		void printNumber(uint32_t number){
			_itoa(_char_number,number);
  40126a:	f104 0628 	add.w	r6, r4, #40	; 0x28
  40126e:	b2f9      	uxtb	r1, r7
  401270:	4630      	mov	r0, r6
  401272:	4b10      	ldr	r3, [pc, #64]	; (4012b4 <main+0xc4>)
  401274:	4798      	blx	r3
			tinkerUartPutChar(_uartId,val>>8);
			tinkerUartPutChar(_uartId,val&0b0000000011111111);
			
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
  401276:	4631      	mov	r1, r6
  401278:	6a60      	ldr	r0, [r4, #36]	; 0x24
  40127a:	47a8      	blx	r5
  40127c:	e7fe      	b.n	40127c <main+0x8c>
  40127e:	bf00      	nop
  401280:	00402385 	.word	0x00402385
  401284:	00402aa9 	.word	0x00402aa9
  401288:	004027d5 	.word	0x004027d5
  40128c:	40088000 	.word	0x40088000
  401290:	e000e010 	.word	0xe000e010
  401294:	e000ed00 	.word	0xe000ed00
  401298:	400e0800 	.word	0x400e0800
  40129c:	00402a75 	.word	0x00402a75
  4012a0:	20400458 	.word	0x20400458
  4012a4:	00402139 	.word	0x00402139
  4012a8:	004022a1 	.word	0x004022a1
  4012ac:	00404588 	.word	0x00404588
  4012b0:	0040227d 	.word	0x0040227d
  4012b4:	00401a85 	.word	0x00401a85
		};
		void println(const char *str){
			tinkerUartPutString(_uartId,str);
  4012b8:	4ead      	ldr	r6, [pc, #692]	; (401570 <main+0x380>)
  4012ba:	49ae      	ldr	r1, [pc, #696]	; (401574 <main+0x384>)
  4012bc:	6a70      	ldr	r0, [r6, #36]	; 0x24
  4012be:	4cae      	ldr	r4, [pc, #696]	; (401578 <main+0x388>)
  4012c0:	47a0      	blx	r4
			tinkerUartPutString(_uartId,"\n");
  4012c2:	49ae      	ldr	r1, [pc, #696]	; (40157c <main+0x38c>)
  4012c4:	6a70      	ldr	r0, [r6, #36]	; 0x24
  4012c6:	47a0      	blx	r4
	}
	TinkerUart0.println("Init I2C OK");


	//- init Attitude estimator with DroniSens 1.1	
	uint32_t timer = micros();
  4012c8:	4bad      	ldr	r3, [pc, #692]	; (401580 <main+0x390>)
  4012ca:	4798      	blx	r3

			return;
		};

		void init(void){
			tinkerWriteI2C(_address, 0x6D, 0b11111); // --> run auto test
  4012cc:	221f      	movs	r2, #31
  4012ce:	216d      	movs	r1, #109	; 0x6d
  4012d0:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4012d4:	4dab      	ldr	r5, [pc, #684]	; (401584 <main+0x394>)
  4012d6:	47a8      	blx	r5
			//mdelay(100000);
			//TinkerUart0.printlnNumber(tinkerReadI2C(add,0x1B));
			mdelay(100000);
  4012d8:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 4015a4 <main+0x3b4>
  4012dc:	4640      	mov	r0, r8
  4012de:	4faa      	ldr	r7, [pc, #680]	; (401588 <main+0x398>)
  4012e0:	47b8      	blx	r7
			tinkerWriteI2C(_address,0x7E,0xB6); //--> soft reset
  4012e2:	22b6      	movs	r2, #182	; 0xb6
  4012e4:	217e      	movs	r1, #126	; 0x7e
  4012e6:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4012ea:	47a8      	blx	r5
			mdelay(100000);
  4012ec:	4640      	mov	r0, r8
  4012ee:	47b8      	blx	r7
			tinkerReadI2C(_address,0x7F);
  4012f0:	217f      	movs	r1, #127	; 0x7f
  4012f2:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4012f6:	4ca5      	ldr	r4, [pc, #660]	; (40158c <main+0x39c>)
  4012f8:	47a0      	blx	r4
			mdelay(100000);
  4012fa:	4640      	mov	r0, r8
  4012fc:	47b8      	blx	r7
			tinkerWriteI2C(_address,0x7E,0x11); //--> Set PMU mode of accelerometer to normal
  4012fe:	2211      	movs	r2, #17
  401300:	217e      	movs	r1, #126	; 0x7e
  401302:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  401306:	47a8      	blx	r5
			mdelay(100000);
  401308:	4640      	mov	r0, r8
  40130a:	47b8      	blx	r7
			tinkerWriteI2C(_address,0x7E,0x15); //--> Set PMU mode of gyroscope to normal
  40130c:	2215      	movs	r2, #21
  40130e:	217e      	movs	r1, #126	; 0x7e
  401310:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  401314:	47a8      	blx	r5
			mdelay(100000);
  401316:	4640      	mov	r0, r8
  401318:	47b8      	blx	r7

			return;
		};

		void init(void){
			tinkerWriteI2C(_address, 0x6D, 0b11111); // --> run auto test
  40131a:	221f      	movs	r2, #31
  40131c:	216d      	movs	r1, #109	; 0x6d
  40131e:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  401322:	47a8      	blx	r5
			//mdelay(100000);
			//TinkerUart0.printlnNumber(tinkerReadI2C(add,0x1B));
			mdelay(100000);
  401324:	4640      	mov	r0, r8
  401326:	47b8      	blx	r7
			tinkerWriteI2C(_address,0x7E,0xB6); //--> soft reset
  401328:	22b6      	movs	r2, #182	; 0xb6
  40132a:	217e      	movs	r1, #126	; 0x7e
  40132c:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  401330:	47a8      	blx	r5
			mdelay(100000);
  401332:	4640      	mov	r0, r8
  401334:	47b8      	blx	r7
			tinkerReadI2C(_address,0x7F);
  401336:	217f      	movs	r1, #127	; 0x7f
  401338:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  40133c:	47a0      	blx	r4
			mdelay(100000);
  40133e:	4640      	mov	r0, r8
  401340:	47b8      	blx	r7
			tinkerWriteI2C(_address,0x7E,0x11); //--> Set PMU mode of accelerometer to normal
  401342:	2211      	movs	r2, #17
  401344:	217e      	movs	r1, #126	; 0x7e
  401346:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  40134a:	47a8      	blx	r5
			mdelay(100000);
  40134c:	4640      	mov	r0, r8
  40134e:	47b8      	blx	r7
			tinkerWriteI2C(_address,0x7E,0x15); //--> Set PMU mode of gyroscope to normal
  401350:	2215      	movs	r2, #21
  401352:	217e      	movs	r1, #126	; 0x7e
  401354:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  401358:	47a8      	blx	r5
			mdelay(100000);
  40135a:	4640      	mov	r0, r8
  40135c:	47b8      	blx	r7
			return;
		}

		void setAccelRange(BMI160AccelRange range){
			if(range == BMI160_ACCEL_RANGE_2G)
				_accel_range = 2;
  40135e:	f506 79a4 	add.w	r9, r6, #328	; 0x148
  401362:	46b2      	mov	sl, r6
  401364:	2200      	movs	r2, #0
  401366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40136a:	e9ea 2392 	strd	r2, r3, [sl, #584]!	; 0x248
				_accel_range = 8;
			else if(range == BMI160_ACCEL_RANGE_16G)
				_accel_range = 16;
			else
				_accel_range = 2;
			tinkerWriteI2C(_address,BMI160_RA_ACCEL_RANGE,range);
  40136e:	2203      	movs	r2, #3
  401370:	2141      	movs	r1, #65	; 0x41
  401372:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  401376:	47a8      	blx	r5
			if(range == BMI160_GYRO_RANGE_125)
				_gyro_range = 125;
			else if(range == BMI160_GYRO_RANGE_500)
				_gyro_range = 500;
			else if(range == BMI160_GYRO_RANGE_250)
				_gyro_range = 250;
  401378:	46b3      	mov	fp, r6
  40137a:	2200      	movs	r2, #0
  40137c:	4b84      	ldr	r3, [pc, #528]	; (401590 <main+0x3a0>)
  40137e:	e9eb 2394 	strd	r2, r3, [fp, #592]!	; 0x250
				_gyro_range = 1000;
			else if(range == BMI160_GYRO_RANGE_2000)
				_gyro_range = 2000;
			else
				_gyro_range = 125;
			tinkerWriteI2C(_address,BMI160_RA_GYRO_RANGE,range);
  401382:	2203      	movs	r2, #3
  401384:	2143      	movs	r1, #67	; 0x43
  401386:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  40138a:	47a8      	blx	r5
			if(range == BMI160_ACCEL_RANGE_2G)
				_accel_range = 2;
			else if(range == BMI160_ACCEL_RANGE_4G)
				_accel_range = 4;
			else if(range == BMI160_ACCEL_RANGE_8G)
				_accel_range = 8;
  40138c:	4631      	mov	r1, r6
  40138e:	2200      	movs	r2, #0
  401390:	4b80      	ldr	r3, [pc, #512]	; (401594 <main+0x3a4>)
  401392:	e9e1 23aa 	strd	r2, r3, [r1, #680]!	; 0x2a8
  401396:	9100      	str	r1, [sp, #0]
			else if(range == BMI160_ACCEL_RANGE_16G)
				_accel_range = 16;
			else
				_accel_range = 2;
			tinkerWriteI2C(_address,BMI160_RA_ACCEL_RANGE,range);
  401398:	2208      	movs	r2, #8
  40139a:	2141      	movs	r1, #65	; 0x41
  40139c:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4013a0:	47a8      	blx	r5
			else if(range == BMI160_GYRO_RANGE_500)
				_gyro_range = 500;
			else if(range == BMI160_GYRO_RANGE_250)
				_gyro_range = 250;
			else if(range == BMI160_GYRO_RANGE_1000)
				_gyro_range = 1000;
  4013a2:	4631      	mov	r1, r6
  4013a4:	2200      	movs	r2, #0
  4013a6:	4b7c      	ldr	r3, [pc, #496]	; (401598 <main+0x3a8>)
  4013a8:	e9e1 23ac 	strd	r2, r3, [r1, #688]!	; 0x2b0
  4013ac:	9102      	str	r1, [sp, #8]
			else if(range == BMI160_GYRO_RANGE_2000)
				_gyro_range = 2000;
			else
				_gyro_range = 125;
			tinkerWriteI2C(_address,BMI160_RA_GYRO_RANGE,range);
  4013ae:	2201      	movs	r2, #1
  4013b0:	2143      	movs	r1, #67	; 0x43
  4013b2:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4013b6:	47a8      	blx	r5
		}

		void update(void){
			accel_x = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_X_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_X_L_G))
  4013b8:	2113      	movs	r1, #19
  4013ba:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  4013be:	47a0      	blx	r4
  4013c0:	4605      	mov	r5, r0
  4013c2:	2112      	movs	r1, #18
  4013c4:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  4013c8:	47a0      	blx	r4
				*_accel_range
				/(double)MAX_UINT16;
  4013ca:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  4013ce:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 4015a8 <main+0x3b8>
  4013d2:	b200      	sxth	r0, r0
  4013d4:	47c0      	blx	r8
  4013d6:	4f71      	ldr	r7, [pc, #452]	; (40159c <main+0x3ac>)
  4013d8:	e9da 2300 	ldrd	r2, r3, [sl]
  4013dc:	47b8      	blx	r7
  4013de:	4d70      	ldr	r5, [pc, #448]	; (4015a0 <main+0x3b0>)
  4013e0:	a361      	add	r3, pc, #388	; (adr r3, 401568 <main+0x378>)
  4013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4013e6:	47a8      	blx	r5
  4013e8:	e9c9 012e 	strd	r0, r1, [r9, #184]	; 0xb8
			accel_y = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Y_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Y_L_G))
  4013ec:	2115      	movs	r1, #21
  4013ee:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  4013f2:	47a0      	blx	r4
  4013f4:	9004      	str	r0, [sp, #16]
  4013f6:	2114      	movs	r1, #20
  4013f8:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  4013fc:	47a0      	blx	r4
				*_accel_range
				/(double)MAX_UINT16;
  4013fe:	9904      	ldr	r1, [sp, #16]
  401400:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  401404:	b200      	sxth	r0, r0
  401406:	47c0      	blx	r8
  401408:	e9da 2300 	ldrd	r2, r3, [sl]
  40140c:	47b8      	blx	r7
  40140e:	a356      	add	r3, pc, #344	; (adr r3, 401568 <main+0x378>)
  401410:	e9d3 2300 	ldrd	r2, r3, [r3]
  401414:	47a8      	blx	r5
  401416:	e9c9 0130 	strd	r0, r1, [r9, #192]	; 0xc0
			accel_z = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Z_L_G))
  40141a:	2117      	movs	r1, #23
  40141c:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  401420:	47a0      	blx	r4
  401422:	9004      	str	r0, [sp, #16]
  401424:	2116      	movs	r1, #22
  401426:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  40142a:	47a0      	blx	r4
				*_accel_range
				/(double)MAX_UINT16;
  40142c:	9904      	ldr	r1, [sp, #16]
  40142e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  401432:	b200      	sxth	r0, r0
  401434:	47c0      	blx	r8
  401436:	e9da 2300 	ldrd	r2, r3, [sl]
  40143a:	47b8      	blx	r7
  40143c:	a34a      	add	r3, pc, #296	; (adr r3, 401568 <main+0x378>)
  40143e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401442:	47a8      	blx	r5
  401444:	e9c9 0132 	strd	r0, r1, [r9, #200]	; 0xc8

			gyro_x = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_X_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_X_L_G))
  401448:	210d      	movs	r1, #13
  40144a:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  40144e:	47a0      	blx	r4
  401450:	4682      	mov	sl, r0
  401452:	210c      	movs	r1, #12
  401454:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  401458:	47a0      	blx	r4
				*_gyro_range
				/(double)MAX_UINT16;
  40145a:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  40145e:	b200      	sxth	r0, r0
  401460:	47c0      	blx	r8
  401462:	e9db 2300 	ldrd	r2, r3, [fp]
  401466:	47b8      	blx	r7
  401468:	a33f      	add	r3, pc, #252	; (adr r3, 401568 <main+0x378>)
  40146a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40146e:	47a8      	blx	r5
  401470:	e9c9 0134 	strd	r0, r1, [r9, #208]	; 0xd0
			gyro_y = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_Y_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_Y_L_G))
  401474:	210f      	movs	r1, #15
  401476:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  40147a:	47a0      	blx	r4
  40147c:	4682      	mov	sl, r0
  40147e:	210e      	movs	r1, #14
  401480:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  401484:	47a0      	blx	r4
				*_gyro_range
				/(double)MAX_UINT16;
  401486:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  40148a:	b200      	sxth	r0, r0
  40148c:	47c0      	blx	r8
  40148e:	e9db 2300 	ldrd	r2, r3, [fp]
  401492:	47b8      	blx	r7
  401494:	a334      	add	r3, pc, #208	; (adr r3, 401568 <main+0x378>)
  401496:	e9d3 2300 	ldrd	r2, r3, [r3]
  40149a:	47a8      	blx	r5
  40149c:	e9c9 0136 	strd	r0, r1, [r9, #216]	; 0xd8
			gyro_z = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_Z_L_G))
  4014a0:	2111      	movs	r1, #17
  4014a2:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  4014a6:	47a0      	blx	r4
  4014a8:	4682      	mov	sl, r0
  4014aa:	2110      	movs	r1, #16
  4014ac:	f896 01f8 	ldrb.w	r0, [r6, #504]	; 0x1f8
  4014b0:	47a0      	blx	r4
				*_gyro_range
				/(double)MAX_UINT16;
  4014b2:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  4014b6:	b200      	sxth	r0, r0
  4014b8:	47c0      	blx	r8
  4014ba:	e9db 2300 	ldrd	r2, r3, [fp]
  4014be:	47b8      	blx	r7
  4014c0:	a329      	add	r3, pc, #164	; (adr r3, 401568 <main+0x378>)
  4014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014c6:	47a8      	blx	r5
  4014c8:	e9c9 0138 	strd	r0, r1, [r9, #224]	; 0xe0
				_gyro_range = 125;
			tinkerWriteI2C(_address,BMI160_RA_GYRO_RANGE,range);
		}

		void update(void){
			accel_x = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_X_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_X_L_G))
  4014cc:	2113      	movs	r1, #19
  4014ce:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4014d2:	47a0      	blx	r4
  4014d4:	4682      	mov	sl, r0
  4014d6:	2112      	movs	r1, #18
  4014d8:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4014dc:	47a0      	blx	r4
				*_accel_range
				/(double)MAX_UINT16;
  4014de:	46b1      	mov	r9, r6
  4014e0:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  4014e4:	b200      	sxth	r0, r0
  4014e6:	47c0      	blx	r8
  4014e8:	9b00      	ldr	r3, [sp, #0]
  4014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014ee:	47b8      	blx	r7
  4014f0:	a31d      	add	r3, pc, #116	; (adr r3, 401568 <main+0x378>)
  4014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4014f6:	47a8      	blx	r5
  4014f8:	e9e9 0198 	strd	r0, r1, [r9, #608]!	; 0x260
			accel_y = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Y_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Y_L_G))
  4014fc:	2115      	movs	r1, #21
  4014fe:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  401502:	47a0      	blx	r4
  401504:	4682      	mov	sl, r0
  401506:	2114      	movs	r1, #20
  401508:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  40150c:	47a0      	blx	r4
				*_accel_range
				/(double)MAX_UINT16;
  40150e:	f506 7b1a 	add.w	fp, r6, #616	; 0x268
  401512:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  401516:	b200      	sxth	r0, r0
  401518:	47c0      	blx	r8
  40151a:	9b00      	ldr	r3, [sp, #0]
  40151c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401520:	47b8      	blx	r7
  401522:	a311      	add	r3, pc, #68	; (adr r3, 401568 <main+0x378>)
  401524:	e9d3 2300 	ldrd	r2, r3, [r3]
  401528:	47a8      	blx	r5
  40152a:	e9cb 0100 	strd	r0, r1, [fp]
			accel_z = (int16_t)(tinkerReadI2C(_address,BMI160_ACC_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_ACC_Z_L_G))
  40152e:	2117      	movs	r1, #23
  401530:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  401534:	47a0      	blx	r4
  401536:	4682      	mov	sl, r0
  401538:	2116      	movs	r1, #22
  40153a:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  40153e:	47a0      	blx	r4
				*_accel_range
				/(double)MAX_UINT16;
  401540:	f506 7b1c 	add.w	fp, r6, #624	; 0x270
  401544:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  401548:	b200      	sxth	r0, r0
  40154a:	47c0      	blx	r8
  40154c:	9b00      	ldr	r3, [sp, #0]
  40154e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401552:	47b8      	blx	r7
  401554:	a304      	add	r3, pc, #16	; (adr r3, 401568 <main+0x378>)
  401556:	e9d3 2300 	ldrd	r2, r3, [r3]
  40155a:	47a8      	blx	r5
  40155c:	e9cb 0100 	strd	r0, r1, [fp]

			gyro_x = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_X_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_X_L_G))
  401560:	210d      	movs	r1, #13
  401562:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  401566:	e021      	b.n	4015ac <main+0x3bc>
  401568:	00000000 	.word	0x00000000
  40156c:	40dfffc0 	.word	0x40dfffc0
  401570:	20400458 	.word	0x20400458
  401574:	00404598 	.word	0x00404598
  401578:	0040227d 	.word	0x0040227d
  40157c:	0040455c 	.word	0x0040455c
  401580:	00401a79 	.word	0x00401a79
  401584:	00402359 	.word	0x00402359
  401588:	00401a65 	.word	0x00401a65
  40158c:	00402325 	.word	0x00402325
  401590:	406f4000 	.word	0x406f4000
  401594:	40200000 	.word	0x40200000
  401598:	408f4000 	.word	0x408f4000
  40159c:	004036b9 	.word	0x004036b9
  4015a0:	0040390d 	.word	0x0040390d
  4015a4:	000186a0 	.word	0x000186a0
  4015a8:	004035ed 	.word	0x004035ed
  4015ac:	47a0      	blx	r4
  4015ae:	4682      	mov	sl, r0
  4015b0:	210c      	movs	r1, #12
  4015b2:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4015b6:	47a0      	blx	r4
				*_gyro_range
				/(double)MAX_UINT16;
  4015b8:	f506 7b1e 	add.w	fp, r6, #632	; 0x278
  4015bc:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  4015c0:	b200      	sxth	r0, r0
  4015c2:	47c0      	blx	r8
  4015c4:	9b02      	ldr	r3, [sp, #8]
  4015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015ca:	47b8      	blx	r7
  4015cc:	a3aa      	add	r3, pc, #680	; (adr r3, 401878 <main+0x688>)
  4015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015d2:	47a8      	blx	r5
  4015d4:	e9cb 0100 	strd	r0, r1, [fp]
			gyro_y = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_Y_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_Y_L_G))
  4015d8:	210f      	movs	r1, #15
  4015da:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4015de:	47a0      	blx	r4
  4015e0:	4682      	mov	sl, r0
  4015e2:	210e      	movs	r1, #14
  4015e4:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  4015e8:	47a0      	blx	r4
				*_gyro_range
				/(double)MAX_UINT16;
  4015ea:	f506 7b20 	add.w	fp, r6, #640	; 0x280
  4015ee:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  4015f2:	b200      	sxth	r0, r0
  4015f4:	47c0      	blx	r8
  4015f6:	9b02      	ldr	r3, [sp, #8]
  4015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4015fc:	47b8      	blx	r7
  4015fe:	a39e      	add	r3, pc, #632	; (adr r3, 401878 <main+0x688>)
  401600:	e9d3 2300 	ldrd	r2, r3, [r3]
  401604:	47a8      	blx	r5
  401606:	e9cb 0100 	strd	r0, r1, [fp]
			gyro_z = (int16_t)(tinkerReadI2C(_address,BMI160_GYR_Z_H_G)<<8|tinkerReadI2C(_address,BMI160_GYR_Z_L_G))
  40160a:	2111      	movs	r1, #17
  40160c:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  401610:	47a0      	blx	r4
  401612:	4682      	mov	sl, r0
  401614:	2110      	movs	r1, #16
  401616:	f896 0258 	ldrb.w	r0, [r6, #600]	; 0x258
  40161a:	47a0      	blx	r4
				*_gyro_range
				/(double)MAX_UINT16;
  40161c:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
  401620:	b200      	sxth	r0, r0
  401622:	47c0      	blx	r8
  401624:	9b02      	ldr	r3, [sp, #8]
  401626:	e9d3 2300 	ldrd	r2, r3, [r3]
  40162a:	47b8      	blx	r7
  40162c:	a392      	add	r3, pc, #584	; (adr r3, 401878 <main+0x688>)
  40162e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401632:	47a8      	blx	r5
  401634:	4604      	mov	r4, r0
  401636:	460d      	mov	r5, r1
  401638:	f506 7622 	add.w	r6, r6, #648	; 0x288
  40163c:	e9c6 4500 	strd	r4, r5, [r6]
			_bmi1.update();
			_bmi2.update();
		}

		double getAccelX(void){
			return _bmi2.accel_x > BMI160_2G ? _bmi2.accel_x : (0.2*_bmi2.accel_x + 0.8*_bmi1.accel_x) ;
  401640:	e9d9 6700 	ldrd	r6, r7, [r9]
  401644:	2200      	movs	r2, #0
  401646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  40164a:	4630      	mov	r0, r6
  40164c:	4639      	mov	r1, r7
  40164e:	f8df 8250 	ldr.w	r8, [pc, #592]	; 4018a0 <main+0x6b0>
  401652:	47c0      	blx	r8
  401654:	b9c8      	cbnz	r0, 40168a <main+0x49a>
  401656:	f8df a24c 	ldr.w	sl, [pc, #588]	; 4018a4 <main+0x6b4>
  40165a:	a389      	add	r3, pc, #548	; (adr r3, 401880 <main+0x690>)
  40165c:	e9d3 2300 	ldrd	r2, r3, [r3]
  401660:	f5ab 719c 	sub.w	r1, fp, #312	; 0x138
  401664:	e9d1 012e 	ldrd	r0, r1, [r1, #184]	; 0xb8
  401668:	47d0      	blx	sl
  40166a:	4680      	mov	r8, r0
  40166c:	4689      	mov	r9, r1
  40166e:	a386      	add	r3, pc, #536	; (adr r3, 401888 <main+0x698>)
  401670:	e9d3 2300 	ldrd	r2, r3, [r3]
  401674:	4630      	mov	r0, r6
  401676:	4639      	mov	r1, r7
  401678:	47d0      	blx	sl
  40167a:	4602      	mov	r2, r0
  40167c:	460b      	mov	r3, r1
  40167e:	4640      	mov	r0, r8
  401680:	4649      	mov	r1, r9
  401682:	4e85      	ldr	r6, [pc, #532]	; (401898 <main+0x6a8>)
  401684:	47b0      	blx	r6
  401686:	4606      	mov	r6, r0
  401688:	460f      	mov	r7, r1
		void init(void){
			_droniSens.init();
			_droniSens.update();
			
			//--
			accX	= _droniSens.getAccelX();
  40168a:	4b84      	ldr	r3, [pc, #528]	; (40189c <main+0x6ac>)
  40168c:	f503 72a4 	add.w	r2, r3, #328	; 0x148
  401690:	e9c2 6714 	strd	r6, r7, [r2, #80]	; 0x50
		}
		double getAccelY(void){
			return _bmi2.accel_y > BMI160_2G ? _bmi2.accel_y : (0.2*_bmi2.accel_y + 0.8*_bmi1.accel_y) ;
  401694:	f503 731a 	add.w	r3, r3, #616	; 0x268
  401698:	e9d3 2300 	ldrd	r2, r3, [r3]
  40169c:	4692      	mov	sl, r2
  40169e:	469b      	mov	fp, r3
  4016a0:	e9cd ab00 	strd	sl, fp, [sp]
  4016a4:	2200      	movs	r2, #0
  4016a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  4016aa:	4650      	mov	r0, sl
  4016ac:	4659      	mov	r1, fp
  4016ae:	4e7c      	ldr	r6, [pc, #496]	; (4018a0 <main+0x6b0>)
  4016b0:	47b0      	blx	r6
  4016b2:	b9b8      	cbnz	r0, 4016e4 <main+0x4f4>
  4016b4:	4e7b      	ldr	r6, [pc, #492]	; (4018a4 <main+0x6b4>)
  4016b6:	a372      	add	r3, pc, #456	; (adr r3, 401880 <main+0x690>)
  4016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016bc:	497a      	ldr	r1, [pc, #488]	; (4018a8 <main+0x6b8>)
  4016be:	e9d1 0130 	ldrd	r0, r1, [r1, #192]	; 0xc0
  4016c2:	47b0      	blx	r6
  4016c4:	4680      	mov	r8, r0
  4016c6:	4689      	mov	r9, r1
  4016c8:	a36f      	add	r3, pc, #444	; (adr r3, 401888 <main+0x698>)
  4016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016ce:	4650      	mov	r0, sl
  4016d0:	4659      	mov	r1, fp
  4016d2:	47b0      	blx	r6
  4016d4:	4602      	mov	r2, r0
  4016d6:	460b      	mov	r3, r1
  4016d8:	4640      	mov	r0, r8
  4016da:	4649      	mov	r1, r9
  4016dc:	4e6e      	ldr	r6, [pc, #440]	; (401898 <main+0x6a8>)
  4016de:	47b0      	blx	r6
  4016e0:	e9cd 0100 	strd	r0, r1, [sp]
			accY	= _droniSens.getAccelY();
  4016e4:	4b6d      	ldr	r3, [pc, #436]	; (40189c <main+0x6ac>)
  4016e6:	f503 72a4 	add.w	r2, r3, #328	; 0x148
  4016ea:	e9dd 0100 	ldrd	r0, r1, [sp]
  4016ee:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
		}
		double getAccelZ(void){
			return _bmi2.accel_z > BMI160_2G ? _bmi2.accel_z : (0.2*_bmi2.accel_z + 0.8*_bmi1.accel_z) ;
  4016f2:	f503 731c 	add.w	r3, r3, #624	; 0x270
  4016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4016fa:	4692      	mov	sl, r2
  4016fc:	469b      	mov	fp, r3
  4016fe:	e9cd ab02 	strd	sl, fp, [sp, #8]
  401702:	2200      	movs	r2, #0
  401704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  401708:	4650      	mov	r0, sl
  40170a:	4659      	mov	r1, fp
  40170c:	4e64      	ldr	r6, [pc, #400]	; (4018a0 <main+0x6b0>)
  40170e:	47b0      	blx	r6
  401710:	b9b8      	cbnz	r0, 401742 <main+0x552>
  401712:	4e64      	ldr	r6, [pc, #400]	; (4018a4 <main+0x6b4>)
  401714:	a35a      	add	r3, pc, #360	; (adr r3, 401880 <main+0x690>)
  401716:	e9d3 2300 	ldrd	r2, r3, [r3]
  40171a:	4963      	ldr	r1, [pc, #396]	; (4018a8 <main+0x6b8>)
  40171c:	e9d1 0132 	ldrd	r0, r1, [r1, #200]	; 0xc8
  401720:	47b0      	blx	r6
  401722:	4680      	mov	r8, r0
  401724:	4689      	mov	r9, r1
  401726:	a358      	add	r3, pc, #352	; (adr r3, 401888 <main+0x698>)
  401728:	e9d3 2300 	ldrd	r2, r3, [r3]
  40172c:	4650      	mov	r0, sl
  40172e:	4659      	mov	r1, fp
  401730:	47b0      	blx	r6
  401732:	4602      	mov	r2, r0
  401734:	460b      	mov	r3, r1
  401736:	4640      	mov	r0, r8
  401738:	4649      	mov	r1, r9
  40173a:	4e57      	ldr	r6, [pc, #348]	; (401898 <main+0x6a8>)
  40173c:	47b0      	blx	r6
  40173e:	e9cd 0102 	strd	r0, r1, [sp, #8]
			accZ	= _droniSens.getAccelZ();
  401742:	4b56      	ldr	r3, [pc, #344]	; (40189c <main+0x6ac>)
  401744:	f503 72a4 	add.w	r2, r3, #328	; 0x148
  401748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40174c:	e9c2 0118 	strd	r0, r1, [r2, #96]	; 0x60
		}

		double getGyroX(void){
			return _bmi2.gyro_x > BMI160_250DEG ? _bmi2.gyro_x : (0.2*_bmi2.gyro_x + 0.8*_bmi1.gyro_x) ;
  401750:	f503 731e 	add.w	r3, r3, #632	; 0x278
  401754:	e9d3 6700 	ldrd	r6, r7, [r3]
  401758:	2200      	movs	r2, #0
  40175a:	4b54      	ldr	r3, [pc, #336]	; (4018ac <main+0x6bc>)
  40175c:	4630      	mov	r0, r6
  40175e:	4639      	mov	r1, r7
  401760:	f8df 813c 	ldr.w	r8, [pc, #316]	; 4018a0 <main+0x6b0>
  401764:	47c0      	blx	r8
  401766:	b9c0      	cbnz	r0, 40179a <main+0x5aa>
  401768:	f8df a138 	ldr.w	sl, [pc, #312]	; 4018a4 <main+0x6b4>
  40176c:	a344      	add	r3, pc, #272	; (adr r3, 401880 <main+0x690>)
  40176e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401772:	494d      	ldr	r1, [pc, #308]	; (4018a8 <main+0x6b8>)
  401774:	e9d1 0134 	ldrd	r0, r1, [r1, #208]	; 0xd0
  401778:	47d0      	blx	sl
  40177a:	4680      	mov	r8, r0
  40177c:	4689      	mov	r9, r1
  40177e:	a342      	add	r3, pc, #264	; (adr r3, 401888 <main+0x698>)
  401780:	e9d3 2300 	ldrd	r2, r3, [r3]
  401784:	4630      	mov	r0, r6
  401786:	4639      	mov	r1, r7
  401788:	47d0      	blx	sl
  40178a:	4602      	mov	r2, r0
  40178c:	460b      	mov	r3, r1
  40178e:	4640      	mov	r0, r8
  401790:	4649      	mov	r1, r9
  401792:	4e41      	ldr	r6, [pc, #260]	; (401898 <main+0x6a8>)
  401794:	47b0      	blx	r6
  401796:	4606      	mov	r6, r0
  401798:	460f      	mov	r7, r1
			gyroX	= _droniSens.getGyroX();
  40179a:	4b40      	ldr	r3, [pc, #256]	; (40189c <main+0x6ac>)
  40179c:	f503 72a4 	add.w	r2, r3, #328	; 0x148
  4017a0:	e9c2 671a 	strd	r6, r7, [r2, #104]	; 0x68
		}
		double getGyroY(void){
			return _bmi2.gyro_y > BMI160_250DEG ? _bmi2.gyro_y : (0.2*_bmi2.gyro_y + 0.8*_bmi1.gyro_y) ;
  4017a4:	f503 7320 	add.w	r3, r3, #640	; 0x280
  4017a8:	e9d3 6700 	ldrd	r6, r7, [r3]
  4017ac:	2200      	movs	r2, #0
  4017ae:	4b3f      	ldr	r3, [pc, #252]	; (4018ac <main+0x6bc>)
  4017b0:	4630      	mov	r0, r6
  4017b2:	4639      	mov	r1, r7
  4017b4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 4018a0 <main+0x6b0>
  4017b8:	47c0      	blx	r8
  4017ba:	b9c0      	cbnz	r0, 4017ee <main+0x5fe>
  4017bc:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 4018a4 <main+0x6b4>
  4017c0:	a32f      	add	r3, pc, #188	; (adr r3, 401880 <main+0x690>)
  4017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4017c6:	4938      	ldr	r1, [pc, #224]	; (4018a8 <main+0x6b8>)
  4017c8:	e9d1 0136 	ldrd	r0, r1, [r1, #216]	; 0xd8
  4017cc:	47d0      	blx	sl
  4017ce:	4680      	mov	r8, r0
  4017d0:	4689      	mov	r9, r1
  4017d2:	a32d      	add	r3, pc, #180	; (adr r3, 401888 <main+0x698>)
  4017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4017d8:	4630      	mov	r0, r6
  4017da:	4639      	mov	r1, r7
  4017dc:	47d0      	blx	sl
  4017de:	4602      	mov	r2, r0
  4017e0:	460b      	mov	r3, r1
  4017e2:	4640      	mov	r0, r8
  4017e4:	4649      	mov	r1, r9
  4017e6:	4e2c      	ldr	r6, [pc, #176]	; (401898 <main+0x6a8>)
  4017e8:	47b0      	blx	r6
  4017ea:	4606      	mov	r6, r0
  4017ec:	460f      	mov	r7, r1
			gyroY	= _droniSens.getGyroY();
  4017ee:	4b2e      	ldr	r3, [pc, #184]	; (4018a8 <main+0x6b8>)
  4017f0:	e9c3 671c 	strd	r6, r7, [r3, #112]	; 0x70
		}
		double getGyroZ(void){
			return _bmi2.gyro_z > BMI160_250DEG ? _bmi2.gyro_z : (0.2*_bmi2.gyro_z + 0.8*_bmi1.gyro_z) ;
  4017f4:	2200      	movs	r2, #0
  4017f6:	4b2d      	ldr	r3, [pc, #180]	; (4018ac <main+0x6bc>)
  4017f8:	4620      	mov	r0, r4
  4017fa:	4629      	mov	r1, r5
  4017fc:	4e28      	ldr	r6, [pc, #160]	; (4018a0 <main+0x6b0>)
  4017fe:	47b0      	blx	r6
  401800:	b9b8      	cbnz	r0, 401832 <main+0x642>
  401802:	4e28      	ldr	r6, [pc, #160]	; (4018a4 <main+0x6b4>)
  401804:	a31e      	add	r3, pc, #120	; (adr r3, 401880 <main+0x690>)
  401806:	e9d3 2300 	ldrd	r2, r3, [r3]
  40180a:	4927      	ldr	r1, [pc, #156]	; (4018a8 <main+0x6b8>)
  40180c:	e9d1 0138 	ldrd	r0, r1, [r1, #224]	; 0xe0
  401810:	47b0      	blx	r6
  401812:	4680      	mov	r8, r0
  401814:	4689      	mov	r9, r1
  401816:	a31c      	add	r3, pc, #112	; (adr r3, 401888 <main+0x698>)
  401818:	e9d3 2300 	ldrd	r2, r3, [r3]
  40181c:	4620      	mov	r0, r4
  40181e:	4629      	mov	r1, r5
  401820:	47b0      	blx	r6
  401822:	4602      	mov	r2, r0
  401824:	460b      	mov	r3, r1
  401826:	4640      	mov	r0, r8
  401828:	4649      	mov	r1, r9
  40182a:	4c1b      	ldr	r4, [pc, #108]	; (401898 <main+0x6a8>)
  40182c:	47a0      	blx	r4
  40182e:	4604      	mov	r4, r0
  401830:	460d      	mov	r5, r1
			gyroZ	= _droniSens.getGyroZ();
  401832:	4f1a      	ldr	r7, [pc, #104]	; (40189c <main+0x6ac>)
  401834:	f507 76a4 	add.w	r6, r7, #328	; 0x148
  401838:	e9c6 451e 	strd	r4, r5, [r6, #120]	; 0x78

			//mdelay(10000);

			#ifdef RESTRICT_PITCH // Eq. 25 and 26
				double roll  = atan2(accY, accZ) * RAD_TO_DEG;
  40183c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401840:	e9dd 0100 	ldrd	r0, r1, [sp]
  401844:	4c1a      	ldr	r4, [pc, #104]	; (4018b0 <main+0x6c0>)
  401846:	47a0      	blx	r4
  401848:	f8df a058 	ldr.w	sl, [pc, #88]	; 4018a4 <main+0x6b4>
  40184c:	a310      	add	r3, pc, #64	; (adr r3, 401890 <main+0x6a0>)
  40184e:	e9d3 2300 	ldrd	r2, r3, [r3]
  401852:	47d0      	blx	sl
  401854:	4680      	mov	r8, r0
  401856:	4689      	mov	r9, r1
				double pitch = atan(-accX / sqrt(accY * accY + accZ * accZ)) * RAD_TO_DEG;
  401858:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
  40185c:	9304      	str	r3, [sp, #16]
  40185e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
  401862:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
  401866:	9205      	str	r2, [sp, #20]
  401868:	e9d6 4516 	ldrd	r4, r5, [r6, #88]	; 0x58
  40186c:	e9d6 1218 	ldrd	r1, r2, [r6, #96]	; 0x60
  401870:	e020      	b.n	4018b4 <main+0x6c4>
  401872:	bf00      	nop
  401874:	f3af 8000 	nop.w
  401878:	00000000 	.word	0x00000000
  40187c:	40dfffc0 	.word	0x40dfffc0
  401880:	9999999a 	.word	0x9999999a
  401884:	3fe99999 	.word	0x3fe99999
  401888:	9999999a 	.word	0x9999999a
  40188c:	3fc99999 	.word	0x3fc99999
  401890:	1a63c1f8 	.word	0x1a63c1f8
  401894:	404ca5dc 	.word	0x404ca5dc
  401898:	00403355 	.word	0x00403355
  40189c:	20400458 	.word	0x20400458
  4018a0:	00403bd9 	.word	0x00403bd9
  4018a4:	004036b9 	.word	0x004036b9
  4018a8:	204005a0 	.word	0x204005a0
  4018ac:	406f4000 	.word	0x406f4000
  4018b0:	00402f75 	.word	0x00402f75
  4018b4:	e9cd 1200 	strd	r1, r2, [sp]
  4018b8:	4622      	mov	r2, r4
  4018ba:	462b      	mov	r3, r5
  4018bc:	4620      	mov	r0, r4
  4018be:	4629      	mov	r1, r5
  4018c0:	47d0      	blx	sl
  4018c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4018c6:	f8df b124 	ldr.w	fp, [pc, #292]	; 4019ec <main+0x7fc>
  4018ca:	4622      	mov	r2, r4
  4018cc:	462b      	mov	r3, r5
  4018ce:	4620      	mov	r0, r4
  4018d0:	4629      	mov	r1, r5
  4018d2:	47d0      	blx	sl
  4018d4:	4604      	mov	r4, r0
  4018d6:	460d      	mov	r5, r1
  4018d8:	e9dd 0100 	ldrd	r0, r1, [sp]
  4018dc:	4602      	mov	r2, r0
  4018de:	460b      	mov	r3, r1
  4018e0:	47d0      	blx	sl
  4018e2:	4602      	mov	r2, r0
  4018e4:	460b      	mov	r3, r1
  4018e6:	4620      	mov	r0, r4
  4018e8:	4629      	mov	r1, r5
  4018ea:	47d8      	blx	fp
  4018ec:	4b32      	ldr	r3, [pc, #200]	; (4019b8 <main+0x7c8>)
  4018ee:	4798      	blx	r3
  4018f0:	4602      	mov	r2, r0
  4018f2:	460b      	mov	r3, r1
  4018f4:	9804      	ldr	r0, [sp, #16]
  4018f6:	9905      	ldr	r1, [sp, #20]
  4018f8:	4c30      	ldr	r4, [pc, #192]	; (4019bc <main+0x7cc>)
  4018fa:	47a0      	blx	r4
  4018fc:	4b30      	ldr	r3, [pc, #192]	; (4019c0 <main+0x7d0>)
  4018fe:	4798      	blx	r3
  401900:	a32b      	add	r3, pc, #172	; (adr r3, 4019b0 <main+0x7c0>)
  401902:	e9d3 2300 	ldrd	r2, r3, [r3]
  401906:	47d0      	blx	sl
  401908:	4604      	mov	r4, r0
  40190a:	460d      	mov	r5, r1
			#else // Eq. 28 and 29
				double roll  = atan(accY / sqrt(accX * accX + accZ * accZ)) * RAD_TO_DEG;
				double pitch = atan2(-accX, accZ) * RAD_TO_DEG;
			#endif

			kalmanX.setAngle(roll); // Set starting angle
  40190c:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 4019f0 <main+0x800>
  401910:	4640      	mov	r0, r8
  401912:	4649      	mov	r1, r9
  401914:	47d8      	blx	fp
  401916:	4601      	mov	r1, r0
  401918:	4630      	mov	r0, r6
  40191a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 4019f4 <main+0x804>
  40191e:	47d0      	blx	sl
			kalmanY.setAngle(pitch);
  401920:	4620      	mov	r0, r4
  401922:	4629      	mov	r1, r5
  401924:	47d8      	blx	fp
  401926:	4601      	mov	r1, r0
  401928:	f507 70b8 	add.w	r0, r7, #368	; 0x170
  40192c:	47d0      	blx	sl
			gyroXangle = roll;
  40192e:	e9c6 8920 	strd	r8, r9, [r6, #128]	; 0x80
			gyroYangle = pitch;
  401932:	e9c6 4522 	strd	r4, r5, [r6, #136]	; 0x88
			compAngleX = roll;
  401936:	e9c6 8924 	strd	r8, r9, [r6, #144]	; 0x90
			compAngleY = pitch;
  40193a:	e9c6 4526 	strd	r4, r5, [r6, #152]	; 0x98
	droniAtt.init();
	mdelay(100000);//--> delay to let the sensors to initialize and power up
  40193e:	4821      	ldr	r0, [pc, #132]	; (4019c4 <main+0x7d4>)
  401940:	4b21      	ldr	r3, [pc, #132]	; (4019c8 <main+0x7d8>)
  401942:	4798      	blx	r3
		}
		void print(const char *str){
			tinkerUartPutString(_uartId,str);
		};
		void println(const char *str){
			tinkerUartPutString(_uartId,str);
  401944:	4921      	ldr	r1, [pc, #132]	; (4019cc <main+0x7dc>)
  401946:	6a78      	ldr	r0, [r7, #36]	; 0x24
  401948:	4c21      	ldr	r4, [pc, #132]	; (4019d0 <main+0x7e0>)
  40194a:	47a0      	blx	r4
			tinkerUartPutString(_uartId,"\n");
  40194c:	4921      	ldr	r1, [pc, #132]	; (4019d4 <main+0x7e4>)
  40194e:	6a78      	ldr	r0, [r7, #36]	; 0x24
  401950:	47a0      	blx	r4
	//PID myPID_angleY(&estimAngleY, &pidAngY, &targetAngY, Kp, Ki, Kd, DIRECT);
		//myPID_angleX.SetMode(AUTOMATIC);
		//myPID_angleY.SetMode(AUTOMATIC);
	//---LOOP	
	while (1) {
		if(micros() < main_loop_timestamp + main_loop_period) continue;
  401952:	4d21      	ldr	r5, [pc, #132]	; (4019d8 <main+0x7e8>)
  401954:	463c      	mov	r4, r7

		//--
		uint32_t start = micros();
		task1_estimateAttitude();
  401956:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 4019f8 <main+0x808>
		estimAngleY = droniAtt.kalAngleY;
		

	
		//--
		task0_traces();
  40195a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 4019fc <main+0x80c>

		main_loop_timestamp = micros();
		//mdelay(1000000);
		
		
		wdt_restart(WDT);
  40195e:	4f1f      	ldr	r7, [pc, #124]	; (4019dc <main+0x7ec>)
	//PID myPID_angleY(&estimAngleY, &pidAngY, &targetAngY, Kp, Ki, Kd, DIRECT);
		//myPID_angleX.SetMode(AUTOMATIC);
		//myPID_angleY.SetMode(AUTOMATIC);
	//---LOOP	
	while (1) {
		if(micros() < main_loop_timestamp + main_loop_period) continue;
  401960:	f241 3688 	movw	r6, #5000	; 0x1388
  401964:	47a8      	blx	r5
  401966:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
  40196a:	4433      	add	r3, r6
  40196c:	4298      	cmp	r0, r3
  40196e:	d3f9      	bcc.n	401964 <main+0x774>

		//--
		uint32_t start = micros();
  401970:	47a8      	blx	r5
		task1_estimateAttitude();
  401972:	47c8      	blx	r9
		estimAngleX = droniAtt.kalAngleX;
  401974:	f504 7234 	add.w	r2, r4, #720	; 0x2d0
  401978:	f504 73a4 	add.w	r3, r4, #328	; 0x148
  40197c:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
  401980:	e9c2 0100 	strd	r0, r1, [r2]
		estimAngleY = droniAtt.kalAngleY;
  401984:	f504 7236 	add.w	r2, r4, #728	; 0x2d8
  401988:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
  40198c:	e9c2 0100 	strd	r0, r1, [r2]
		

	
		//--
		task0_traces();
  401990:	47c0      	blx	r8
		//TinkerUart0.print(" ");
		//TinkerUart0.printDouble(motorD);
		//TinkerUart0.print(";");

		//--
		task2_compute();
  401992:	4b13      	ldr	r3, [pc, #76]	; (4019e0 <main+0x7f0>)
  401994:	4798      	blx	r3
		
		//--
		task3_control_motors();
  401996:	4b13      	ldr	r3, [pc, #76]	; (4019e4 <main+0x7f4>)
  401998:	4798      	blx	r3
		
		//--
		uint32_t end = micros();
  40199a:	47a8      	blx	r5
		task1_duration = end - start;

		main_loop_timestamp = micros();
  40199c:	47a8      	blx	r5
  40199e:	f8c4 0344 	str.w	r0, [r4, #836]	; 0x344
		//mdelay(1000000);
		
		
		wdt_restart(WDT);
  4019a2:	4638      	mov	r0, r7
  4019a4:	4b10      	ldr	r3, [pc, #64]	; (4019e8 <main+0x7f8>)
  4019a6:	4798      	blx	r3
  4019a8:	e7da      	b.n	401960 <main+0x770>
  4019aa:	bf00      	nop
  4019ac:	f3af 8000 	nop.w
  4019b0:	1a63c1f8 	.word	0x1a63c1f8
  4019b4:	404ca5dc 	.word	0x404ca5dc
  4019b8:	00402f79 	.word	0x00402f79
  4019bc:	0040390d 	.word	0x0040390d
  4019c0:	00402c31 	.word	0x00402c31
  4019c4:	000186a0 	.word	0x000186a0
  4019c8:	00401a65 	.word	0x00401a65
  4019cc:	004045a4 	.word	0x004045a4
  4019d0:	0040227d 	.word	0x0040227d
  4019d4:	0040455c 	.word	0x0040455c
  4019d8:	00401a79 	.word	0x00401a79
  4019dc:	400e1850 	.word	0x400e1850
  4019e0:	00400ea5 	.word	0x00400ea5
  4019e4:	00401101 	.word	0x00401101
  4019e8:	00401f91 	.word	0x00401f91
  4019ec:	00403355 	.word	0x00403355
  4019f0:	00403ca9 	.word	0x00403ca9
  4019f4:	00401d51 	.word	0x00401d51
  4019f8:	00400499 	.word	0x00400499
  4019fc:	00400cb5 	.word	0x00400cb5

00401a00 <_GLOBAL__sub_I__Z11parseAnglesPc>:

	}


}
  401a00:	b538      	push	{r3, r4, r5, lr}
	
	private:
		uint32_t _uartId = TINKER_UART_0;
		char _char_number[20];
	public:
		TinkerUart(uint32_t uartId){_uartId = uartId;};
  401a02:	4c11      	ldr	r4, [pc, #68]	; (401a48 <_GLOBAL__sub_I__Z11parseAnglesPc+0x48>)
  401a04:	2300      	movs	r3, #0
  401a06:	6263      	str	r3, [r4, #36]	; 0x24

class TinkerPWM{
	private:
		uint32_t _pwmId = TINKER_PWM_1;
	public:
		TinkerPWM(uint32_t pwmId){
  401a08:	2001      	movs	r0, #1
  401a0a:	f8c4 0334 	str.w	r0, [r4, #820]	; 0x334
			_pwmId = pwmId;
			tinkerPwmInit(pwmId);
  401a0e:	4d0f      	ldr	r5, [pc, #60]	; (401a4c <_GLOBAL__sub_I__Z11parseAnglesPc+0x4c>)
  401a10:	47a8      	blx	r5
class TinkerPWM{
	private:
		uint32_t _pwmId = TINKER_PWM_1;
	public:
		TinkerPWM(uint32_t pwmId){
			_pwmId = pwmId;
  401a12:	2002      	movs	r0, #2
  401a14:	f8c4 0338 	str.w	r0, [r4, #824]	; 0x338
			tinkerPwmInit(pwmId);
  401a18:	47a8      	blx	r5
class TinkerPWM{
	private:
		uint32_t _pwmId = TINKER_PWM_1;
	public:
		TinkerPWM(uint32_t pwmId){
			_pwmId = pwmId;
  401a1a:	2003      	movs	r0, #3
  401a1c:	f8c4 033c 	str.w	r0, [r4, #828]	; 0x33c
			tinkerPwmInit(pwmId);
  401a20:	47a8      	blx	r5
class TinkerPWM{
	private:
		uint32_t _pwmId = TINKER_PWM_1;
	public:
		TinkerPWM(uint32_t pwmId){
			_pwmId = pwmId;
  401a22:	2004      	movs	r0, #4
  401a24:	f8c4 0340 	str.w	r0, [r4, #832]	; 0x340
			tinkerPwmInit(pwmId);
  401a28:	47a8      	blx	r5
static uint32_t main_loop_timestamp = 0;
static uint32_t main_loop_period = 5000; //period of 5ms for the main loop
static int32_t main_loop_delay = 0;

//-- Droni Attitude Estimation
DroniAttitude droniAtt;
  401a2a:	f504 70a4 	add.w	r0, r4, #328	; 0x148
  401a2e:	4b08      	ldr	r3, [pc, #32]	; (401a50 <_GLOBAL__sub_I__Z11parseAnglesPc+0x50>)
  401a30:	4798      	blx	r3
//-----
static uint32_t task2_timestamp = 0;
static uint32_t task2_period = 5000; 
static double ITermX = 0, ITermY = 0;
static double lastInputX = 0,lastInputY = 0;
static double kp=2, ki=5 * task2_period/1000000, kd=1/ task2_period*1000000;
  401a32:	f504 713a 	add.w	r1, r4, #744	; 0x2e8
  401a36:	2200      	movs	r2, #0
  401a38:	2300      	movs	r3, #0
  401a3a:	e9c1 2300 	strd	r2, r3, [r1]
  401a3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  401a42:	e9c4 2300 	strd	r2, r3, [r4]
  401a46:	bd38      	pop	{r3, r4, r5, pc}
  401a48:	20400458 	.word	0x20400458
  401a4c:	00401fa5 	.word	0x00401fa5
  401a50:	004003f5 	.word	0x004003f5

00401a54 <SysTick_Handler>:
 #include "conf_clock.h"

 volatile uint32_t g_ul_us_ticks = 0;

 void SysTick_Handler(void){
	 g_ul_us_ticks++;
  401a54:	4a02      	ldr	r2, [pc, #8]	; (401a60 <SysTick_Handler+0xc>)
  401a56:	6813      	ldr	r3, [r2, #0]
  401a58:	3301      	adds	r3, #1
  401a5a:	6013      	str	r3, [r2, #0]
  401a5c:	4770      	bx	lr
  401a5e:	bf00      	nop
  401a60:	204007a8 	.word	0x204007a8

00401a64 <_Z6mdelaym>:
 }

 void mdelay(uint32_t ul_dly_ticks){
	 uint32_t ul_cur_ticks;

	 ul_cur_ticks = g_ul_us_ticks;
  401a64:	4b03      	ldr	r3, [pc, #12]	; (401a74 <_Z6mdelaym+0x10>)
  401a66:	6819      	ldr	r1, [r3, #0]
	 while ((g_ul_us_ticks - ul_cur_ticks) < ul_dly_ticks);
  401a68:	461a      	mov	r2, r3
  401a6a:	6813      	ldr	r3, [r2, #0]
  401a6c:	1a5b      	subs	r3, r3, r1
  401a6e:	4283      	cmp	r3, r0
  401a70:	d3fb      	bcc.n	401a6a <_Z6mdelaym+0x6>
 }
  401a72:	4770      	bx	lr
  401a74:	204007a8 	.word	0x204007a8

00401a78 <_Z6microsv>:

 uint32_t micros(void){
	 return g_ul_us_ticks;
  401a78:	4b01      	ldr	r3, [pc, #4]	; (401a80 <_Z6microsv+0x8>)
  401a7a:	6818      	ldr	r0, [r3, #0]
 }
  401a7c:	4770      	bx	lr
  401a7e:	bf00      	nop
  401a80:	204007a8 	.word	0x204007a8

00401a84 <_Z5_itoaPcl>:
		 s[i] = s[j];
		 s[j] = swap;
	 }
 }

 void _itoa(char *s, int32_t n) {
  401a84:	b5f0      	push	{r4, r5, r6, r7, lr}
	 size_t i = 0;
	 long int sign_mask;
	 unsigned long int nn;

	 sign_mask = n >> sizeof(int32_t) * 8 - 1;
  401a86:	ea4f 7ee1 	mov.w	lr, r1, asr #31
	 nn = (n + sign_mask) ^ sign_mask;
  401a8a:	eb01 71e1 	add.w	r1, r1, r1, asr #31
  401a8e:	ea81 010e 	eor.w	r1, r1, lr
  401a92:	1e45      	subs	r5, r0, #1
  401a94:	462c      	mov	r4, r5
		 s[j] = swap;
	 }
 }

 void _itoa(char *s, int32_t n) {
	 size_t i = 0;
  401a96:	2200      	movs	r2, #0
	 unsigned long int nn;

	 sign_mask = n >> sizeof(int32_t) * 8 - 1;
	 nn = (n + sign_mask) ^ sign_mask;
	 do {
		 s[i++] = nn % 10 + '0';
  401a98:	4f13      	ldr	r7, [pc, #76]	; (401ae8 <_Z5_itoaPcl+0x64>)
  401a9a:	3201      	adds	r2, #1
  401a9c:	fba7 6301 	umull	r6, r3, r7, r1
  401aa0:	08db      	lsrs	r3, r3, #3
  401aa2:	eb03 0683 	add.w	r6, r3, r3, lsl #2
  401aa6:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
  401aaa:	3130      	adds	r1, #48	; 0x30
  401aac:	f804 1f01 	strb.w	r1, [r4, #1]!
	 long int sign_mask;
	 unsigned long int nn;

	 sign_mask = n >> sizeof(int32_t) * 8 - 1;
	 nn = (n + sign_mask) ^ sign_mask;
	 do {
  401ab0:	4619      	mov	r1, r3
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d1f1      	bne.n	401a9a <_Z5_itoaPcl+0x16>
		 s[i++] = nn % 10 + '0';
	 } while (nn /= 10);

	 s[i] = '-';
  401ab6:	232d      	movs	r3, #45	; 0x2d
  401ab8:	5483      	strb	r3, [r0, r2]
	 i += sign_mask & 1;
  401aba:	f00e 0301 	and.w	r3, lr, #1
  401abe:	4413      	add	r3, r2
	 s[i] = '\0';
  401ac0:	18c2      	adds	r2, r0, r3
  401ac2:	2100      	movs	r1, #0
  401ac4:	54c1      	strb	r1, [r0, r3]

 static void reverse(char *s, size_t s_len) {
	 size_t i, j;
	 char swap;

	 for (i = 0, j = s_len - 1; i < j; ++i, --j) {
  401ac6:	3b01      	subs	r3, #1
  401ac8:	d00c      	beq.n	401ae4 <_Z5_itoaPcl+0x60>
  401aca:	4628      	mov	r0, r5
		 swap = s[i];
  401acc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
		 s[i] = s[j];
  401ad0:	f812 6c01 	ldrb.w	r6, [r2, #-1]
  401ad4:	f800 6f01 	strb.w	r6, [r0, #1]!
		 s[j] = swap;
  401ad8:	f802 4d01 	strb.w	r4, [r2, #-1]!

 static void reverse(char *s, size_t s_len) {
	 size_t i, j;
	 char swap;

	 for (i = 0, j = s_len - 1; i < j; ++i, --j) {
  401adc:	3101      	adds	r1, #1
  401ade:	3b01      	subs	r3, #1
  401ae0:	4299      	cmp	r1, r3
  401ae2:	d3f3      	bcc.n	401acc <_Z5_itoaPcl+0x48>
  401ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401ae6:	bf00      	nop
  401ae8:	cccccccd 	.word	0xcccccccd

00401aec <_Z5_atofPc>:
	 s[i] = '\0';

	 reverse(s, i);
 }

 double _atof(char *s){
  401aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401af0:	b085      	sub	sp, #20
  401af2:	9000      	str	r0, [sp, #0]
  401af4:	1e46      	subs	r6, r0, #1
	 double val, power;
	 int i, sign;

	 for (i = 0; isspace(s[i]); i++);
  401af6:	2400      	movs	r4, #0
  401af8:	4f45      	ldr	r7, [pc, #276]	; (401c10 <_Z5_atofPc+0x124>)
  401afa:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  401afe:	4628      	mov	r0, r5
  401b00:	47b8      	blx	r7
  401b02:	b108      	cbz	r0, 401b08 <_Z5_atofPc+0x1c>
  401b04:	3401      	adds	r4, #1
  401b06:	e7f8      	b.n	401afa <_Z5_atofPc+0xe>
	 sign = (s[i] == '-') ? -1 : 1;
  401b08:	2d2d      	cmp	r5, #45	; 0x2d
  401b0a:	d004      	beq.n	401b16 <_Z5_atofPc+0x2a>
	 if(s[i] == '+' || s[i] == '-')
  401b0c:	2d2b      	cmp	r5, #43	; 0x2b
  401b0e:	d107      	bne.n	401b20 <_Z5_atofPc+0x34>
 double _atof(char *s){
	 double val, power;
	 int i, sign;

	 for (i = 0; isspace(s[i]); i++);
	 sign = (s[i] == '-') ? -1 : 1;
  401b10:	2301      	movs	r3, #1
  401b12:	9303      	str	r3, [sp, #12]
  401b14:	e002      	b.n	401b1c <_Z5_atofPc+0x30>
  401b16:	f04f 33ff 	mov.w	r3, #4294967295
  401b1a:	9303      	str	r3, [sp, #12]
	 if(s[i] == '+' || s[i] == '-')
	 i++;
  401b1c:	3401      	adds	r4, #1
  401b1e:	e001      	b.n	401b24 <_Z5_atofPc+0x38>
 double _atof(char *s){
	 double val, power;
	 int i, sign;

	 for (i = 0; isspace(s[i]); i++);
	 sign = (s[i] == '-') ? -1 : 1;
  401b20:	2301      	movs	r3, #1
  401b22:	9303      	str	r3, [sp, #12]
	 if(s[i] == '+' || s[i] == '-')
	 i++;
	 for(val = 0.0; isdigit(s[i]); i++){
  401b24:	9a00      	ldr	r2, [sp, #0]
  401b26:	eb02 0804 	add.w	r8, r2, r4
  401b2a:	5d15      	ldrb	r5, [r2, r4]
  401b2c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
  401b30:	2b09      	cmp	r3, #9
  401b32:	d856      	bhi.n	401be2 <_Z5_atofPc+0xf6>
  401b34:	2600      	movs	r6, #0
  401b36:	2700      	movs	r7, #0
		 val = 10.0 * val + (s[i] - '0');
  401b38:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 401c20 <_Z5_atofPc+0x134>
  401b3c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 401c1c <_Z5_atofPc+0x130>
  401b40:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 401c28 <_Z5_atofPc+0x13c>
  401b44:	2200      	movs	r2, #0
  401b46:	4b33      	ldr	r3, [pc, #204]	; (401c14 <_Z5_atofPc+0x128>)
  401b48:	4630      	mov	r0, r6
  401b4a:	4639      	mov	r1, r7
  401b4c:	47c8      	blx	r9
  401b4e:	4606      	mov	r6, r0
  401b50:	460f      	mov	r7, r1
  401b52:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  401b56:	47d0      	blx	sl
  401b58:	4632      	mov	r2, r6
  401b5a:	463b      	mov	r3, r7
  401b5c:	47d8      	blx	fp
  401b5e:	4606      	mov	r6, r0
  401b60:	460f      	mov	r7, r1

	 for (i = 0; isspace(s[i]); i++);
	 sign = (s[i] == '-') ? -1 : 1;
	 if(s[i] == '+' || s[i] == '-')
	 i++;
	 for(val = 0.0; isdigit(s[i]); i++){
  401b62:	3401      	adds	r4, #1
  401b64:	f818 5f01 	ldrb.w	r5, [r8, #1]!
  401b68:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
  401b6c:	2b09      	cmp	r3, #9
  401b6e:	d9e9      	bls.n	401b44 <_Z5_atofPc+0x58>
  401b70:	e039      	b.n	401be6 <_Z5_atofPc+0xfa>
		 val = 10.0 * val + (s[i] - '0');
	 }
	 if(s[i] == '.')
	 i++;
	 for (power = 1.0; isdigit(s[i]); i++){
  401b72:	9a00      	ldr	r2, [sp, #0]
  401b74:	4613      	mov	r3, r2
  401b76:	4423      	add	r3, r4
  401b78:	785d      	ldrb	r5, [r3, #1]
  401b7a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
  401b7e:	2b09      	cmp	r3, #9
  401b80:	d82a      	bhi.n	401bd8 <_Z5_atofPc+0xec>
  401b82:	3401      	adds	r4, #1
  401b84:	4613      	mov	r3, r2
  401b86:	4423      	add	r3, r4
  401b88:	461c      	mov	r4, r3
  401b8a:	2200      	movs	r2, #0
  401b8c:	4b22      	ldr	r3, [pc, #136]	; (401c18 <_Z5_atofPc+0x12c>)
  401b8e:	e9cd 2300 	strd	r2, r3, [sp]
		 val = 10.0 * val + (s[i] - '0');
  401b92:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401c20 <_Z5_atofPc+0x134>
  401b96:	f8df 9084 	ldr.w	r9, [pc, #132]	; 401c1c <_Z5_atofPc+0x130>
  401b9a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 401c28 <_Z5_atofPc+0x13c>
  401b9e:	2200      	movs	r2, #0
  401ba0:	4b1c      	ldr	r3, [pc, #112]	; (401c14 <_Z5_atofPc+0x128>)
  401ba2:	4630      	mov	r0, r6
  401ba4:	4639      	mov	r1, r7
  401ba6:	47c0      	blx	r8
  401ba8:	4606      	mov	r6, r0
  401baa:	460f      	mov	r7, r1
  401bac:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
  401bb0:	47c8      	blx	r9
  401bb2:	4632      	mov	r2, r6
  401bb4:	463b      	mov	r3, r7
  401bb6:	47d0      	blx	sl
  401bb8:	4606      	mov	r6, r0
  401bba:	460f      	mov	r7, r1
		 power *= 10.0;
  401bbc:	2200      	movs	r2, #0
  401bbe:	4b15      	ldr	r3, [pc, #84]	; (401c14 <_Z5_atofPc+0x128>)
  401bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
  401bc4:	47c0      	blx	r8
  401bc6:	e9cd 0100 	strd	r0, r1, [sp]
	 for(val = 0.0; isdigit(s[i]); i++){
		 val = 10.0 * val + (s[i] - '0');
	 }
	 if(s[i] == '.')
	 i++;
	 for (power = 1.0; isdigit(s[i]); i++){
  401bca:	f814 5f01 	ldrb.w	r5, [r4, #1]!
  401bce:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
  401bd2:	2b09      	cmp	r3, #9
  401bd4:	d9e3      	bls.n	401b9e <_Z5_atofPc+0xb2>
  401bd6:	e00c      	b.n	401bf2 <_Z5_atofPc+0x106>
  401bd8:	2300      	movs	r3, #0
  401bda:	4c0f      	ldr	r4, [pc, #60]	; (401c18 <_Z5_atofPc+0x12c>)
  401bdc:	e9cd 3400 	strd	r3, r4, [sp]
  401be0:	e007      	b.n	401bf2 <_Z5_atofPc+0x106>

	 for (i = 0; isspace(s[i]); i++);
	 sign = (s[i] == '-') ? -1 : 1;
	 if(s[i] == '+' || s[i] == '-')
	 i++;
	 for(val = 0.0; isdigit(s[i]); i++){
  401be2:	2600      	movs	r6, #0
  401be4:	2700      	movs	r7, #0
		 val = 10.0 * val + (s[i] - '0');
	 }
	 if(s[i] == '.')
  401be6:	2d2e      	cmp	r5, #46	; 0x2e
  401be8:	d0c3      	beq.n	401b72 <_Z5_atofPc+0x86>
  401bea:	2300      	movs	r3, #0
  401bec:	4c0a      	ldr	r4, [pc, #40]	; (401c18 <_Z5_atofPc+0x12c>)
  401bee:	e9cd 3400 	strd	r3, r4, [sp]
	 i++;
	 for (power = 1.0; isdigit(s[i]); i++){
		 val = 10.0 * val + (s[i] - '0');
		 power *= 10.0;
	 }
	 return sign * val / power;
  401bf2:	9803      	ldr	r0, [sp, #12]
  401bf4:	4b09      	ldr	r3, [pc, #36]	; (401c1c <_Z5_atofPc+0x130>)
  401bf6:	4798      	blx	r3
  401bf8:	4632      	mov	r2, r6
  401bfa:	463b      	mov	r3, r7
  401bfc:	4c08      	ldr	r4, [pc, #32]	; (401c20 <_Z5_atofPc+0x134>)
  401bfe:	47a0      	blx	r4
  401c00:	e9dd 2300 	ldrd	r2, r3, [sp]
  401c04:	4c07      	ldr	r4, [pc, #28]	; (401c24 <_Z5_atofPc+0x138>)
  401c06:	47a0      	blx	r4
  401c08:	b005      	add	sp, #20
  401c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c0e:	bf00      	nop
  401c10:	00404261 	.word	0x00404261
  401c14:	40240000 	.word	0x40240000
  401c18:	3ff00000 	.word	0x3ff00000
  401c1c:	004035ed 	.word	0x004035ed
  401c20:	004036b9 	.word	0x004036b9
  401c24:	0040390d 	.word	0x0040390d
  401c28:	00403355 	.word	0x00403355

00401c2c <_ZN6KalmanC1Ev>:

#include "Kalman.h"

Kalman::Kalman() {
    /* We will set the variables like so, these can also be tuned by the user */
    Q_angle = 0.001f;
  401c2c:	4a06      	ldr	r2, [pc, #24]	; (401c48 <_ZN6KalmanC1Ev+0x1c>)
  401c2e:	6002      	str	r2, [r0, #0]
    Q_bias = 0.003f;
  401c30:	4a06      	ldr	r2, [pc, #24]	; (401c4c <_ZN6KalmanC1Ev+0x20>)
  401c32:	6042      	str	r2, [r0, #4]
    R_measure = 0.03f;
  401c34:	4a06      	ldr	r2, [pc, #24]	; (401c50 <_ZN6KalmanC1Ev+0x24>)
  401c36:	6082      	str	r2, [r0, #8]

    angle = 0.0f; // Reset the angle
  401c38:	2200      	movs	r2, #0
  401c3a:	60c2      	str	r2, [r0, #12]
    bias = 0.0f; // Reset bias
  401c3c:	6102      	str	r2, [r0, #16]

    P[0][0] = 0.0f; // Since we assume that the bias is 0 and we know the starting angle (use setAngle), the error covariance matrix is set like so - see: http://en.wikipedia.org/wiki/Kalman_filter#Example_application.2C_technical
  401c3e:	6182      	str	r2, [r0, #24]
    P[0][1] = 0.0f;
  401c40:	61c2      	str	r2, [r0, #28]
    P[1][0] = 0.0f;
  401c42:	6202      	str	r2, [r0, #32]
    P[1][1] = 0.0f;
  401c44:	6242      	str	r2, [r0, #36]	; 0x24
};
  401c46:	4770      	bx	lr
  401c48:	3a83126f 	.word	0x3a83126f
  401c4c:	3b449ba6 	.word	0x3b449ba6
  401c50:	3cf5c28f 	.word	0x3cf5c28f

00401c54 <_ZN6Kalman8getAngleEfff>:

// The angle should be in degrees and the rate should be in degrees per second and the delta time in seconds
float Kalman::getAngle(float newAngle, float newRate, float dt) {
  401c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c58:	b087      	sub	sp, #28
  401c5a:	4604      	mov	r4, r0
  401c5c:	9104      	str	r1, [sp, #16]
  401c5e:	9301      	str	r3, [sp, #4]
    // See my blog post for more information: http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it

    // Discrete Kalman filter time update equations - Time Update ("Predict")
    // Update xhat - Project the state ahead
    /* Step 1 */
    rate = newRate - bias;
  401c60:	f8d0 8010 	ldr.w	r8, [r0, #16]
  401c64:	4d36      	ldr	r5, [pc, #216]	; (401d40 <_ZN6Kalman8getAngleEfff+0xec>)
  401c66:	4641      	mov	r1, r8
  401c68:	4610      	mov	r0, r2
  401c6a:	47a8      	blx	r5
  401c6c:	6160      	str	r0, [r4, #20]
    angle += dt * rate;
  401c6e:	4e35      	ldr	r6, [pc, #212]	; (401d44 <_ZN6Kalman8getAngleEfff+0xf0>)
  401c70:	9901      	ldr	r1, [sp, #4]
  401c72:	47b0      	blx	r6
  401c74:	4f34      	ldr	r7, [pc, #208]	; (401d48 <_ZN6Kalman8getAngleEfff+0xf4>)
  401c76:	68e1      	ldr	r1, [r4, #12]
  401c78:	47b8      	blx	r7
  401c7a:	9002      	str	r0, [sp, #8]

    // Update estimation error covariance - Project the error covariance ahead
    /* Step 2 */
    P[0][0] += dt * (dt*P[1][1] - P[0][1] - P[1][0] + Q_angle);
  401c7c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
  401c80:	4649      	mov	r1, r9
  401c82:	9801      	ldr	r0, [sp, #4]
  401c84:	47b0      	blx	r6
  401c86:	9003      	str	r0, [sp, #12]
  401c88:	f8d4 b01c 	ldr.w	fp, [r4, #28]
  401c8c:	f8d4 a020 	ldr.w	sl, [r4, #32]
  401c90:	4659      	mov	r1, fp
  401c92:	47a8      	blx	r5
  401c94:	4651      	mov	r1, sl
  401c96:	47a8      	blx	r5
  401c98:	6821      	ldr	r1, [r4, #0]
  401c9a:	47b8      	blx	r7
  401c9c:	9901      	ldr	r1, [sp, #4]
  401c9e:	47b0      	blx	r6
  401ca0:	69a1      	ldr	r1, [r4, #24]
  401ca2:	47b8      	blx	r7
  401ca4:	9000      	str	r0, [sp, #0]
    P[0][1] -= dt * P[1][1];
  401ca6:	9903      	ldr	r1, [sp, #12]
  401ca8:	4658      	mov	r0, fp
  401caa:	47a8      	blx	r5
  401cac:	4683      	mov	fp, r0
    P[1][0] -= dt * P[1][1];
  401cae:	9903      	ldr	r1, [sp, #12]
  401cb0:	4650      	mov	r0, sl
  401cb2:	47a8      	blx	r5
  401cb4:	9003      	str	r0, [sp, #12]
    P[1][1] += Q_bias * dt;
  401cb6:	6861      	ldr	r1, [r4, #4]
  401cb8:	9801      	ldr	r0, [sp, #4]
  401cba:	47b0      	blx	r6
  401cbc:	4649      	mov	r1, r9
  401cbe:	47b8      	blx	r7
  401cc0:	9005      	str	r0, [sp, #20]

    // Discrete Kalman filter measurement update equations - Measurement Update ("Correct")
    // Calculate Kalman gain - Compute the Kalman gain
    /* Step 4 */
    float S = P[0][0] + R_measure; // Estimate error
  401cc2:	68a1      	ldr	r1, [r4, #8]
  401cc4:	9800      	ldr	r0, [sp, #0]
  401cc6:	47b8      	blx	r7
  401cc8:	4682      	mov	sl, r0
    /* Step 5 */
    float K[2]; // Kalman gain - This is a 2x1 vector
    K[0] = P[0][0] / S;
  401cca:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401d4c <_ZN6Kalman8getAngleEfff+0xf8>
  401cce:	4601      	mov	r1, r0
  401cd0:	9800      	ldr	r0, [sp, #0]
  401cd2:	47c8      	blx	r9
  401cd4:	9001      	str	r0, [sp, #4]
    K[1] = P[1][0] / S;
  401cd6:	4651      	mov	r1, sl
  401cd8:	9803      	ldr	r0, [sp, #12]
  401cda:	47c8      	blx	r9
  401cdc:	4681      	mov	r9, r0

    // Calculate angle and bias - Update estimate with measurement zk (newAngle)
    /* Step 3 */
    float y = newAngle - angle; // Angle difference
  401cde:	9902      	ldr	r1, [sp, #8]
  401ce0:	9804      	ldr	r0, [sp, #16]
  401ce2:	47a8      	blx	r5
  401ce4:	9004      	str	r0, [sp, #16]
    /* Step 6 */
    angle += K[0] * y;
  401ce6:	4601      	mov	r1, r0
  401ce8:	9801      	ldr	r0, [sp, #4]
  401cea:	47b0      	blx	r6
  401cec:	9902      	ldr	r1, [sp, #8]
  401cee:	47b8      	blx	r7
  401cf0:	4682      	mov	sl, r0
  401cf2:	60e0      	str	r0, [r4, #12]
    bias += K[1] * y;
  401cf4:	9904      	ldr	r1, [sp, #16]
  401cf6:	4648      	mov	r0, r9
  401cf8:	47b0      	blx	r6
  401cfa:	4641      	mov	r1, r8
  401cfc:	47b8      	blx	r7
  401cfe:	6120      	str	r0, [r4, #16]
    // Calculate estimation error covariance - Update the error covariance
    /* Step 7 */
    float P00_temp = P[0][0];
    float P01_temp = P[0][1];

    P[0][0] -= K[0] * P00_temp;
  401d00:	9901      	ldr	r1, [sp, #4]
  401d02:	9800      	ldr	r0, [sp, #0]
  401d04:	47b0      	blx	r6
  401d06:	4601      	mov	r1, r0
  401d08:	9800      	ldr	r0, [sp, #0]
  401d0a:	47a8      	blx	r5
  401d0c:	61a0      	str	r0, [r4, #24]
    P[0][1] -= K[0] * P01_temp;
  401d0e:	9901      	ldr	r1, [sp, #4]
  401d10:	4658      	mov	r0, fp
  401d12:	47b0      	blx	r6
  401d14:	4601      	mov	r1, r0
  401d16:	4658      	mov	r0, fp
  401d18:	47a8      	blx	r5
  401d1a:	61e0      	str	r0, [r4, #28]
    P[1][0] -= K[1] * P00_temp;
  401d1c:	4649      	mov	r1, r9
  401d1e:	9800      	ldr	r0, [sp, #0]
  401d20:	47b0      	blx	r6
  401d22:	4601      	mov	r1, r0
  401d24:	9803      	ldr	r0, [sp, #12]
  401d26:	47a8      	blx	r5
  401d28:	6220      	str	r0, [r4, #32]
    P[1][1] -= K[1] * P01_temp;
  401d2a:	4649      	mov	r1, r9
  401d2c:	4658      	mov	r0, fp
  401d2e:	47b0      	blx	r6
  401d30:	4601      	mov	r1, r0
  401d32:	9805      	ldr	r0, [sp, #20]
  401d34:	47a8      	blx	r5
  401d36:	6260      	str	r0, [r4, #36]	; 0x24

    return angle;
};
  401d38:	4650      	mov	r0, sl
  401d3a:	b007      	add	sp, #28
  401d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401d40:	00403d51 	.word	0x00403d51
  401d44:	00403f65 	.word	0x00403f65
  401d48:	00403d55 	.word	0x00403d55
  401d4c:	004040cd 	.word	0x004040cd

00401d50 <_ZN6Kalman8setAngleEf>:

void Kalman::setAngle(float angle) { this->angle = angle; }; // Used to set angle, this should be set as the starting angle
  401d50:	60c1      	str	r1, [r0, #12]
  401d52:	4770      	bx	lr

00401d54 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401d54:	4b28      	ldr	r3, [pc, #160]	; (401df8 <twihs_set_speed+0xa4>)
  401d56:	4299      	cmp	r1, r3
  401d58:	d849      	bhi.n	401dee <twihs_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401d5a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401d5e:	4299      	cmp	r1, r3
  401d60:	d92b      	bls.n	401dba <twihs_set_speed+0x66>
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
  401d62:	b410      	push	{r4}
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401d64:	4c25      	ldr	r4, [pc, #148]	; (401dfc <twihs_set_speed+0xa8>)
  401d66:	fba4 3402 	umull	r3, r4, r4, r2
  401d6a:	0ba4      	lsrs	r4, r4, #14
  401d6c:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401d6e:	4b24      	ldr	r3, [pc, #144]	; (401e00 <twihs_set_speed+0xac>)
  401d70:	440b      	add	r3, r1
  401d72:	009b      	lsls	r3, r3, #2
  401d74:	fbb2 f2f3 	udiv	r2, r2, r3
  401d78:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d7a:	2cff      	cmp	r4, #255	; 0xff
  401d7c:	d907      	bls.n	401d8e <twihs_set_speed+0x3a>
  401d7e:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401d80:	3301      	adds	r3, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  401d82:	0864      	lsrs	r4, r4, #1
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d84:	2cff      	cmp	r4, #255	; 0xff
  401d86:	d903      	bls.n	401d90 <twihs_set_speed+0x3c>
  401d88:	2b06      	cmp	r3, #6
  401d8a:	d9f9      	bls.n	401d80 <twihs_set_speed+0x2c>
  401d8c:	e000      	b.n	401d90 <twihs_set_speed+0x3c>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401d8e:	2300      	movs	r3, #0
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d90:	2aff      	cmp	r2, #255	; 0xff
  401d92:	d907      	bls.n	401da4 <twihs_set_speed+0x50>
  401d94:	2b06      	cmp	r3, #6
  401d96:	d805      	bhi.n	401da4 <twihs_set_speed+0x50>
			/* Increase clock divider */
			ckdiv++;
  401d98:	3301      	adds	r3, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  401d9a:	0852      	lsrs	r2, r2, #1
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401d9c:	2aff      	cmp	r2, #255	; 0xff
  401d9e:	d901      	bls.n	401da4 <twihs_set_speed+0x50>
  401da0:	2b06      	cmp	r3, #6
  401da2:	d9f9      	bls.n	401d98 <twihs_set_speed+0x44>
			chdiv /= TWIHS_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401da4:	0212      	lsls	r2, r2, #8
  401da6:	b292      	uxth	r2, r2
  401da8:	041b      	lsls	r3, r3, #16
  401daa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401dae:	431a      	orrs	r2, r3
  401db0:	b2e4      	uxtb	r4, r4
  401db2:	4322      	orrs	r2, r4
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
  401db4:	6102      	str	r2, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401db6:	2000      	movs	r0, #0
  401db8:	e01b      	b.n	401df2 <twihs_set_speed+0x9e>
		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
				TWIHS_CWGR_CKDIV(ckdiv);
	} else {
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401dba:	0049      	lsls	r1, r1, #1
  401dbc:	fbb2 f2f1 	udiv	r2, r2, r1
  401dc0:	3a03      	subs	r2, #3

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401dc2:	2aff      	cmp	r2, #255	; 0xff
  401dc4:	d907      	bls.n	401dd6 <twihs_set_speed+0x82>
  401dc6:	2300      	movs	r3, #0
			/* Increase clock divider */
			ckdiv++;
  401dc8:	3301      	adds	r3, #1
			/* Divide cldiv value */
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401dca:	0852      	lsrs	r2, r2, #1
				TWIHS_CWGR_CKDIV(ckdiv);
	} else {
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;

		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401dcc:	2aff      	cmp	r2, #255	; 0xff
  401dce:	d903      	bls.n	401dd8 <twihs_set_speed+0x84>
  401dd0:	2b06      	cmp	r3, #6
  401dd2:	d9f9      	bls.n	401dc8 <twihs_set_speed+0x74>
  401dd4:	e000      	b.n	401dd8 <twihs_set_speed+0x84>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twihs_set_speed(Twihs *p_twihs, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  401dd6:	2300      	movs	r3, #0
			c_lh_div /= TWIHS_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401dd8:	0211      	lsls	r1, r2, #8
  401dda:	b289      	uxth	r1, r1
  401ddc:	041b      	lsls	r3, r3, #16
  401dde:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  401de2:	430b      	orrs	r3, r1
  401de4:	b2d2      	uxtb	r2, r2
  401de6:	431a      	orrs	r2, r3
			/* Divide cldiv value */
			c_lh_div /= TWIHS_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
  401de8:	6102      	str	r2, [r0, #16]
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401dea:	2000      	movs	r0, #0
  401dec:	4770      	bx	lr
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  401dee:	2001      	movs	r0, #1
  401df0:	4770      	bx	lr
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
  401df2:	bc10      	pop	{r4}
  401df4:	4770      	bx	lr
  401df6:	bf00      	nop
  401df8:	00061a80 	.word	0x00061a80
  401dfc:	057619f1 	.word	0x057619f1
  401e00:	3ffd1200 	.word	0x3ffd1200

00401e04 <twihs_master_init>:
 * \param p_opt Options for initializing the TWIHS module (see \ref twihs_options_t).
 *
 * \return TWIHS_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twihs_master_init(Twihs *p_twihs, const twihs_options_t *p_opt)
{
  401e04:	b508      	push	{r3, lr}
	uint32_t status = TWIHS_SUCCESS;

	/* Disable TWIHS interrupts */
	p_twihs->TWIHS_IDR = ~0UL;
  401e06:	f04f 32ff 	mov.w	r2, #4294967295
  401e0a:	6282      	str	r2, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twihs->TWIHS_SR;
  401e0c:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401e0e:	2280      	movs	r2, #128	; 0x80
  401e10:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401e12:	6b02      	ldr	r2, [r0, #48]	; 0x30
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_enable_master_mode(Twihs *p_twihs)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401e14:	2208      	movs	r2, #8
  401e16:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401e18:	2220      	movs	r2, #32
  401e1a:	6002      	str	r2, [r0, #0]

	/* Set Master Enable bit */
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401e1c:	2204      	movs	r2, #4
  401e1e:	6002      	str	r2, [r0, #0]
	twihs_reset(p_twihs);

	twihs_enable_master_mode(p_twihs);

	/* Select the speed */
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401e20:	680a      	ldr	r2, [r1, #0]
  401e22:	6849      	ldr	r1, [r1, #4]
  401e24:	4b03      	ldr	r3, [pc, #12]	; (401e34 <twihs_master_init+0x30>)
  401e26:	4798      	blx	r3
		/* The desired speed setting is rejected */
		status = TWIHS_INVALID_ARGUMENT;
	}

	return status;
}
  401e28:	2801      	cmp	r0, #1
  401e2a:	bf14      	ite	ne
  401e2c:	2000      	movne	r0, #0
  401e2e:	2001      	moveq	r0, #1
  401e30:	bd08      	pop	{r3, pc}
  401e32:	bf00      	nop
  401e34:	00401d55 	.word	0x00401d55

00401e38 <twihs_master_read>:
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401e38:	b470      	push	{r4, r5, r6}
	uint32_t status, cnt = p_packet->length;
  401e3a:	68cc      	ldr	r4, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
  401e3c:	2c00      	cmp	r4, #0
  401e3e:	d048      	beq.n	401ed2 <twihs_master_read+0x9a>
  401e40:	4602      	mov	r2, r0
 * \return TWIHS_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twihs_master_read(Twihs *p_twihs, twihs_packet_t *p_packet)
{
	uint32_t status, cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401e42:	688d      	ldr	r5, [r1, #8]
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401e44:	2600      	movs	r6, #0
  401e46:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401e48:	684b      	ldr	r3, [r1, #4]
  401e4a:	021b      	lsls	r3, r3, #8
  401e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
  401e50:	f443 5080 	orr.w	r0, r3, #4096	; 0x1000
  401e54:	7c0b      	ldrb	r3, [r1, #16]
  401e56:	041b      	lsls	r3, r3, #16
  401e58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  401e5c:	4303      	orrs	r3, r0
  401e5e:	6053      	str	r3, [r2, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401e60:	60d6      	str	r6, [r2, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401e62:	6848      	ldr	r0, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401e64:	b158      	cbz	r0, 401e7e <twihs_master_read+0x46>
		return 0;

	val = addr[0];
  401e66:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  401e68:	2801      	cmp	r0, #1
  401e6a:	dd02      	ble.n	401e72 <twihs_master_read+0x3a>
		val <<= 8;
		val |= addr[1];
  401e6c:	784e      	ldrb	r6, [r1, #1]
  401e6e:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	}
	if (len > 2) {
  401e72:	2802      	cmp	r0, #2
  401e74:	dd04      	ble.n	401e80 <twihs_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  401e76:	7889      	ldrb	r1, [r1, #2]
  401e78:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401e7c:	e000      	b.n	401e80 <twihs_master_read+0x48>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401e7e:	2300      	movs	r3, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401e80:	60d3      	str	r3, [r2, #12]

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401e82:	2301      	movs	r3, #1
  401e84:	6013      	str	r3, [r2, #0]
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e86:	2602      	movs	r6, #2
  401e88:	e014      	b.n	401eb4 <twihs_master_read+0x7c>

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  401e8a:	6a13      	ldr	r3, [r2, #32]
		if (status & TWIHS_SR_NACK) {
  401e8c:	f413 7f80 	tst.w	r3, #256	; 0x100
  401e90:	d121      	bne.n	401ed6 <twihs_master_read+0x9e>
			return TWIHS_RECEIVE_NACK;
		}
		if (!timeout--) {
  401e92:	3901      	subs	r1, #1
  401e94:	d021      	beq.n	401eda <twihs_master_read+0xa2>
			return TWIHS_ERROR_TIMEOUT;
		}
		/* Last byte ? */
		if (cnt == 1) {
  401e96:	2c01      	cmp	r4, #1
  401e98:	d104      	bne.n	401ea4 <twihs_master_read+0x6c>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401e9a:	6016      	str	r6, [r2, #0]
		}

		if (!(status & TWIHS_SR_RXRDY)) {
  401e9c:	f013 0f02 	tst.w	r3, #2
  401ea0:	d11f      	bne.n	401ee2 <twihs_master_read+0xaa>
  401ea2:	e7f2      	b.n	401e8a <twihs_master_read+0x52>
  401ea4:	f013 0f02 	tst.w	r3, #2
  401ea8:	d00b      	beq.n	401ec2 <twihs_master_read+0x8a>
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  401eaa:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401eac:	f805 3b01 	strb.w	r3, [r5], #1
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  401eb0:	3c01      	subs	r4, #1
  401eb2:	d008      	beq.n	401ec6 <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  401eb4:	6a13      	ldr	r3, [r2, #32]
		if (status & TWIHS_SR_NACK) {
  401eb6:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  401eba:	d110      	bne.n	401ede <twihs_master_read+0xa6>
  401ebc:	f643 2198 	movw	r1, #15000	; 0x3a98
  401ec0:	e7e9      	b.n	401e96 <twihs_master_read+0x5e>
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send a START Condition */
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
  401ec2:	2c00      	cmp	r4, #0
  401ec4:	d1e1      	bne.n	401e8a <twihs_master_read+0x52>

		cnt--;
		timeout = TWIHS_TIMEOUT;
	}

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401ec6:	6a13      	ldr	r3, [r2, #32]
  401ec8:	f013 0f01 	tst.w	r3, #1
  401ecc:	d0fb      	beq.n	401ec6 <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;
  401ece:	6a13      	ldr	r3, [r2, #32]

	return TWIHS_SUCCESS;
  401ed0:	e00a      	b.n	401ee8 <twihs_master_read+0xb0>
	uint8_t *buffer = p_packet->buffer;
	uint32_t timeout = TWIHS_TIMEOUT;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  401ed2:	2001      	movs	r0, #1
  401ed4:	e008      	b.n	401ee8 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  401ed6:	2005      	movs	r0, #5
  401ed8:	e006      	b.n	401ee8 <twihs_master_read+0xb0>
		}
		if (!timeout--) {
			return TWIHS_ERROR_TIMEOUT;
  401eda:	2009      	movs	r0, #9
  401edc:	e004      	b.n	401ee8 <twihs_master_read+0xb0>
	p_twihs->TWIHS_CR = TWIHS_CR_START;

	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  401ede:	2005      	movs	r0, #5
  401ee0:	e002      	b.n	401ee8 <twihs_master_read+0xb0>
		}

		if (!(status & TWIHS_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twihs->TWIHS_RHR;
  401ee2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ee4:	702b      	strb	r3, [r5, #0]
  401ee6:	e7ee      	b.n	401ec6 <twihs_master_read+0x8e>
	}

	p_twihs->TWIHS_SR;

	return TWIHS_SUCCESS;
}
  401ee8:	bc70      	pop	{r4, r5, r6}
  401eea:	4770      	bx	lr

00401eec <twihs_master_write>:
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
	uint32_t status, cnt = p_packet->length;
  401eec:	68ca      	ldr	r2, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  401eee:	2a00      	cmp	r2, #0
  401ef0:	d045      	beq.n	401f7e <twihs_master_write+0x92>
 * \param p_packet Packet information and data (see \ref twihs_packet_t).
 *
 * \return TWIHS_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twihs_master_write(Twihs *p_twihs, twihs_packet_t *p_packet)
{
  401ef2:	b470      	push	{r4, r5, r6}
  401ef4:	4603      	mov	r3, r0
	uint32_t status, cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  401ef6:	6888      	ldr	r0, [r1, #8]
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twihs->TWIHS_MMR = 0;
  401ef8:	2600      	movs	r6, #0
  401efa:	605e      	str	r6, [r3, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401efc:	7c0c      	ldrb	r4, [r1, #16]
  401efe:	0424      	lsls	r4, r4, #16
  401f00:	f404 05fe 	and.w	r5, r4, #8323072	; 0x7f0000
  401f04:	684c      	ldr	r4, [r1, #4]
  401f06:	0224      	lsls	r4, r4, #8
  401f08:	f404 7440 	and.w	r4, r4, #768	; 0x300
  401f0c:	432c      	orrs	r4, r5
  401f0e:	605c      	str	r4, [r3, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
  401f10:	60de      	str	r6, [r3, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401f12:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  401f14:	b15d      	cbz	r5, 401f2e <twihs_master_write+0x42>
		return 0;

	val = addr[0];
  401f16:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
  401f18:	2d01      	cmp	r5, #1
  401f1a:	dd02      	ble.n	401f22 <twihs_master_write+0x36>
		val <<= 8;
		val |= addr[1];
  401f1c:	784e      	ldrb	r6, [r1, #1]
  401f1e:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
	}
	if (len > 2) {
  401f22:	2d02      	cmp	r5, #2
  401f24:	dd04      	ble.n	401f30 <twihs_master_write+0x44>
		val <<= 8;
		val |= addr[2];
  401f26:	7889      	ldrb	r1, [r1, #2]
  401f28:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
  401f2c:	e000      	b.n	401f30 <twihs_master_write+0x44>
static uint32_t twihs_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  401f2e:	2400      	movs	r4, #0
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
			TWIHS_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401f30:	60dc      	str	r4, [r3, #12]
  401f32:	e00e      	b.n	401f52 <twihs_master_write+0x66>

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
  401f34:	6a19      	ldr	r1, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  401f36:	f411 7f80 	tst.w	r1, #256	; 0x100
  401f3a:	d122      	bne.n	401f82 <twihs_master_write+0x96>
			return TWIHS_RECEIVE_NACK;
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  401f3c:	f011 0f04 	tst.w	r1, #4
  401f40:	d102      	bne.n	401f48 <twihs_master_write+0x5c>
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401f42:	2a00      	cmp	r2, #0
  401f44:	d1f6      	bne.n	401f34 <twihs_master_write+0x48>
  401f46:	e00c      	b.n	401f62 <twihs_master_write+0x76>
		}

		if (!(status & TWIHS_SR_TXRDY)) {
			continue;
		}
		p_twihs->TWIHS_THR = *buffer++;
  401f48:	f810 1b01 	ldrb.w	r1, [r0], #1
  401f4c:	6359      	str	r1, [r3, #52]	; 0x34
	/* Set internal address for remote chip */
	p_twihs->TWIHS_IADR = 0;
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401f4e:	3a01      	subs	r2, #1
  401f50:	d007      	beq.n	401f62 <twihs_master_write+0x76>
		status = p_twihs->TWIHS_SR;
  401f52:	6a19      	ldr	r1, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  401f54:	f411 7f80 	tst.w	r1, #256	; 0x100
  401f58:	d115      	bne.n	401f86 <twihs_master_write+0x9a>
			return TWIHS_RECEIVE_NACK;
		}

		if (!(status & TWIHS_SR_TXRDY)) {
  401f5a:	f011 0f04 	tst.w	r1, #4
  401f5e:	d0e9      	beq.n	401f34 <twihs_master_write+0x48>
  401f60:	e7f2      	b.n	401f48 <twihs_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
  401f62:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWIHS_SR_NACK) {
  401f64:	f412 7080 	ands.w	r0, r2, #256	; 0x100
  401f68:	d10f      	bne.n	401f8a <twihs_master_write+0x9e>
			return TWIHS_RECEIVE_NACK;
		}

		if (status & TWIHS_SR_TXRDY) {
  401f6a:	f012 0f04 	tst.w	r2, #4
  401f6e:	d0f8      	beq.n	401f62 <twihs_master_write+0x76>
			break;
		}
	}

	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401f70:	2202      	movs	r2, #2
  401f72:	601a      	str	r2, [r3, #0]

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401f74:	6a1a      	ldr	r2, [r3, #32]
  401f76:	f012 0f01 	tst.w	r2, #1
  401f7a:	d0fb      	beq.n	401f74 <twihs_master_write+0x88>
  401f7c:	e006      	b.n	401f8c <twihs_master_write+0xa0>
	uint32_t status, cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWIHS_INVALID_ARGUMENT;
  401f7e:	2001      	movs	r0, #1

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
	}

	return TWIHS_SUCCESS;
}
  401f80:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  401f82:	2005      	movs	r0, #5
  401f84:	e002      	b.n	401f8c <twihs_master_write+0xa0>
  401f86:	2005      	movs	r0, #5
  401f88:	e000      	b.n	401f8c <twihs_master_write+0xa0>
	}

	while (1) {
		status = p_twihs->TWIHS_SR;
		if (status & TWIHS_SR_NACK) {
			return TWIHS_RECEIVE_NACK;
  401f8a:	2005      	movs	r0, #5

	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
	}

	return TWIHS_SUCCESS;
}
  401f8c:	bc70      	pop	{r4, r5, r6}
  401f8e:	4770      	bx	lr

00401f90 <wdt_restart>:
/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
	if (p_wdt == WDT) {
  401f90:	4b02      	ldr	r3, [pc, #8]	; (401f9c <wdt_restart+0xc>)
  401f92:	4298      	cmp	r0, r3
  401f94:	d101      	bne.n	401f9a <wdt_restart+0xa>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
  401f96:	4a02      	ldr	r2, [pc, #8]	; (401fa0 <wdt_restart+0x10>)
  401f98:	601a      	str	r2, [r3, #0]
  401f9a:	4770      	bx	lr
  401f9c:	400e1850 	.word	0x400e1850
  401fa0:	a5000001 	.word	0xa5000001

00401fa4 <tinkerPwmInit>:
 // TINKER_PWM_1 -> PWM0 -> PA0 -> PWMC0_PWMH0
 // TINKER_PWM_2 -> PWM0 -> PA2 -> PWMC0_PWMH1
 // TINKER_PWM_3 -> PWM0 -> PA13 -> PWMC0_PWMH2
 // TINKER_PWM_4 -> PWM0 -> PA7 -> PWMC0_PWMH7

 void tinkerPwmInit(uint32_t pwmId){
  401fa4:	b530      	push	{r4, r5, lr}
  401fa6:	b085      	sub	sp, #20
	
	Pwm* pwm = NULL;
	uint32_t id_pwm = 0;
	uint32_t pwm_channel = 0;

	switch (pwmId) {
  401fa8:	3801      	subs	r0, #1
  401faa:	2803      	cmp	r0, #3
  401fac:	f200 8084 	bhi.w	4020b8 <tinkerPwmInit+0x114>
  401fb0:	e8df f000 	tbb	[pc, r0]
  401fb4:	4b321a02 	.word	0x4b321a02
		case TINKER_PWM_1:
			pwm = PWM0;
			id_pwm = ID_PWM0;
			pwm_channel = PWM_CHANNEL_0;
			pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401fb8:	4b40      	ldr	r3, [pc, #256]	; (4020bc <tinkerPwmInit+0x118>)
  401fba:	220b      	movs	r2, #11
  401fbc:	605a      	str	r2, [r3, #4]
			pwm_channel_instance.b_pwmh_output_inverted = false;
  401fbe:	2400      	movs	r4, #0
  401fc0:	75dc      	strb	r4, [r3, #23]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401fc2:	4b3f      	ldr	r3, [pc, #252]	; (4020c0 <tinkerPwmInit+0x11c>)
  401fc4:	2201      	movs	r2, #1
  401fc6:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401fc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401fcc:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401fce:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  401fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  401fd4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  401fd6:	f021 0101 	bic.w	r1, r1, #1
  401fda:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  401fdc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401fde:	f021 0101 	bic.w	r1, r1, #1
  401fe2:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  401fe4:	605a      	str	r2, [r3, #4]
  401fe6:	e047      	b.n	402078 <tinkerPwmInit+0xd4>
			break;
		case TINKER_PWM_2:
			pwm = PWM0;
			id_pwm = ID_PWM0;
			pwm_channel = PWM_CHANNEL_1;
			pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
  401fe8:	4b34      	ldr	r3, [pc, #208]	; (4020bc <tinkerPwmInit+0x118>)
  401fea:	220b      	movs	r2, #11
  401fec:	605a      	str	r2, [r3, #4]
			pwm_channel_instance.b_pwmh_output_inverted = true;
  401fee:	2401      	movs	r4, #1
  401ff0:	75dc      	strb	r4, [r3, #23]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  401ff2:	4b33      	ldr	r3, [pc, #204]	; (4020c0 <tinkerPwmInit+0x11c>)
  401ff4:	2204      	movs	r2, #4
  401ff6:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  401ff8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  401ffc:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  401ffe:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  402004:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402006:	f021 0104 	bic.w	r1, r1, #4
  40200a:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40200c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40200e:	f021 0104 	bic.w	r1, r1, #4
  402012:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402014:	605a      	str	r2, [r3, #4]
  402016:	e02f      	b.n	402078 <tinkerPwmInit+0xd4>
			break;
		case TINKER_PWM_3:
			pwm = PWM0;
			id_pwm = ID_PWM0;
			pwm_channel = PWM_CHANNEL_2;
			pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKB;
  402018:	4b28      	ldr	r3, [pc, #160]	; (4020bc <tinkerPwmInit+0x118>)
  40201a:	220c      	movs	r2, #12
  40201c:	605a      	str	r2, [r3, #4]
			pwm_channel_instance.b_pwmh_output_inverted = true;
  40201e:	2201      	movs	r2, #1
  402020:	75da      	strb	r2, [r3, #23]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402022:	4b27      	ldr	r3, [pc, #156]	; (4020c0 <tinkerPwmInit+0x11c>)
  402024:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402028:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40202a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40202e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402030:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  402036:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402038:	4311      	orrs	r1, r2
  40203a:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40203c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40203e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  402042:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402044:	605a      	str	r2, [r3, #4]
			ioport_disable_pin(PIO_PA2_IDX);
			break;
		case TINKER_PWM_3:
			pwm = PWM0;
			id_pwm = ID_PWM0;
			pwm_channel = PWM_CHANNEL_2;
  402046:	2402      	movs	r4, #2
  402048:	e016      	b.n	402078 <tinkerPwmInit+0xd4>
			break;
		case TINKER_PWM_4:
			pwm = PWM0;
			id_pwm = ID_PWM0;
			pwm_channel = PWM_CHANNEL_3;
			pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKB;
  40204a:	4b1c      	ldr	r3, [pc, #112]	; (4020bc <tinkerPwmInit+0x118>)
  40204c:	220c      	movs	r2, #12
  40204e:	605a      	str	r2, [r3, #4]
			pwm_channel_instance.b_pwmh_output_inverted = true;
  402050:	2201      	movs	r2, #1
  402052:	75da      	strb	r2, [r3, #23]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  402054:	4b1a      	ldr	r3, [pc, #104]	; (4020c0 <tinkerPwmInit+0x11c>)
  402056:	2280      	movs	r2, #128	; 0x80
  402058:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  40205a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40205e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  402060:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  402062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
  402066:	6f19      	ldr	r1, [r3, #112]	; 0x70
  402068:	4311      	orrs	r1, r2
  40206a:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40206c:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40206e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  402072:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  402074:	605a      	str	r2, [r3, #4]
			ioport_disable_pin(PIO_PA13_IDX);
			break;
		case TINKER_PWM_4:
			pwm = PWM0;
			id_pwm = ID_PWM0;
			pwm_channel = PWM_CHANNEL_3;
  402076:	2403      	movs	r4, #3
			ioport_disable_pin(PIO_PA7_IDX);
			break;
		default:
			return;
	}
	pmc_enable_periph_clk(id_pwm);
  402078:	201f      	movs	r0, #31
  40207a:	4b12      	ldr	r3, [pc, #72]	; (4020c4 <tinkerPwmInit+0x120>)
  40207c:	4798      	blx	r3
	pwm_channel_disable(pwm, pwm_channel);
  40207e:	4d12      	ldr	r5, [pc, #72]	; (4020c8 <tinkerPwmInit+0x124>)
  402080:	4621      	mov	r1, r4
  402082:	4628      	mov	r0, r5
  402084:	4b11      	ldr	r3, [pc, #68]	; (4020cc <tinkerPwmInit+0x128>)
  402086:	4798      	blx	r3

	pwm_clock_t clock_setting = {
  402088:	4b11      	ldr	r3, [pc, #68]	; (4020d0 <tinkerPwmInit+0x12c>)
  40208a:	9301      	str	r3, [sp, #4]
  40208c:	9302      	str	r3, [sp, #8]
  40208e:	4b11      	ldr	r3, [pc, #68]	; (4020d4 <tinkerPwmInit+0x130>)
  402090:	9303      	str	r3, [sp, #12]
		.ul_clka = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_clkb = PWM_FREQUENCY * PERIOD_VALUE,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(pwm, &clock_setting);
  402092:	a901      	add	r1, sp, #4
  402094:	4628      	mov	r0, r5
  402096:	4b10      	ldr	r3, [pc, #64]	; (4020d8 <tinkerPwmInit+0x134>)
  402098:	4798      	blx	r3

	//--
	
	pwm_channel_instance.ul_period = PERIOD_VALUE;
  40209a:	4908      	ldr	r1, [pc, #32]	; (4020bc <tinkerPwmInit+0x118>)
  40209c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4020a0:	610b      	str	r3, [r1, #16]
	pwm_channel_instance.ul_duty = 0;
  4020a2:	2300      	movs	r3, #0
  4020a4:	60cb      	str	r3, [r1, #12]
	pwm_channel_instance.channel = pwm_channel;
  4020a6:	600c      	str	r4, [r1, #0]
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;
  4020a8:	810b      	strh	r3, [r1, #8]
	
	
	pwm_channel_init(pwm, &pwm_channel_instance);
  4020aa:	4628      	mov	r0, r5
  4020ac:	4b0b      	ldr	r3, [pc, #44]	; (4020dc <tinkerPwmInit+0x138>)
  4020ae:	4798      	blx	r3

	//--
	pwm_channel_enable(pwm, pwm_channel);
  4020b0:	4621      	mov	r1, r4
  4020b2:	4628      	mov	r0, r5
  4020b4:	4b0a      	ldr	r3, [pc, #40]	; (4020e0 <tinkerPwmInit+0x13c>)
  4020b6:	4798      	blx	r3

 }
  4020b8:	b005      	add	sp, #20
  4020ba:	bd30      	pop	{r4, r5, pc}
  4020bc:	204007c8 	.word	0x204007c8
  4020c0:	400e0e00 	.word	0x400e0e00
  4020c4:	004027d5 	.word	0x004027d5
  4020c8:	40020000 	.word	0x40020000
  4020cc:	00402a39 	.word	0x00402a39
  4020d0:	00061a80 	.word	0x00061a80
  4020d4:	11e1a300 	.word	0x11e1a300
  4020d8:	0040287d 	.word	0x0040287d
  4020dc:	004028c9 	.word	0x004028c9
  4020e0:	00402a2d 	.word	0x00402a2d

004020e4 <tinkerPwmWrite>:

 void tinkerPwmWrite(uint32_t pwmId, uint32_t duty){
  4020e4:	b570      	push	{r4, r5, r6, lr}
	Pwm* pwm = NULL;
	uint32_t id_pwm = 0;
	uint32_t pwm_channel = 0;

	 switch (pwmId) {
  4020e6:	3801      	subs	r0, #1
  4020e8:	2803      	cmp	r0, #3
  4020ea:	d81a      	bhi.n	402122 <tinkerPwmWrite+0x3e>
  4020ec:	e8df f000 	tbb	[pc, r0]
  4020f0:	06040208 	.word	0x06040208
			 pwm_channel = PWM_CHANNEL_0;
			 break;
		 case TINKER_PWM_2:
			 pwm = PWM0; //PWM0 ok
			 id_pwm = ID_PWM0;
			 pwm_channel = PWM_CHANNEL_1;
  4020f4:	2501      	movs	r5, #1
  4020f6:	e004      	b.n	402102 <tinkerPwmWrite+0x1e>
			 break;
		 case TINKER_PWM_3:
			 pwm = PWM0;
			 id_pwm = ID_PWM0;
			 pwm_channel = PWM_CHANNEL_2;
  4020f8:	2502      	movs	r5, #2
			 break;
  4020fa:	e002      	b.n	402102 <tinkerPwmWrite+0x1e>
		 case TINKER_PWM_4:
			 pwm = PWM0;
			 id_pwm = ID_PWM0;
			 pwm_channel = PWM_CHANNEL_3;
  4020fc:	2503      	movs	r5, #3
			 break;
  4020fe:	e000      	b.n	402102 <tinkerPwmWrite+0x1e>

	 switch (pwmId) {
		 case TINKER_PWM_1:
			 pwm = PWM0;
			 id_pwm = ID_PWM0;
			 pwm_channel = PWM_CHANNEL_0;
  402100:	2500      	movs	r5, #0
  402102:	460c      	mov	r4, r1
			 break;
		 default:
			return;
	 }

	 pwm_channel_disable(pwm, pwm_channel);
  402104:	4e07      	ldr	r6, [pc, #28]	; (402124 <tinkerPwmWrite+0x40>)
  402106:	4629      	mov	r1, r5
  402108:	4630      	mov	r0, r6
  40210a:	4b07      	ldr	r3, [pc, #28]	; (402128 <tinkerPwmWrite+0x44>)
  40210c:	4798      	blx	r3

	 //--
	 pwm_channel_instance.ul_duty = duty;
  40210e:	4907      	ldr	r1, [pc, #28]	; (40212c <tinkerPwmWrite+0x48>)
  402110:	60cc      	str	r4, [r1, #12]
	 pwm_channel_instance.channel = pwm_channel;	 
  402112:	600d      	str	r5, [r1, #0]
	 pwm_channel_init(pwm, &pwm_channel_instance);
  402114:	4630      	mov	r0, r6
  402116:	4b06      	ldr	r3, [pc, #24]	; (402130 <tinkerPwmWrite+0x4c>)
  402118:	4798      	blx	r3

	
	 //--
	 pwm_channel_enable(pwm, pwm_channel);
  40211a:	4629      	mov	r1, r5
  40211c:	4630      	mov	r0, r6
  40211e:	4b05      	ldr	r3, [pc, #20]	; (402134 <tinkerPwmWrite+0x50>)
  402120:	4798      	blx	r3
  402122:	bd70      	pop	{r4, r5, r6, pc}
  402124:	40020000 	.word	0x40020000
  402128:	00402a39 	.word	0x00402a39
  40212c:	204007c8 	.word	0x204007c8
  402130:	004028c9 	.word	0x004028c9
  402134:	00402a2d 	.word	0x00402a2d

00402138 <tinkerUartInit>:

 //----------------------------------------------------
 //-- UART
 //----------------------------------------------------

 void tinkerUartInit(uint32_t uartId){
  402138:	b530      	push	{r4, r5, lr}
  40213a:	b085      	sub	sp, #20
	//ioport_disable_pin(PIO_PA10_IDX);
	//ioport_set_pin_mode(PIO_PA9_IDX, IOPORT_MODE_MUX_A);'
	//ioport_disable_pin(PIO_PA9_IDX);

	sam_uart_opt_t usart_settings;
	usart_settings.ul_mck = sysclk_get_peripheral_hz(); //sysclk_get_cpu_hz();//
  40213c:	4b0f      	ldr	r3, [pc, #60]	; (40217c <tinkerUartInit+0x44>)
  40213e:	9301      	str	r3, [sp, #4]
	usart_settings.ul_baudrate = TINKER_UART_BAUDE;
  402140:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402144:	9302      	str	r3, [sp, #8]
	usart_settings.ul_mode = 0	| UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;//  UART_MR_BRSRCCK_PERIPH_CLK ;
  402146:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40214a:	9303      	str	r3, [sp, #12]

	switch (uartId) {
  40214c:	b9a0      	cbnz	r0, 402178 <tinkerUartInit+0x40>
		case TINKER_UART_0:
			pmc_enable_periph_clk(ID_UART0);
  40214e:	2007      	movs	r0, #7
  402150:	4b0b      	ldr	r3, [pc, #44]	; (402180 <tinkerUartInit+0x48>)
  402152:	4798      	blx	r3
			pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA10);
  402154:	4d0b      	ldr	r5, [pc, #44]	; (402184 <tinkerUartInit+0x4c>)
  402156:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40215a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40215e:	4628      	mov	r0, r5
  402160:	4c09      	ldr	r4, [pc, #36]	; (402188 <tinkerUartInit+0x50>)
  402162:	47a0      	blx	r4
			pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA9);
  402164:	f44f 7200 	mov.w	r2, #512	; 0x200
  402168:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40216c:	4628      	mov	r0, r5
  40216e:	47a0      	blx	r4
			uart_init((Uart*)UART0, &usart_settings);
  402170:	a901      	add	r1, sp, #4
  402172:	4806      	ldr	r0, [pc, #24]	; (40218c <tinkerUartInit+0x54>)
  402174:	4b06      	ldr	r3, [pc, #24]	; (402190 <tinkerUartInit+0x58>)
  402176:	4798      	blx	r3
	////stdio_serial_init((Uart*)UART0, &usart_settings);
	//
	////--
	////uart_enable_rx(UART0);
	////uart_enable_tx(UART0);
 }
  402178:	b005      	add	sp, #20
  40217a:	bd30      	pop	{r4, r5, pc}
  40217c:	08f0d180 	.word	0x08f0d180
  402180:	004027d5 	.word	0x004027d5
  402184:	400e0e00 	.word	0x400e0e00
  402188:	00402481 	.word	0x00402481
  40218c:	400e0800 	.word	0x400e0800
  402190:	00402a45 	.word	0x00402a45

00402194 <tinkerUartGetChar>:

 void tinkerUartGetChar(uint32_t uartId, uint8_t* data){
  402194:	b570      	push	{r4, r5, r6, lr}
  402196:	460c      	mov	r4, r1
	switch (uartId) {
  402198:	2803      	cmp	r0, #3
  40219a:	d822      	bhi.n	4021e2 <tinkerUartGetChar+0x4e>
  40219c:	e8df f000 	tbb	[pc, r0]
  4021a0:	1a120a02 	.word	0x1a120a02
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
  4021a4:	4e0f      	ldr	r6, [pc, #60]	; (4021e4 <tinkerUartGetChar+0x50>)
  4021a6:	4d10      	ldr	r5, [pc, #64]	; (4021e8 <tinkerUartGetChar+0x54>)
  4021a8:	4621      	mov	r1, r4
  4021aa:	4630      	mov	r0, r6
  4021ac:	47a8      	blx	r5
  4021ae:	2800      	cmp	r0, #0
  4021b0:	d1fa      	bne.n	4021a8 <tinkerUartGetChar+0x14>
  4021b2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
  4021b4:	4e0d      	ldr	r6, [pc, #52]	; (4021ec <tinkerUartGetChar+0x58>)
  4021b6:	4d0c      	ldr	r5, [pc, #48]	; (4021e8 <tinkerUartGetChar+0x54>)
  4021b8:	4621      	mov	r1, r4
  4021ba:	4630      	mov	r0, r6
  4021bc:	47a8      	blx	r5
  4021be:	2800      	cmp	r0, #0
  4021c0:	d1fa      	bne.n	4021b8 <tinkerUartGetChar+0x24>
  4021c2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
  4021c4:	4e0a      	ldr	r6, [pc, #40]	; (4021f0 <tinkerUartGetChar+0x5c>)
  4021c6:	4d08      	ldr	r5, [pc, #32]	; (4021e8 <tinkerUartGetChar+0x54>)
  4021c8:	4621      	mov	r1, r4
  4021ca:	4630      	mov	r0, r6
  4021cc:	47a8      	blx	r5
  4021ce:	2800      	cmp	r0, #0
  4021d0:	d1fa      	bne.n	4021c8 <tinkerUartGetChar+0x34>
  4021d2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
  4021d4:	4e07      	ldr	r6, [pc, #28]	; (4021f4 <tinkerUartGetChar+0x60>)
  4021d6:	4d04      	ldr	r5, [pc, #16]	; (4021e8 <tinkerUartGetChar+0x54>)
  4021d8:	4621      	mov	r1, r4
  4021da:	4630      	mov	r0, r6
  4021dc:	47a8      	blx	r5
  4021de:	2800      	cmp	r0, #0
  4021e0:	d1fa      	bne.n	4021d8 <tinkerUartGetChar+0x44>
  4021e2:	bd70      	pop	{r4, r5, r6, pc}
  4021e4:	400e0800 	.word	0x400e0800
  4021e8:	00402a95 	.word	0x00402a95
  4021ec:	400e0a00 	.word	0x400e0a00
  4021f0:	400e1a00 	.word	0x400e1a00
  4021f4:	400e1c00 	.word	0x400e1c00

004021f8 <tinkerUartPutChar>:
		default:
			return;
	}
 }

 void tinkerUartPutChar(uint32_t uartId, const uint8_t c){
  4021f8:	b570      	push	{r4, r5, r6, lr}
  4021fa:	460c      	mov	r4, r1
	switch (uartId) {
  4021fc:	2803      	cmp	r0, #3
  4021fe:	d822      	bhi.n	402246 <tinkerUartPutChar+0x4e>
  402200:	e8df f000 	tbb	[pc, r0]
  402204:	1a120a02 	.word	0x1a120a02
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
  402208:	4e0f      	ldr	r6, [pc, #60]	; (402248 <tinkerUartPutChar+0x50>)
  40220a:	4d10      	ldr	r5, [pc, #64]	; (40224c <tinkerUartPutChar+0x54>)
  40220c:	4621      	mov	r1, r4
  40220e:	4630      	mov	r0, r6
  402210:	47a8      	blx	r5
  402212:	2800      	cmp	r0, #0
  402214:	d1fa      	bne.n	40220c <tinkerUartPutChar+0x14>
  402216:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
  402218:	4e0d      	ldr	r6, [pc, #52]	; (402250 <tinkerUartPutChar+0x58>)
  40221a:	4d0c      	ldr	r5, [pc, #48]	; (40224c <tinkerUartPutChar+0x54>)
  40221c:	4621      	mov	r1, r4
  40221e:	4630      	mov	r0, r6
  402220:	47a8      	blx	r5
  402222:	2800      	cmp	r0, #0
  402224:	d1fa      	bne.n	40221c <tinkerUartPutChar+0x24>
  402226:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
  402228:	4e0a      	ldr	r6, [pc, #40]	; (402254 <tinkerUartPutChar+0x5c>)
  40222a:	4d08      	ldr	r5, [pc, #32]	; (40224c <tinkerUartPutChar+0x54>)
  40222c:	4621      	mov	r1, r4
  40222e:	4630      	mov	r0, r6
  402230:	47a8      	blx	r5
  402232:	2800      	cmp	r0, #0
  402234:	d1fa      	bne.n	40222c <tinkerUartPutChar+0x34>
  402236:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
  402238:	4e07      	ldr	r6, [pc, #28]	; (402258 <tinkerUartPutChar+0x60>)
  40223a:	4d04      	ldr	r5, [pc, #16]	; (40224c <tinkerUartPutChar+0x54>)
  40223c:	4621      	mov	r1, r4
  40223e:	4630      	mov	r0, r6
  402240:	47a8      	blx	r5
  402242:	2800      	cmp	r0, #0
  402244:	d1fa      	bne.n	40223c <tinkerUartPutChar+0x44>
  402246:	bd70      	pop	{r4, r5, r6, pc}
  402248:	400e0800 	.word	0x400e0800
  40224c:	00402a81 	.word	0x00402a81
  402250:	400e0a00 	.word	0x400e0a00
  402254:	400e1a00 	.word	0x400e1a00
  402258:	400e1c00 	.word	0x400e1c00

0040225c <tinkerUartPutBuffer>:
	}
	
 }

 void tinkerUartPutBuffer(uint32_t uartId, const uint8_t *c, size_t size){
	while (size--) {
  40225c:	b15a      	cbz	r2, 402276 <tinkerUartPutBuffer+0x1a>
		return;
	}
	
 }

 void tinkerUartPutBuffer(uint32_t uartId, const uint8_t *c, size_t size){
  40225e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402260:	4606      	mov	r6, r0
  402262:	460d      	mov	r5, r1
  402264:	4614      	mov	r4, r2
	while (size--) {
		tinkerUartPutChar(uartId,*c++);
  402266:	4f04      	ldr	r7, [pc, #16]	; (402278 <tinkerUartPutBuffer+0x1c>)
  402268:	f815 1b01 	ldrb.w	r1, [r5], #1
  40226c:	4630      	mov	r0, r6
  40226e:	47b8      	blx	r7
	}
	
 }

 void tinkerUartPutBuffer(uint32_t uartId, const uint8_t *c, size_t size){
	while (size--) {
  402270:	3c01      	subs	r4, #1
  402272:	d1f9      	bne.n	402268 <tinkerUartPutBuffer+0xc>
  402274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402276:	4770      	bx	lr
  402278:	004021f9 	.word	0x004021f9

0040227c <tinkerUartPutString>:
		//usart_serial_putchar((Uart*)UART0, c[i]);
	//}
 }

  void tinkerUartPutString(uint32_t uartId, const char *str){
	  if (str == NULL) return;
  40227c:	b159      	cbz	r1, 402296 <tinkerUartPutString+0x1a>
	//for(int i=0; i<size; i++){
		//usart_serial_putchar((Uart*)UART0, c[i]);
	//}
 }

  void tinkerUartPutString(uint32_t uartId, const char *str){
  40227e:	b538      	push	{r3, r4, r5, lr}
  402280:	460c      	mov	r4, r1
  402282:	4605      	mov	r5, r0
	  if (str == NULL) return;
	  return tinkerUartPutBuffer(uartId, (const uint8_t *)str, strlen(str));
  402284:	4608      	mov	r0, r1
  402286:	4b04      	ldr	r3, [pc, #16]	; (402298 <tinkerUartPutString+0x1c>)
  402288:	4798      	blx	r3
  40228a:	4602      	mov	r2, r0
  40228c:	4621      	mov	r1, r4
  40228e:	4628      	mov	r0, r5
  402290:	4b02      	ldr	r3, [pc, #8]	; (40229c <tinkerUartPutString+0x20>)
  402292:	4798      	blx	r3
  402294:	bd38      	pop	{r3, r4, r5, pc}
  402296:	4770      	bx	lr
  402298:	00404381 	.word	0x00404381
  40229c:	0040225d 	.word	0x0040225d

004022a0 <tinkerInitI2C>:

 static twihs_package_t twihs1_packet_read;
 static twihs_package_t twihs1_packet_write;

 uint32_t tinkerInitI2C(uint8_t chip)
 {	
  4022a0:	b530      	push	{r4, r5, lr}
  4022a2:	b085      	sub	sp, #20
  4022a4:	4604      	mov	r4, r0
	
	//pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PB5);
	//pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PB4);

	 gpio_configure_pin(PIO_PB4_IDX, PIO_PERIPH_A | PIO_DEFAULT);   // TWI1 data
  4022a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4022aa:	2024      	movs	r0, #36	; 0x24
  4022ac:	4d14      	ldr	r5, [pc, #80]	; (402300 <tinkerInitI2C+0x60>)
  4022ae:	47a8      	blx	r5
	 gpio_configure_pin(PIO_PB5_IDX, PIO_PERIPH_A | PIO_DEFAULT);   // TWI1 clock
  4022b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4022b4:	2025      	movs	r0, #37	; 0x25
  4022b6:	47a8      	blx	r5

	 pmc_enable_periph_clk(ID_TWIHS1);
  4022b8:	2014      	movs	r0, #20
  4022ba:	4d12      	ldr	r5, [pc, #72]	; (402304 <tinkerInitI2C+0x64>)
  4022bc:	47a8      	blx	r5

	 // disable JTAG
	 MATRIX->CCFG_SYSIO |= (1 << 4) | (1 << 5);
  4022be:	4a12      	ldr	r2, [pc, #72]	; (402308 <tinkerInitI2C+0x68>)
  4022c0:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4022c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  4022c8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

	 twihs_master_options_t opt = {
  4022cc:	2300      	movs	r3, #0
  4022ce:	9303      	str	r3, [sp, #12]
  4022d0:	4b0e      	ldr	r3, [pc, #56]	; (40230c <tinkerInitI2C+0x6c>)
  4022d2:	9302      	str	r3, [sp, #8]
  4022d4:	f88d 400c 	strb.w	r4, [sp, #12]
		 .speed = 400000,
		 .chip  = chip //not used...
	 };

	 twihs1_packet_read.chip = chip;
  4022d8:	4a0d      	ldr	r2, [pc, #52]	; (402310 <tinkerInitI2C+0x70>)
  4022da:	7414      	strb	r4, [r2, #16]
	 twihs1_packet_read.addr_length  = 1;    // TWIHS slave memory address data size
  4022dc:	2301      	movs	r3, #1
  4022de:	6053      	str	r3, [r2, #4]
	 twihs1_packet_read.length       = 1 ;                   // transfer data size (bytes)
  4022e0:	60d3      	str	r3, [r2, #12]

	 twihs1_packet_write.chip = chip;
  4022e2:	4a0c      	ldr	r2, [pc, #48]	; (402314 <tinkerInitI2C+0x74>)
  4022e4:	7414      	strb	r4, [r2, #16]
	 twihs1_packet_write.addr_length  = 1;    // TWIHS slave memory address data size
  4022e6:	6053      	str	r3, [r2, #4]
	 twihs1_packet_write.length       = 1 ;                   // transfer data size (bytes)
  4022e8:	60d3      	str	r3, [r2, #12]
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  4022ea:	4b0b      	ldr	r3, [pc, #44]	; (402318 <tinkerInitI2C+0x78>)
  4022ec:	9301      	str	r3, [sp, #4]
  4022ee:	2014      	movs	r0, #20
  4022f0:	47a8      	blx	r5
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  4022f2:	a901      	add	r1, sp, #4
  4022f4:	4809      	ldr	r0, [pc, #36]	; (40231c <tinkerInitI2C+0x7c>)
  4022f6:	4b0a      	ldr	r3, [pc, #40]	; (402320 <tinkerInitI2C+0x80>)
  4022f8:	4798      	blx	r3

	 return twihs_master_setup(TWIHS1, &opt);
 }
  4022fa:	b005      	add	sp, #20
  4022fc:	bd30      	pop	{r4, r5, pc}
  4022fe:	bf00      	nop
  402300:	00402579 	.word	0x00402579
  402304:	004027d5 	.word	0x004027d5
  402308:	40088000 	.word	0x40088000
  40230c:	00061a80 	.word	0x00061a80
  402310:	20400804 	.word	0x20400804
  402314:	204007b4 	.word	0x204007b4
  402318:	08f0d180 	.word	0x08f0d180
  40231c:	4001c000 	.word	0x4001c000
  402320:	00401e05 	.word	0x00401e05

00402324 <tinkerReadI2C>:

uint8_t tinkerReadI2C(uint8_t chip, uint8_t reg){
  402324:	b500      	push	{lr}
  402326:	b083      	sub	sp, #12
	uint8_t val = 0;
  402328:	aa02      	add	r2, sp, #8
  40232a:	2300      	movs	r3, #0
  40232c:	f802 3d01 	strb.w	r3, [r2, #-1]!
	twihs1_packet_read.addr[0]         = reg;
  402330:	4b06      	ldr	r3, [pc, #24]	; (40234c <tinkerReadI2C+0x28>)
  402332:	7019      	strb	r1, [r3, #0]
	
	twihs1_packet_read.chip         = chip;     // TWIHS slave bus address
  402334:	7418      	strb	r0, [r3, #16]
	twihs1_packet_read.buffer       = &val;        // transfer data destination buffer
  402336:	609a      	str	r2, [r3, #8]
	
	twihs_master_read(TWIHS1, &twihs1_packet_read);
  402338:	4619      	mov	r1, r3
  40233a:	4805      	ldr	r0, [pc, #20]	; (402350 <tinkerReadI2C+0x2c>)
  40233c:	4b05      	ldr	r3, [pc, #20]	; (402354 <tinkerReadI2C+0x30>)
  40233e:	4798      	blx	r3
	return val;
}
  402340:	f89d 0007 	ldrb.w	r0, [sp, #7]
  402344:	b003      	add	sp, #12
  402346:	f85d fb04 	ldr.w	pc, [sp], #4
  40234a:	bf00      	nop
  40234c:	20400804 	.word	0x20400804
  402350:	4001c000 	.word	0x4001c000
  402354:	00401e39 	.word	0x00401e39

00402358 <tinkerWriteI2C>:
	//twihs1_packet_read.buffer       = &val;        // transfer data destination buffer
	//twihs1_packet_read.length       = 2 ;                   // transfer data size (bytes)
	//twihs_master_read(TWIHS1, &twihs1_packet_read);
//}

uint32_t tinkerWriteI2C(uint8_t chip, uint8_t reg, uint8_t val){
  402358:	b510      	push	{r4, lr}
  40235a:	b082      	sub	sp, #8
  40235c:	ac02      	add	r4, sp, #8
  40235e:	f804 2d01 	strb.w	r2, [r4, #-1]!
	twihs1_packet_write.addr[0]         = reg;
  402362:	4b05      	ldr	r3, [pc, #20]	; (402378 <tinkerWriteI2C+0x20>)
  402364:	7019      	strb	r1, [r3, #0]
	
	twihs1_packet_write.chip         = chip;     // TWIHS slave bus address
  402366:	7418      	strb	r0, [r3, #16]
	twihs1_packet_write.buffer       = &val;        // transfer data destination buffer
  402368:	609c      	str	r4, [r3, #8]
	
	return twihs_master_write(TWIHS1, &twihs1_packet_write);
  40236a:	4619      	mov	r1, r3
  40236c:	4803      	ldr	r0, [pc, #12]	; (40237c <tinkerWriteI2C+0x24>)
  40236e:	4b04      	ldr	r3, [pc, #16]	; (402380 <tinkerWriteI2C+0x28>)
  402370:	4798      	blx	r3
}
  402372:	b002      	add	sp, #8
  402374:	bd10      	pop	{r4, pc}
  402376:	bf00      	nop
  402378:	204007b4 	.word	0x204007b4
  40237c:	4001c000 	.word	0x4001c000
  402380:	00401eed 	.word	0x00401eed

00402384 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402384:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402386:	4810      	ldr	r0, [pc, #64]	; (4023c8 <sysclk_init+0x44>)
  402388:	4b10      	ldr	r3, [pc, #64]	; (4023cc <sysclk_init+0x48>)
  40238a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40238c:	213e      	movs	r1, #62	; 0x3e
  40238e:	2000      	movs	r0, #0
  402390:	4b0f      	ldr	r3, [pc, #60]	; (4023d0 <sysclk_init+0x4c>)
  402392:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402394:	4c0f      	ldr	r4, [pc, #60]	; (4023d4 <sysclk_init+0x50>)
  402396:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402398:	2800      	cmp	r0, #0
  40239a:	d0fc      	beq.n	402396 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40239c:	4b0e      	ldr	r3, [pc, #56]	; (4023d8 <sysclk_init+0x54>)
  40239e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4023a0:	4a0e      	ldr	r2, [pc, #56]	; (4023dc <sysclk_init+0x58>)
  4023a2:	4b0f      	ldr	r3, [pc, #60]	; (4023e0 <sysclk_init+0x5c>)
  4023a4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4023a6:	4c0f      	ldr	r4, [pc, #60]	; (4023e4 <sysclk_init+0x60>)
  4023a8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4023aa:	2800      	cmp	r0, #0
  4023ac:	d0fc      	beq.n	4023a8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4023ae:	2002      	movs	r0, #2
  4023b0:	4b0d      	ldr	r3, [pc, #52]	; (4023e8 <sysclk_init+0x64>)
  4023b2:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4023b4:	2000      	movs	r0, #0
  4023b6:	4b0d      	ldr	r3, [pc, #52]	; (4023ec <sysclk_init+0x68>)
  4023b8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4023ba:	4b0d      	ldr	r3, [pc, #52]	; (4023f0 <sysclk_init+0x6c>)
  4023bc:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4023be:	4802      	ldr	r0, [pc, #8]	; (4023c8 <sysclk_init+0x44>)
  4023c0:	4b02      	ldr	r3, [pc, #8]	; (4023cc <sysclk_init+0x48>)
  4023c2:	4798      	blx	r3
  4023c4:	bd10      	pop	{r4, pc}
  4023c6:	bf00      	nop
  4023c8:	11e1a300 	.word	0x11e1a300
  4023cc:	00402bbd 	.word	0x00402bbd
  4023d0:	00402751 	.word	0x00402751
  4023d4:	004027a5 	.word	0x004027a5
  4023d8:	004027b5 	.word	0x004027b5
  4023dc:	20183f01 	.word	0x20183f01
  4023e0:	400e0600 	.word	0x400e0600
  4023e4:	004027c5 	.word	0x004027c5
  4023e8:	004026ad 	.word	0x004026ad
  4023ec:	004026e9 	.word	0x004026e9
  4023f0:	00402aad 	.word	0x00402aad

004023f4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4023f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4023f8:	4604      	mov	r4, r0
  4023fa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4023fc:	4b0e      	ldr	r3, [pc, #56]	; (402438 <pio_handler_process+0x44>)
  4023fe:	4798      	blx	r3
  402400:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  402402:	4620      	mov	r0, r4
  402404:	4b0d      	ldr	r3, [pc, #52]	; (40243c <pio_handler_process+0x48>)
  402406:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  402408:	4005      	ands	r5, r0
  40240a:	d013      	beq.n	402434 <pio_handler_process+0x40>
  40240c:	4c0c      	ldr	r4, [pc, #48]	; (402440 <pio_handler_process+0x4c>)
  40240e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  402412:	6823      	ldr	r3, [r4, #0]
  402414:	4543      	cmp	r3, r8
  402416:	d108      	bne.n	40242a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  402418:	6861      	ldr	r1, [r4, #4]
  40241a:	4229      	tst	r1, r5
  40241c:	d005      	beq.n	40242a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40241e:	68e3      	ldr	r3, [r4, #12]
  402420:	4640      	mov	r0, r8
  402422:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  402424:	6863      	ldr	r3, [r4, #4]
  402426:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40242a:	42b4      	cmp	r4, r6
  40242c:	d002      	beq.n	402434 <pio_handler_process+0x40>
  40242e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  402430:	2d00      	cmp	r5, #0
  402432:	d1ee      	bne.n	402412 <pio_handler_process+0x1e>
  402434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402438:	00402571 	.word	0x00402571
  40243c:	00402575 	.word	0x00402575
  402440:	20400818 	.word	0x20400818

00402444 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402444:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  402446:	210a      	movs	r1, #10
  402448:	4801      	ldr	r0, [pc, #4]	; (402450 <PIOA_Handler+0xc>)
  40244a:	4b02      	ldr	r3, [pc, #8]	; (402454 <PIOA_Handler+0x10>)
  40244c:	4798      	blx	r3
  40244e:	bd08      	pop	{r3, pc}
  402450:	400e0e00 	.word	0x400e0e00
  402454:	004023f5 	.word	0x004023f5

00402458 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402458:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40245a:	210b      	movs	r1, #11
  40245c:	4801      	ldr	r0, [pc, #4]	; (402464 <PIOB_Handler+0xc>)
  40245e:	4b02      	ldr	r3, [pc, #8]	; (402468 <PIOB_Handler+0x10>)
  402460:	4798      	blx	r3
  402462:	bd08      	pop	{r3, pc}
  402464:	400e1000 	.word	0x400e1000
  402468:	004023f5 	.word	0x004023f5

0040246c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40246c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40246e:	2110      	movs	r1, #16
  402470:	4801      	ldr	r0, [pc, #4]	; (402478 <PIOD_Handler+0xc>)
  402472:	4b02      	ldr	r3, [pc, #8]	; (40247c <PIOD_Handler+0x10>)
  402474:	4798      	blx	r3
  402476:	bd08      	pop	{r3, pc}
  402478:	400e1400 	.word	0x400e1400
  40247c:	004023f5 	.word	0x004023f5

00402480 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402480:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402482:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402486:	d02f      	beq.n	4024e8 <pio_set_peripheral+0x68>
  402488:	d807      	bhi.n	40249a <pio_set_peripheral+0x1a>
  40248a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40248e:	d014      	beq.n	4024ba <pio_set_peripheral+0x3a>
  402490:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402494:	d01e      	beq.n	4024d4 <pio_set_peripheral+0x54>
  402496:	b939      	cbnz	r1, 4024a8 <pio_set_peripheral+0x28>
  402498:	4770      	bx	lr
  40249a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40249e:	d036      	beq.n	40250e <pio_set_peripheral+0x8e>
  4024a0:	d804      	bhi.n	4024ac <pio_set_peripheral+0x2c>
  4024a2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4024a6:	d029      	beq.n	4024fc <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4024a8:	6042      	str	r2, [r0, #4]
  4024aa:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4024ac:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4024b0:	d02d      	beq.n	40250e <pio_set_peripheral+0x8e>
  4024b2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4024b6:	d02a      	beq.n	40250e <pio_set_peripheral+0x8e>
  4024b8:	e7f6      	b.n	4024a8 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4024ba:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024bc:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4024be:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4024c0:	43d3      	mvns	r3, r2
  4024c2:	4021      	ands	r1, r4
  4024c4:	4019      	ands	r1, r3
  4024c6:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4024c8:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4024ca:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4024cc:	4021      	ands	r1, r4
  4024ce:	400b      	ands	r3, r1
  4024d0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4024d2:	e01a      	b.n	40250a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4024d6:	4313      	orrs	r3, r2
  4024d8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4024da:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4024dc:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4024de:	400b      	ands	r3, r1
  4024e0:	ea23 0302 	bic.w	r3, r3, r2
  4024e4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4024e6:	e7df      	b.n	4024a8 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024e8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4024ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4024ec:	400b      	ands	r3, r1
  4024ee:	ea23 0302 	bic.w	r3, r3, r2
  4024f2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4024f4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4024f6:	4313      	orrs	r3, r2
  4024f8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4024fa:	e7d5      	b.n	4024a8 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4024fe:	4313      	orrs	r3, r2
  402500:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402502:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402504:	4313      	orrs	r3, r2
  402506:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402508:	e7ce      	b.n	4024a8 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40250a:	6042      	str	r2, [r0, #4]
}
  40250c:	bc10      	pop	{r4}
  40250e:	4770      	bx	lr

00402510 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402510:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402512:	f012 0f01 	tst.w	r2, #1
  402516:	d001      	beq.n	40251c <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  402518:	6641      	str	r1, [r0, #100]	; 0x64
  40251a:	e000      	b.n	40251e <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40251c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40251e:	f012 0f0a 	tst.w	r2, #10
  402522:	d001      	beq.n	402528 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  402524:	6201      	str	r1, [r0, #32]
  402526:	e000      	b.n	40252a <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402528:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40252a:	f012 0f02 	tst.w	r2, #2
  40252e:	d002      	beq.n	402536 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  402530:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402534:	e004      	b.n	402540 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402536:	f012 0f08 	tst.w	r2, #8
  40253a:	d001      	beq.n	402540 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40253c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402540:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402542:	6001      	str	r1, [r0, #0]
  402544:	4770      	bx	lr
  402546:	bf00      	nop

00402548 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402548:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40254a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40254c:	9c01      	ldr	r4, [sp, #4]
  40254e:	b10c      	cbz	r4, 402554 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402550:	6641      	str	r1, [r0, #100]	; 0x64
  402552:	e000      	b.n	402556 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402554:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402556:	b10b      	cbz	r3, 40255c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  402558:	6501      	str	r1, [r0, #80]	; 0x50
  40255a:	e000      	b.n	40255e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40255c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40255e:	b10a      	cbz	r2, 402564 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402560:	6301      	str	r1, [r0, #48]	; 0x30
  402562:	e000      	b.n	402566 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402564:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402566:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402568:	6001      	str	r1, [r0, #0]
}
  40256a:	bc10      	pop	{r4}
  40256c:	4770      	bx	lr
  40256e:	bf00      	nop

00402570 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402570:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402572:	4770      	bx	lr

00402574 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402574:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402576:	4770      	bx	lr

00402578 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  402578:	b570      	push	{r4, r5, r6, lr}
  40257a:	b082      	sub	sp, #8
  40257c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40257e:	4c47      	ldr	r4, [pc, #284]	; (40269c <pio_configure_pin+0x124>)
  402580:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  402584:	0264      	lsls	r4, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  402586:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40258a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40258e:	d04d      	beq.n	40262c <pio_configure_pin+0xb4>
  402590:	d809      	bhi.n	4025a6 <pio_configure_pin+0x2e>
  402592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  402596:	d023      	beq.n	4025e0 <pio_configure_pin+0x68>
  402598:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40259c:	d033      	beq.n	402606 <pio_configure_pin+0x8e>
  40259e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4025a2:	d177      	bne.n	402694 <pio_configure_pin+0x11c>
  4025a4:	e009      	b.n	4025ba <pio_configure_pin+0x42>
  4025a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4025aa:	d05d      	beq.n	402668 <pio_configure_pin+0xf0>
  4025ac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4025b0:	d05a      	beq.n	402668 <pio_configure_pin+0xf0>
  4025b2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4025b6:	d04c      	beq.n	402652 <pio_configure_pin+0xda>
  4025b8:	e06c      	b.n	402694 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  4025ba:	f000 001f 	and.w	r0, r0, #31
  4025be:	2601      	movs	r6, #1
  4025c0:	4086      	lsls	r6, r0
  4025c2:	4632      	mov	r2, r6
  4025c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4025c8:	4620      	mov	r0, r4
  4025ca:	4b35      	ldr	r3, [pc, #212]	; (4026a0 <pio_configure_pin+0x128>)
  4025cc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4025ce:	f015 0f01 	tst.w	r5, #1
  4025d2:	d002      	beq.n	4025da <pio_configure_pin+0x62>
		p_pio->PIO_PUER = ul_mask;
  4025d4:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4025d6:	2001      	movs	r0, #1
  4025d8:	e05d      	b.n	402696 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4025da:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4025dc:	2001      	movs	r0, #1
  4025de:	e05a      	b.n	402696 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4025e0:	f000 001f 	and.w	r0, r0, #31
  4025e4:	2601      	movs	r6, #1
  4025e6:	4086      	lsls	r6, r0
  4025e8:	4632      	mov	r2, r6
  4025ea:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4025ee:	4620      	mov	r0, r4
  4025f0:	4b2b      	ldr	r3, [pc, #172]	; (4026a0 <pio_configure_pin+0x128>)
  4025f2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4025f4:	f015 0f01 	tst.w	r5, #1
  4025f8:	d002      	beq.n	402600 <pio_configure_pin+0x88>
		p_pio->PIO_PUER = ul_mask;
  4025fa:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  4025fc:	2001      	movs	r0, #1
  4025fe:	e04a      	b.n	402696 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402600:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402602:	2001      	movs	r0, #1
  402604:	e047      	b.n	402696 <pio_configure_pin+0x11e>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  402606:	f000 001f 	and.w	r0, r0, #31
  40260a:	2601      	movs	r6, #1
  40260c:	4086      	lsls	r6, r0
  40260e:	4632      	mov	r2, r6
  402610:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402614:	4620      	mov	r0, r4
  402616:	4b22      	ldr	r3, [pc, #136]	; (4026a0 <pio_configure_pin+0x128>)
  402618:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40261a:	f015 0f01 	tst.w	r5, #1
  40261e:	d002      	beq.n	402626 <pio_configure_pin+0xae>
		p_pio->PIO_PUER = ul_mask;
  402620:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  402622:	2001      	movs	r0, #1
  402624:	e037      	b.n	402696 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402626:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  402628:	2001      	movs	r0, #1
  40262a:	e034      	b.n	402696 <pio_configure_pin+0x11e>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40262c:	f000 001f 	and.w	r0, r0, #31
  402630:	2601      	movs	r6, #1
  402632:	4086      	lsls	r6, r0
  402634:	4632      	mov	r2, r6
  402636:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40263a:	4620      	mov	r0, r4
  40263c:	4b18      	ldr	r3, [pc, #96]	; (4026a0 <pio_configure_pin+0x128>)
  40263e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402640:	f015 0f01 	tst.w	r5, #1
  402644:	d002      	beq.n	40264c <pio_configure_pin+0xd4>
		p_pio->PIO_PUER = ul_mask;
  402646:	6666      	str	r6, [r4, #100]	; 0x64

	default:
		return 0;
	}

	return 1;
  402648:	2001      	movs	r0, #1
  40264a:	e024      	b.n	402696 <pio_configure_pin+0x11e>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40264c:	6626      	str	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40264e:	2001      	movs	r0, #1
  402650:	e021      	b.n	402696 <pio_configure_pin+0x11e>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  402652:	f000 011f 	and.w	r1, r0, #31
  402656:	2601      	movs	r6, #1
  402658:	462a      	mov	r2, r5
  40265a:	fa06 f101 	lsl.w	r1, r6, r1
  40265e:	4620      	mov	r0, r4
  402660:	4b10      	ldr	r3, [pc, #64]	; (4026a4 <pio_configure_pin+0x12c>)
  402662:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  402664:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  402666:	e016      	b.n	402696 <pio_configure_pin+0x11e>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  402668:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  40266c:	f000 011f 	and.w	r1, r0, #31
  402670:	2601      	movs	r6, #1
  402672:	ea05 0306 	and.w	r3, r5, r6
  402676:	9300      	str	r3, [sp, #0]
  402678:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40267c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  402680:	bf14      	ite	ne
  402682:	2200      	movne	r2, #0
  402684:	2201      	moveq	r2, #1
  402686:	fa06 f101 	lsl.w	r1, r6, r1
  40268a:	4620      	mov	r0, r4
  40268c:	4c06      	ldr	r4, [pc, #24]	; (4026a8 <pio_configure_pin+0x130>)
  40268e:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  402690:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  402692:	e000      	b.n	402696 <pio_configure_pin+0x11e>

	default:
		return 0;
  402694:	2000      	movs	r0, #0
	}

	return 1;
}
  402696:	b002      	add	sp, #8
  402698:	bd70      	pop	{r4, r5, r6, pc}
  40269a:	bf00      	nop
  40269c:	00200707 	.word	0x00200707
  4026a0:	00402481 	.word	0x00402481
  4026a4:	00402511 	.word	0x00402511
  4026a8:	00402549 	.word	0x00402549

004026ac <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4026ac:	2803      	cmp	r0, #3
  4026ae:	d007      	beq.n	4026c0 <pmc_mck_set_division+0x14>
  4026b0:	2804      	cmp	r0, #4
  4026b2:	d008      	beq.n	4026c6 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4026b4:	2802      	cmp	r0, #2
  4026b6:	bf0c      	ite	eq
  4026b8:	f44f 7280 	moveq.w	r2, #256	; 0x100
  4026bc:	2200      	movne	r2, #0
  4026be:	e004      	b.n	4026ca <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4026c0:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  4026c4:	e001      	b.n	4026ca <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4026c6:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4026ca:	4906      	ldr	r1, [pc, #24]	; (4026e4 <pmc_mck_set_division+0x38>)
  4026cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4026ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4026d2:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4026d4:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4026d6:	460a      	mov	r2, r1
  4026d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4026da:	f013 0f08 	tst.w	r3, #8
  4026de:	d0fb      	beq.n	4026d8 <pmc_mck_set_division+0x2c>
}
  4026e0:	4770      	bx	lr
  4026e2:	bf00      	nop
  4026e4:	400e0600 	.word	0x400e0600

004026e8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4026e8:	4a18      	ldr	r2, [pc, #96]	; (40274c <pmc_switch_mck_to_pllack+0x64>)
  4026ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4026f0:	4318      	orrs	r0, r3
  4026f2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4026f6:	f013 0f08 	tst.w	r3, #8
  4026fa:	d003      	beq.n	402704 <pmc_switch_mck_to_pllack+0x1c>
  4026fc:	e009      	b.n	402712 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4026fe:	3b01      	subs	r3, #1
  402700:	d103      	bne.n	40270a <pmc_switch_mck_to_pllack+0x22>
  402702:	e01e      	b.n	402742 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402708:	4910      	ldr	r1, [pc, #64]	; (40274c <pmc_switch_mck_to_pllack+0x64>)
  40270a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40270c:	f012 0f08 	tst.w	r2, #8
  402710:	d0f5      	beq.n	4026fe <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402712:	4a0e      	ldr	r2, [pc, #56]	; (40274c <pmc_switch_mck_to_pllack+0x64>)
  402714:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402716:	f023 0303 	bic.w	r3, r3, #3
  40271a:	f043 0302 	orr.w	r3, r3, #2
  40271e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402720:	6e90      	ldr	r0, [r2, #104]	; 0x68
  402722:	f010 0008 	ands.w	r0, r0, #8
  402726:	d004      	beq.n	402732 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402728:	2000      	movs	r0, #0
  40272a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40272c:	3b01      	subs	r3, #1
  40272e:	d103      	bne.n	402738 <pmc_switch_mck_to_pllack+0x50>
  402730:	e009      	b.n	402746 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  402736:	4905      	ldr	r1, [pc, #20]	; (40274c <pmc_switch_mck_to_pllack+0x64>)
  402738:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40273a:	f012 0f08 	tst.w	r2, #8
  40273e:	d0f5      	beq.n	40272c <pmc_switch_mck_to_pllack+0x44>
  402740:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402742:	2001      	movs	r0, #1
  402744:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402746:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402748:	4770      	bx	lr
  40274a:	bf00      	nop
  40274c:	400e0600 	.word	0x400e0600

00402750 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402750:	b138      	cbz	r0, 402762 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402752:	490e      	ldr	r1, [pc, #56]	; (40278c <pmc_switch_mainck_to_xtal+0x3c>)
  402754:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402756:	4a0e      	ldr	r2, [pc, #56]	; (402790 <pmc_switch_mainck_to_xtal+0x40>)
  402758:	401a      	ands	r2, r3
  40275a:	4b0e      	ldr	r3, [pc, #56]	; (402794 <pmc_switch_mainck_to_xtal+0x44>)
  40275c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40275e:	620b      	str	r3, [r1, #32]
  402760:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402762:	480a      	ldr	r0, [pc, #40]	; (40278c <pmc_switch_mainck_to_xtal+0x3c>)
  402764:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402766:	0209      	lsls	r1, r1, #8
  402768:	b289      	uxth	r1, r1
  40276a:	4a0b      	ldr	r2, [pc, #44]	; (402798 <pmc_switch_mainck_to_xtal+0x48>)
  40276c:	401a      	ands	r2, r3
  40276e:	4b0b      	ldr	r3, [pc, #44]	; (40279c <pmc_switch_mainck_to_xtal+0x4c>)
  402770:	4313      	orrs	r3, r2
  402772:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402774:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402776:	4602      	mov	r2, r0
  402778:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40277a:	f013 0f01 	tst.w	r3, #1
  40277e:	d0fb      	beq.n	402778 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402780:	4a02      	ldr	r2, [pc, #8]	; (40278c <pmc_switch_mainck_to_xtal+0x3c>)
  402782:	6a11      	ldr	r1, [r2, #32]
  402784:	4b06      	ldr	r3, [pc, #24]	; (4027a0 <pmc_switch_mainck_to_xtal+0x50>)
  402786:	430b      	orrs	r3, r1
  402788:	6213      	str	r3, [r2, #32]
  40278a:	4770      	bx	lr
  40278c:	400e0600 	.word	0x400e0600
  402790:	fec8fffc 	.word	0xfec8fffc
  402794:	01370002 	.word	0x01370002
  402798:	ffc8fffc 	.word	0xffc8fffc
  40279c:	00370001 	.word	0x00370001
  4027a0:	01370000 	.word	0x01370000

004027a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4027a4:	4b02      	ldr	r3, [pc, #8]	; (4027b0 <pmc_osc_is_ready_mainck+0xc>)
  4027a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4027a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4027ac:	4770      	bx	lr
  4027ae:	bf00      	nop
  4027b0:	400e0600 	.word	0x400e0600

004027b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4027b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4027b8:	4b01      	ldr	r3, [pc, #4]	; (4027c0 <pmc_disable_pllack+0xc>)
  4027ba:	629a      	str	r2, [r3, #40]	; 0x28
  4027bc:	4770      	bx	lr
  4027be:	bf00      	nop
  4027c0:	400e0600 	.word	0x400e0600

004027c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4027c4:	4b02      	ldr	r3, [pc, #8]	; (4027d0 <pmc_is_locked_pllack+0xc>)
  4027c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4027c8:	f000 0002 	and.w	r0, r0, #2
  4027cc:	4770      	bx	lr
  4027ce:	bf00      	nop
  4027d0:	400e0600 	.word	0x400e0600

004027d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4027d4:	283f      	cmp	r0, #63	; 0x3f
  4027d6:	d81e      	bhi.n	402816 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4027d8:	281f      	cmp	r0, #31
  4027da:	d80c      	bhi.n	4027f6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4027dc:	4b11      	ldr	r3, [pc, #68]	; (402824 <pmc_enable_periph_clk+0x50>)
  4027de:	699a      	ldr	r2, [r3, #24]
  4027e0:	2301      	movs	r3, #1
  4027e2:	4083      	lsls	r3, r0
  4027e4:	4393      	bics	r3, r2
  4027e6:	d018      	beq.n	40281a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4027e8:	2301      	movs	r3, #1
  4027ea:	fa03 f000 	lsl.w	r0, r3, r0
  4027ee:	4b0d      	ldr	r3, [pc, #52]	; (402824 <pmc_enable_periph_clk+0x50>)
  4027f0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4027f2:	2000      	movs	r0, #0
  4027f4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4027f6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4027f8:	4b0a      	ldr	r3, [pc, #40]	; (402824 <pmc_enable_periph_clk+0x50>)
  4027fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4027fe:	2301      	movs	r3, #1
  402800:	4083      	lsls	r3, r0
  402802:	4393      	bics	r3, r2
  402804:	d00b      	beq.n	40281e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402806:	2301      	movs	r3, #1
  402808:	fa03 f000 	lsl.w	r0, r3, r0
  40280c:	4b05      	ldr	r3, [pc, #20]	; (402824 <pmc_enable_periph_clk+0x50>)
  40280e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  402812:	2000      	movs	r0, #0
  402814:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402816:	2001      	movs	r0, #1
  402818:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40281a:	2000      	movs	r0, #0
  40281c:	4770      	bx	lr
  40281e:	2000      	movs	r0, #0
}
  402820:	4770      	bx	lr
  402822:	bf00      	nop
  402824:	400e0600 	.word	0x400e0600

00402828 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  402828:	b4f0      	push	{r4, r5, r6, r7}
  40282a:	b08c      	sub	sp, #48	; 0x30
  40282c:	4607      	mov	r7, r0
  40282e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  402830:	ac01      	add	r4, sp, #4
  402832:	4d11      	ldr	r5, [pc, #68]	; (402878 <pwm_clocks_generate+0x50>)
  402834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  402836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  402838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  40283a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  40283c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  402840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  402844:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  402846:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  402848:	f852 3b04 	ldr.w	r3, [r2], #4
  40284c:	fbb6 f3f3 	udiv	r3, r6, r3
  402850:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  402854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  402858:	d905      	bls.n	402866 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
  40285a:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  40285c:	280b      	cmp	r0, #11
  40285e:	d1f3      	bne.n	402848 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  402860:	f64f 70ff 	movw	r0, #65535	; 0xffff
  402864:	e005      	b.n	402872 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  402866:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
  402868:	bf94      	ite	ls
  40286a:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
  40286e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
  402872:	b00c      	add	sp, #48	; 0x30
  402874:	bcf0      	pop	{r4, r5, r6, r7}
  402876:	4770      	bx	lr
  402878:	004045b8 	.word	0x004045b8

0040287c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  40287c:	b570      	push	{r4, r5, r6, lr}
  40287e:	4606      	mov	r6, r0
  402880:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  402882:	6808      	ldr	r0, [r1, #0]
  402884:	b140      	cbz	r0, 402898 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  402886:	6889      	ldr	r1, [r1, #8]
  402888:	4b0e      	ldr	r3, [pc, #56]	; (4028c4 <pwm_init+0x48>)
  40288a:	4798      	blx	r3
  40288c:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
  40288e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402892:	4298      	cmp	r0, r3
  402894:	d101      	bne.n	40289a <pwm_init+0x1e>
  402896:	e00e      	b.n	4028b6 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
  402898:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  40289a:	6860      	ldr	r0, [r4, #4]
  40289c:	b140      	cbz	r0, 4028b0 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  40289e:	68a1      	ldr	r1, [r4, #8]
  4028a0:	4b08      	ldr	r3, [pc, #32]	; (4028c4 <pwm_init+0x48>)
  4028a2:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  4028a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4028a8:	4298      	cmp	r0, r3
  4028aa:	d007      	beq.n	4028bc <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
  4028ac:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  4028b0:	6035      	str	r5, [r6, #0]
#endif
	return 0;
  4028b2:	2000      	movs	r0, #0
  4028b4:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  4028b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
  4028ba:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
  4028bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
  4028c0:	bd70      	pop	{r4, r5, r6, pc}
  4028c2:	bf00      	nop
  4028c4:	00402829 	.word	0x00402829

004028c8 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  4028c8:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  4028ca:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  4028cc:	684a      	ldr	r2, [r1, #4]
  4028ce:	f002 020f 	and.w	r2, r2, #15
  4028d2:	8a8c      	ldrh	r4, [r1, #20]
  4028d4:	4322      	orrs	r2, r4
  4028d6:	890c      	ldrh	r4, [r1, #8]
  4028d8:	4322      	orrs	r2, r4
  4028da:	7a8c      	ldrb	r4, [r1, #10]
  4028dc:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
  4028e0:	7d8c      	ldrb	r4, [r1, #22]
  4028e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  4028e6:	7dcc      	ldrb	r4, [r1, #23]
  4028e8:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
  4028ec:	7e0c      	ldrb	r4, [r1, #24]
  4028ee:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
  4028f2:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  4028f6:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  4028fa:	68ca      	ldr	r2, [r1, #12]
  4028fc:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  402900:	690a      	ldr	r2, [r1, #16]
  402902:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  402906:	7d8a      	ldrb	r2, [r1, #22]
  402908:	b13a      	cbz	r2, 40291a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  40290a:	8b8c      	ldrh	r4, [r1, #28]
  40290c:	8b4a      	ldrh	r2, [r1, #26]
  40290e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  402912:	eb00 1443 	add.w	r4, r0, r3, lsl #5
  402916:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  40291a:	6c84      	ldr	r4, [r0, #72]	; 0x48
  40291c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  402920:	409a      	lsls	r2, r3
  402922:	43d2      	mvns	r2, r2
  402924:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  402928:	7fcc      	ldrb	r4, [r1, #31]
  40292a:	fa04 f603 	lsl.w	r6, r4, r3
  40292e:	7f8c      	ldrb	r4, [r1, #30]
  402930:	409c      	lsls	r4, r3
  402932:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  402936:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  402938:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40293a:	6c44      	ldr	r4, [r0, #68]	; 0x44
  40293c:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  40293e:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  402942:	fa04 f503 	lsl.w	r5, r4, r3
  402946:	f891 4020 	ldrb.w	r4, [r1, #32]
  40294a:	409c      	lsls	r4, r3
  40294c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402950:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  402952:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  402954:	2201      	movs	r2, #1
  402956:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
  402958:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  40295c:	b11c      	cbz	r4, 402966 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
  40295e:	6a04      	ldr	r4, [r0, #32]
  402960:	4314      	orrs	r4, r2
  402962:	6204      	str	r4, [r0, #32]
  402964:	e003      	b.n	40296e <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  402966:	6a04      	ldr	r4, [r0, #32]
  402968:	ea24 0402 	bic.w	r4, r4, r2
  40296c:	6204      	str	r4, [r0, #32]
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  40296e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  402972:	2c02      	cmp	r4, #2
  402974:	d105      	bne.n	402982 <pwm_channel_init+0xba>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  402976:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  40297a:	4314      	orrs	r4, r2
  40297c:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  402980:	e00d      	b.n	40299e <pwm_channel_init+0xd6>
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  402982:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  402986:	43d5      	mvns	r5, r2
  402988:	402c      	ands	r4, r5
  40298a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  40298e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  402992:	2c01      	cmp	r4, #1
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  402994:	6e84      	ldr	r4, [r0, #104]	; 0x68
  402996:	bf0c      	ite	eq
  402998:	4314      	orreq	r4, r2
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  40299a:	402c      	andne	r4, r5
  40299c:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  40299e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4029a2:	2c02      	cmp	r4, #2
  4029a4:	d106      	bne.n	4029b4 <pwm_channel_init+0xec>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  4029a6:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  4029aa:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  4029ae:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
  4029b2:	e011      	b.n	4029d8 <pwm_channel_init+0x110>
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  4029b4:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  4029b8:	0412      	lsls	r2, r2, #16
  4029ba:	43d5      	mvns	r5, r2
  4029bc:	402c      	ands	r4, r5
  4029be:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4029c2:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4029c6:	2c01      	cmp	r4, #1
  4029c8:	d103      	bne.n	4029d2 <pwm_channel_init+0x10a>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  4029ca:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4029cc:	4322      	orrs	r2, r4
  4029ce:	6682      	str	r2, [r0, #104]	; 0x68
  4029d0:	e002      	b.n	4029d8 <pwm_channel_init+0x110>
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  4029d2:	6e82      	ldr	r2, [r0, #104]	; 0x68
  4029d4:	402a      	ands	r2, r5
  4029d6:	6682      	str	r2, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4029d8:	00db      	lsls	r3, r3, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4029da:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4029dc:	22ff      	movs	r2, #255	; 0xff
  4029de:	409a      	lsls	r2, r3
  4029e0:	ea25 0402 	bic.w	r4, r5, r2
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4029e4:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
  4029e8:	409a      	lsls	r2, r3
  4029ea:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  4029ec:	66c2      	str	r2, [r0, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  4029ee:	b953      	cbnz	r3, 402a06 <pwm_channel_init+0x13e>
		if (p_channel->spread_spectrum_mode ==
  4029f0:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
  4029f4:	2a01      	cmp	r2, #1
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  4029f6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  4029f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  4029fc:	bf08      	it	eq
  4029fe:	f042 7280 	orreq.w	r2, r2, #16777216	; 0x1000000
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  402a02:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  402a06:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  402a0a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  402a0e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  402a12:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  402a16:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
  402a1a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  402a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  402a20:	4313      	orrs	r3, r2
  402a22:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
#endif

	return 0;
}
  402a26:	2000      	movs	r0, #0
  402a28:	bc70      	pop	{r4, r5, r6}
  402a2a:	4770      	bx	lr

00402a2c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  402a2c:	2301      	movs	r3, #1
  402a2e:	fa03 f101 	lsl.w	r1, r3, r1
  402a32:	6041      	str	r1, [r0, #4]
  402a34:	4770      	bx	lr
  402a36:	bf00      	nop

00402a38 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  402a38:	2301      	movs	r3, #1
  402a3a:	fa03 f101 	lsl.w	r1, r3, r1
  402a3e:	6081      	str	r1, [r0, #8]
  402a40:	4770      	bx	lr
  402a42:	bf00      	nop

00402a44 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402a44:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402a46:	23ac      	movs	r3, #172	; 0xac
  402a48:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402a4a:	680b      	ldr	r3, [r1, #0]
  402a4c:	684a      	ldr	r2, [r1, #4]
  402a4e:	fbb3 f3f2 	udiv	r3, r3, r2
  402a52:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402a54:	1e5c      	subs	r4, r3, #1
  402a56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402a5a:	4294      	cmp	r4, r2
  402a5c:	d806      	bhi.n	402a6c <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  402a5e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402a60:	688b      	ldr	r3, [r1, #8]
  402a62:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402a64:	2350      	movs	r3, #80	; 0x50
  402a66:	6003      	str	r3, [r0, #0]

	return 0;
  402a68:	2000      	movs	r0, #0
  402a6a:	e000      	b.n	402a6e <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402a6c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402a6e:	bc10      	pop	{r4}
  402a70:	4770      	bx	lr
  402a72:	bf00      	nop

00402a74 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402a74:	6081      	str	r1, [r0, #8]
  402a76:	4770      	bx	lr

00402a78 <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
  402a78:	6940      	ldr	r0, [r0, #20]
}
  402a7a:	f000 0001 	and.w	r0, r0, #1
  402a7e:	4770      	bx	lr

00402a80 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402a80:	6943      	ldr	r3, [r0, #20]
  402a82:	f013 0f02 	tst.w	r3, #2
  402a86:	d002      	beq.n	402a8e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402a88:	61c1      	str	r1, [r0, #28]
	return 0;
  402a8a:	2000      	movs	r0, #0
  402a8c:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402a8e:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402a90:	4770      	bx	lr
  402a92:	bf00      	nop

00402a94 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  402a94:	6943      	ldr	r3, [r0, #20]
  402a96:	f013 0f01 	tst.w	r3, #1
  402a9a:	d003      	beq.n	402aa4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  402a9c:	6983      	ldr	r3, [r0, #24]
  402a9e:	700b      	strb	r3, [r1, #0]
	return 0;
  402aa0:	2000      	movs	r0, #0
  402aa2:	4770      	bx	lr
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  402aa4:	2001      	movs	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  402aa6:	4770      	bx	lr

00402aa8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  402aa8:	4770      	bx	lr
  402aaa:	bf00      	nop

00402aac <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402aac:	4b3c      	ldr	r3, [pc, #240]	; (402ba0 <SystemCoreClockUpdate+0xf4>)
  402aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ab0:	f003 0303 	and.w	r3, r3, #3
  402ab4:	2b01      	cmp	r3, #1
  402ab6:	d00f      	beq.n	402ad8 <SystemCoreClockUpdate+0x2c>
  402ab8:	b113      	cbz	r3, 402ac0 <SystemCoreClockUpdate+0x14>
  402aba:	2b02      	cmp	r3, #2
  402abc:	d029      	beq.n	402b12 <SystemCoreClockUpdate+0x66>
  402abe:	e057      	b.n	402b70 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402ac0:	4b38      	ldr	r3, [pc, #224]	; (402ba4 <SystemCoreClockUpdate+0xf8>)
  402ac2:	695b      	ldr	r3, [r3, #20]
  402ac4:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402ac8:	bf14      	ite	ne
  402aca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402ace:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402ad2:	4b35      	ldr	r3, [pc, #212]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402ad4:	601a      	str	r2, [r3, #0]
  402ad6:	e04b      	b.n	402b70 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402ad8:	4b31      	ldr	r3, [pc, #196]	; (402ba0 <SystemCoreClockUpdate+0xf4>)
  402ada:	6a1b      	ldr	r3, [r3, #32]
  402adc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402ae0:	d003      	beq.n	402aea <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402ae2:	4a32      	ldr	r2, [pc, #200]	; (402bac <SystemCoreClockUpdate+0x100>)
  402ae4:	4b30      	ldr	r3, [pc, #192]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402ae6:	601a      	str	r2, [r3, #0]
  402ae8:	e042      	b.n	402b70 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402aea:	4a31      	ldr	r2, [pc, #196]	; (402bb0 <SystemCoreClockUpdate+0x104>)
  402aec:	4b2e      	ldr	r3, [pc, #184]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402aee:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402af0:	4b2b      	ldr	r3, [pc, #172]	; (402ba0 <SystemCoreClockUpdate+0xf4>)
  402af2:	6a1b      	ldr	r3, [r3, #32]
  402af4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402af8:	2b10      	cmp	r3, #16
  402afa:	d002      	beq.n	402b02 <SystemCoreClockUpdate+0x56>
  402afc:	2b20      	cmp	r3, #32
  402afe:	d004      	beq.n	402b0a <SystemCoreClockUpdate+0x5e>
  402b00:	e036      	b.n	402b70 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402b02:	4a2c      	ldr	r2, [pc, #176]	; (402bb4 <SystemCoreClockUpdate+0x108>)
  402b04:	4b28      	ldr	r3, [pc, #160]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402b06:	601a      	str	r2, [r3, #0]
          break;
  402b08:	e032      	b.n	402b70 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402b0a:	4a28      	ldr	r2, [pc, #160]	; (402bac <SystemCoreClockUpdate+0x100>)
  402b0c:	4b26      	ldr	r3, [pc, #152]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402b0e:	601a      	str	r2, [r3, #0]
          break;
  402b10:	e02e      	b.n	402b70 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402b12:	4b23      	ldr	r3, [pc, #140]	; (402ba0 <SystemCoreClockUpdate+0xf4>)
  402b14:	6a1b      	ldr	r3, [r3, #32]
  402b16:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402b1a:	d003      	beq.n	402b24 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402b1c:	4a23      	ldr	r2, [pc, #140]	; (402bac <SystemCoreClockUpdate+0x100>)
  402b1e:	4b22      	ldr	r3, [pc, #136]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402b20:	601a      	str	r2, [r3, #0]
  402b22:	e012      	b.n	402b4a <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402b24:	4a22      	ldr	r2, [pc, #136]	; (402bb0 <SystemCoreClockUpdate+0x104>)
  402b26:	4b20      	ldr	r3, [pc, #128]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402b28:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402b2a:	4b1d      	ldr	r3, [pc, #116]	; (402ba0 <SystemCoreClockUpdate+0xf4>)
  402b2c:	6a1b      	ldr	r3, [r3, #32]
  402b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b32:	2b10      	cmp	r3, #16
  402b34:	d002      	beq.n	402b3c <SystemCoreClockUpdate+0x90>
  402b36:	2b20      	cmp	r3, #32
  402b38:	d004      	beq.n	402b44 <SystemCoreClockUpdate+0x98>
  402b3a:	e006      	b.n	402b4a <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402b3c:	4a1d      	ldr	r2, [pc, #116]	; (402bb4 <SystemCoreClockUpdate+0x108>)
  402b3e:	4b1a      	ldr	r3, [pc, #104]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402b40:	601a      	str	r2, [r3, #0]
          break;
  402b42:	e002      	b.n	402b4a <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402b44:	4a19      	ldr	r2, [pc, #100]	; (402bac <SystemCoreClockUpdate+0x100>)
  402b46:	4b18      	ldr	r3, [pc, #96]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402b48:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402b4a:	4b15      	ldr	r3, [pc, #84]	; (402ba0 <SystemCoreClockUpdate+0xf4>)
  402b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b4e:	f003 0303 	and.w	r3, r3, #3
  402b52:	2b02      	cmp	r3, #2
  402b54:	d10c      	bne.n	402b70 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402b56:	4a12      	ldr	r2, [pc, #72]	; (402ba0 <SystemCoreClockUpdate+0xf4>)
  402b58:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402b5a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402b5c:	4812      	ldr	r0, [pc, #72]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402b5e:	f3c3 410a 	ubfx	r1, r3, #16, #11
  402b62:	6803      	ldr	r3, [r0, #0]
  402b64:	fb01 3303 	mla	r3, r1, r3, r3
  402b68:	b2d2      	uxtb	r2, r2
  402b6a:	fbb3 f3f2 	udiv	r3, r3, r2
  402b6e:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402b70:	4b0b      	ldr	r3, [pc, #44]	; (402ba0 <SystemCoreClockUpdate+0xf4>)
  402b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b78:	2b70      	cmp	r3, #112	; 0x70
  402b7a:	d107      	bne.n	402b8c <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  402b7c:	4a0a      	ldr	r2, [pc, #40]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402b7e:	6813      	ldr	r3, [r2, #0]
  402b80:	490d      	ldr	r1, [pc, #52]	; (402bb8 <SystemCoreClockUpdate+0x10c>)
  402b82:	fba1 1303 	umull	r1, r3, r1, r3
  402b86:	085b      	lsrs	r3, r3, #1
  402b88:	6013      	str	r3, [r2, #0]
  402b8a:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402b8c:	4b04      	ldr	r3, [pc, #16]	; (402ba0 <SystemCoreClockUpdate+0xf4>)
  402b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b90:	4905      	ldr	r1, [pc, #20]	; (402ba8 <SystemCoreClockUpdate+0xfc>)
  402b92:	f3c3 1202 	ubfx	r2, r3, #4, #3
  402b96:	680b      	ldr	r3, [r1, #0]
  402b98:	40d3      	lsrs	r3, r2
  402b9a:	600b      	str	r3, [r1, #0]
  402b9c:	4770      	bx	lr
  402b9e:	bf00      	nop
  402ba0:	400e0600 	.word	0x400e0600
  402ba4:	400e1810 	.word	0x400e1810
  402ba8:	20400000 	.word	0x20400000
  402bac:	00b71b00 	.word	0x00b71b00
  402bb0:	003d0900 	.word	0x003d0900
  402bb4:	007a1200 	.word	0x007a1200
  402bb8:	aaaaaaab 	.word	0xaaaaaaab

00402bbc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402bbc:	4b12      	ldr	r3, [pc, #72]	; (402c08 <system_init_flash+0x4c>)
  402bbe:	4298      	cmp	r0, r3
  402bc0:	d804      	bhi.n	402bcc <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402bc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402bc6:	4b11      	ldr	r3, [pc, #68]	; (402c0c <system_init_flash+0x50>)
  402bc8:	601a      	str	r2, [r3, #0]
  402bca:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402bcc:	4b10      	ldr	r3, [pc, #64]	; (402c10 <system_init_flash+0x54>)
  402bce:	4298      	cmp	r0, r3
  402bd0:	d803      	bhi.n	402bda <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402bd2:	4a10      	ldr	r2, [pc, #64]	; (402c14 <system_init_flash+0x58>)
  402bd4:	4b0d      	ldr	r3, [pc, #52]	; (402c0c <system_init_flash+0x50>)
  402bd6:	601a      	str	r2, [r3, #0]
  402bd8:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402bda:	4b0f      	ldr	r3, [pc, #60]	; (402c18 <system_init_flash+0x5c>)
  402bdc:	4298      	cmp	r0, r3
  402bde:	d803      	bhi.n	402be8 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402be0:	4a0e      	ldr	r2, [pc, #56]	; (402c1c <system_init_flash+0x60>)
  402be2:	4b0a      	ldr	r3, [pc, #40]	; (402c0c <system_init_flash+0x50>)
  402be4:	601a      	str	r2, [r3, #0]
  402be6:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402be8:	4b0d      	ldr	r3, [pc, #52]	; (402c20 <system_init_flash+0x64>)
  402bea:	4298      	cmp	r0, r3
  402bec:	d803      	bhi.n	402bf6 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402bee:	4a0d      	ldr	r2, [pc, #52]	; (402c24 <system_init_flash+0x68>)
  402bf0:	4b06      	ldr	r3, [pc, #24]	; (402c0c <system_init_flash+0x50>)
  402bf2:	601a      	str	r2, [r3, #0]
  402bf4:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402bf6:	4b0c      	ldr	r3, [pc, #48]	; (402c28 <system_init_flash+0x6c>)
  402bf8:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402bfa:	bf94      	ite	ls
  402bfc:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402c00:	4a0a      	ldrhi	r2, [pc, #40]	; (402c2c <system_init_flash+0x70>)
  402c02:	4b02      	ldr	r3, [pc, #8]	; (402c0c <system_init_flash+0x50>)
  402c04:	601a      	str	r2, [r3, #0]
  402c06:	4770      	bx	lr
  402c08:	01312cff 	.word	0x01312cff
  402c0c:	400e0c00 	.word	0x400e0c00
  402c10:	026259ff 	.word	0x026259ff
  402c14:	04000100 	.word	0x04000100
  402c18:	039386ff 	.word	0x039386ff
  402c1c:	04000200 	.word	0x04000200
  402c20:	04c4b3ff 	.word	0x04c4b3ff
  402c24:	04000300 	.word	0x04000300
  402c28:	05f5e0ff 	.word	0x05f5e0ff
  402c2c:	04000500 	.word	0x04000500

00402c30 <atan>:
  402c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c34:	4bc0      	ldr	r3, [pc, #768]	; (402f38 <atan+0x308>)
  402c36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  402c3a:	429e      	cmp	r6, r3
  402c3c:	460d      	mov	r5, r1
  402c3e:	468a      	mov	sl, r1
  402c40:	4604      	mov	r4, r0
  402c42:	dd0f      	ble.n	402c64 <atan+0x34>
  402c44:	4bbd      	ldr	r3, [pc, #756]	; (402f3c <atan+0x30c>)
  402c46:	429e      	cmp	r6, r3
  402c48:	f300 80b2 	bgt.w	402db0 <atan+0x180>
  402c4c:	f000 80ad 	beq.w	402daa <atan+0x17a>
  402c50:	4bbb      	ldr	r3, [pc, #748]	; (402f40 <atan+0x310>)
  402c52:	49bc      	ldr	r1, [pc, #752]	; (402f44 <atan+0x314>)
  402c54:	4cbc      	ldr	r4, [pc, #752]	; (402f48 <atan+0x318>)
  402c56:	f1ba 0f00 	cmp.w	sl, #0
  402c5a:	bfc8      	it	gt
  402c5c:	4619      	movgt	r1, r3
  402c5e:	4620      	mov	r0, r4
  402c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c64:	4bb9      	ldr	r3, [pc, #740]	; (402f4c <atan+0x31c>)
  402c66:	429e      	cmp	r6, r3
  402c68:	f300 80bc 	bgt.w	402de4 <atan+0x1b4>
  402c6c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
  402c70:	429e      	cmp	r6, r3
  402c72:	f340 80a7 	ble.w	402dc4 <atan+0x194>
  402c76:	f04f 3bff 	mov.w	fp, #4294967295
  402c7a:	4622      	mov	r2, r4
  402c7c:	462b      	mov	r3, r5
  402c7e:	4620      	mov	r0, r4
  402c80:	4629      	mov	r1, r5
  402c82:	f000 fd19 	bl	4036b8 <__aeabi_dmul>
  402c86:	4602      	mov	r2, r0
  402c88:	460b      	mov	r3, r1
  402c8a:	4680      	mov	r8, r0
  402c8c:	4689      	mov	r9, r1
  402c8e:	f000 fd13 	bl	4036b8 <__aeabi_dmul>
  402c92:	a391      	add	r3, pc, #580	; (adr r3, 402ed8 <atan+0x2a8>)
  402c94:	e9d3 2300 	ldrd	r2, r3, [r3]
  402c98:	4606      	mov	r6, r0
  402c9a:	460f      	mov	r7, r1
  402c9c:	f000 fd0c 	bl	4036b8 <__aeabi_dmul>
  402ca0:	a38f      	add	r3, pc, #572	; (adr r3, 402ee0 <atan+0x2b0>)
  402ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ca6:	f000 fb55 	bl	403354 <__adddf3>
  402caa:	4632      	mov	r2, r6
  402cac:	463b      	mov	r3, r7
  402cae:	f000 fd03 	bl	4036b8 <__aeabi_dmul>
  402cb2:	a38d      	add	r3, pc, #564	; (adr r3, 402ee8 <atan+0x2b8>)
  402cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
  402cb8:	f000 fb4c 	bl	403354 <__adddf3>
  402cbc:	4632      	mov	r2, r6
  402cbe:	463b      	mov	r3, r7
  402cc0:	f000 fcfa 	bl	4036b8 <__aeabi_dmul>
  402cc4:	a38a      	add	r3, pc, #552	; (adr r3, 402ef0 <atan+0x2c0>)
  402cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
  402cca:	f000 fb43 	bl	403354 <__adddf3>
  402cce:	4632      	mov	r2, r6
  402cd0:	463b      	mov	r3, r7
  402cd2:	f000 fcf1 	bl	4036b8 <__aeabi_dmul>
  402cd6:	a388      	add	r3, pc, #544	; (adr r3, 402ef8 <atan+0x2c8>)
  402cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402cdc:	f000 fb3a 	bl	403354 <__adddf3>
  402ce0:	4632      	mov	r2, r6
  402ce2:	463b      	mov	r3, r7
  402ce4:	f000 fce8 	bl	4036b8 <__aeabi_dmul>
  402ce8:	a385      	add	r3, pc, #532	; (adr r3, 402f00 <atan+0x2d0>)
  402cea:	e9d3 2300 	ldrd	r2, r3, [r3]
  402cee:	f000 fb31 	bl	403354 <__adddf3>
  402cf2:	4642      	mov	r2, r8
  402cf4:	464b      	mov	r3, r9
  402cf6:	f000 fcdf 	bl	4036b8 <__aeabi_dmul>
  402cfa:	a383      	add	r3, pc, #524	; (adr r3, 402f08 <atan+0x2d8>)
  402cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d00:	4680      	mov	r8, r0
  402d02:	4689      	mov	r9, r1
  402d04:	4630      	mov	r0, r6
  402d06:	4639      	mov	r1, r7
  402d08:	f000 fcd6 	bl	4036b8 <__aeabi_dmul>
  402d0c:	a380      	add	r3, pc, #512	; (adr r3, 402f10 <atan+0x2e0>)
  402d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d12:	f000 fb1d 	bl	403350 <__aeabi_dsub>
  402d16:	4632      	mov	r2, r6
  402d18:	463b      	mov	r3, r7
  402d1a:	f000 fccd 	bl	4036b8 <__aeabi_dmul>
  402d1e:	a37e      	add	r3, pc, #504	; (adr r3, 402f18 <atan+0x2e8>)
  402d20:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d24:	f000 fb14 	bl	403350 <__aeabi_dsub>
  402d28:	4632      	mov	r2, r6
  402d2a:	463b      	mov	r3, r7
  402d2c:	f000 fcc4 	bl	4036b8 <__aeabi_dmul>
  402d30:	a37b      	add	r3, pc, #492	; (adr r3, 402f20 <atan+0x2f0>)
  402d32:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d36:	f000 fb0b 	bl	403350 <__aeabi_dsub>
  402d3a:	4632      	mov	r2, r6
  402d3c:	463b      	mov	r3, r7
  402d3e:	f000 fcbb 	bl	4036b8 <__aeabi_dmul>
  402d42:	a379      	add	r3, pc, #484	; (adr r3, 402f28 <atan+0x2f8>)
  402d44:	e9d3 2300 	ldrd	r2, r3, [r3]
  402d48:	f000 fb02 	bl	403350 <__aeabi_dsub>
  402d4c:	4632      	mov	r2, r6
  402d4e:	463b      	mov	r3, r7
  402d50:	f000 fcb2 	bl	4036b8 <__aeabi_dmul>
  402d54:	f1bb 3fff 	cmp.w	fp, #4294967295
  402d58:	4602      	mov	r2, r0
  402d5a:	460b      	mov	r3, r1
  402d5c:	d069      	beq.n	402e32 <atan+0x202>
  402d5e:	4640      	mov	r0, r8
  402d60:	4649      	mov	r1, r9
  402d62:	f000 faf7 	bl	403354 <__adddf3>
  402d66:	4622      	mov	r2, r4
  402d68:	462b      	mov	r3, r5
  402d6a:	f000 fca5 	bl	4036b8 <__aeabi_dmul>
  402d6e:	4e78      	ldr	r6, [pc, #480]	; (402f50 <atan+0x320>)
  402d70:	4b78      	ldr	r3, [pc, #480]	; (402f54 <atan+0x324>)
  402d72:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
  402d76:	445e      	add	r6, fp
  402d78:	449b      	add	fp, r3
  402d7a:	e9db 2300 	ldrd	r2, r3, [fp]
  402d7e:	f000 fae7 	bl	403350 <__aeabi_dsub>
  402d82:	4622      	mov	r2, r4
  402d84:	462b      	mov	r3, r5
  402d86:	f000 fae3 	bl	403350 <__aeabi_dsub>
  402d8a:	4602      	mov	r2, r0
  402d8c:	460b      	mov	r3, r1
  402d8e:	e9d6 0100 	ldrd	r0, r1, [r6]
  402d92:	f000 fadd 	bl	403350 <__aeabi_dsub>
  402d96:	f1ba 0f00 	cmp.w	sl, #0
  402d9a:	4604      	mov	r4, r0
  402d9c:	f6bf af5f 	bge.w	402c5e <atan+0x2e>
  402da0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  402da4:	4620      	mov	r0, r4
  402da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402daa:	2800      	cmp	r0, #0
  402dac:	f43f af50 	beq.w	402c50 <atan+0x20>
  402db0:	4622      	mov	r2, r4
  402db2:	4620      	mov	r0, r4
  402db4:	462b      	mov	r3, r5
  402db6:	4629      	mov	r1, r5
  402db8:	f000 facc 	bl	403354 <__adddf3>
  402dbc:	4604      	mov	r4, r0
  402dbe:	4620      	mov	r0, r4
  402dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402dc4:	a35a      	add	r3, pc, #360	; (adr r3, 402f30 <atan+0x300>)
  402dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
  402dca:	f000 fac3 	bl	403354 <__adddf3>
  402dce:	2200      	movs	r2, #0
  402dd0:	4b61      	ldr	r3, [pc, #388]	; (402f58 <atan+0x328>)
  402dd2:	f000 ff01 	bl	403bd8 <__aeabi_dcmpgt>
  402dd6:	2800      	cmp	r0, #0
  402dd8:	f43f af4d 	beq.w	402c76 <atan+0x46>
  402ddc:	4629      	mov	r1, r5
  402dde:	4620      	mov	r0, r4
  402de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402de4:	f000 f8c2 	bl	402f6c <fabs>
  402de8:	4b5c      	ldr	r3, [pc, #368]	; (402f5c <atan+0x32c>)
  402dea:	429e      	cmp	r6, r3
  402dec:	4604      	mov	r4, r0
  402dee:	460d      	mov	r5, r1
  402df0:	dc2f      	bgt.n	402e52 <atan+0x222>
  402df2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
  402df6:	429e      	cmp	r6, r3
  402df8:	dc54      	bgt.n	402ea4 <atan+0x274>
  402dfa:	4602      	mov	r2, r0
  402dfc:	460b      	mov	r3, r1
  402dfe:	f000 faa9 	bl	403354 <__adddf3>
  402e02:	2200      	movs	r2, #0
  402e04:	4b54      	ldr	r3, [pc, #336]	; (402f58 <atan+0x328>)
  402e06:	f000 faa3 	bl	403350 <__aeabi_dsub>
  402e0a:	2200      	movs	r2, #0
  402e0c:	4606      	mov	r6, r0
  402e0e:	460f      	mov	r7, r1
  402e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  402e14:	4620      	mov	r0, r4
  402e16:	4629      	mov	r1, r5
  402e18:	f000 fa9c 	bl	403354 <__adddf3>
  402e1c:	4602      	mov	r2, r0
  402e1e:	460b      	mov	r3, r1
  402e20:	4630      	mov	r0, r6
  402e22:	4639      	mov	r1, r7
  402e24:	f000 fd72 	bl	40390c <__aeabi_ddiv>
  402e28:	f04f 0b00 	mov.w	fp, #0
  402e2c:	4604      	mov	r4, r0
  402e2e:	460d      	mov	r5, r1
  402e30:	e723      	b.n	402c7a <atan+0x4a>
  402e32:	4640      	mov	r0, r8
  402e34:	4649      	mov	r1, r9
  402e36:	f000 fa8d 	bl	403354 <__adddf3>
  402e3a:	4622      	mov	r2, r4
  402e3c:	462b      	mov	r3, r5
  402e3e:	f000 fc3b 	bl	4036b8 <__aeabi_dmul>
  402e42:	4602      	mov	r2, r0
  402e44:	460b      	mov	r3, r1
  402e46:	4620      	mov	r0, r4
  402e48:	4629      	mov	r1, r5
  402e4a:	f000 fa81 	bl	403350 <__aeabi_dsub>
  402e4e:	4604      	mov	r4, r0
  402e50:	e705      	b.n	402c5e <atan+0x2e>
  402e52:	4b43      	ldr	r3, [pc, #268]	; (402f60 <atan+0x330>)
  402e54:	429e      	cmp	r6, r3
  402e56:	dc1a      	bgt.n	402e8e <atan+0x25e>
  402e58:	2200      	movs	r2, #0
  402e5a:	4b42      	ldr	r3, [pc, #264]	; (402f64 <atan+0x334>)
  402e5c:	f000 fa78 	bl	403350 <__aeabi_dsub>
  402e60:	2200      	movs	r2, #0
  402e62:	4606      	mov	r6, r0
  402e64:	460f      	mov	r7, r1
  402e66:	4b3f      	ldr	r3, [pc, #252]	; (402f64 <atan+0x334>)
  402e68:	4620      	mov	r0, r4
  402e6a:	4629      	mov	r1, r5
  402e6c:	f000 fc24 	bl	4036b8 <__aeabi_dmul>
  402e70:	2200      	movs	r2, #0
  402e72:	4b39      	ldr	r3, [pc, #228]	; (402f58 <atan+0x328>)
  402e74:	f000 fa6e 	bl	403354 <__adddf3>
  402e78:	4602      	mov	r2, r0
  402e7a:	460b      	mov	r3, r1
  402e7c:	4630      	mov	r0, r6
  402e7e:	4639      	mov	r1, r7
  402e80:	f000 fd44 	bl	40390c <__aeabi_ddiv>
  402e84:	f04f 0b02 	mov.w	fp, #2
  402e88:	4604      	mov	r4, r0
  402e8a:	460d      	mov	r5, r1
  402e8c:	e6f5      	b.n	402c7a <atan+0x4a>
  402e8e:	4602      	mov	r2, r0
  402e90:	460b      	mov	r3, r1
  402e92:	2000      	movs	r0, #0
  402e94:	4934      	ldr	r1, [pc, #208]	; (402f68 <atan+0x338>)
  402e96:	f000 fd39 	bl	40390c <__aeabi_ddiv>
  402e9a:	f04f 0b03 	mov.w	fp, #3
  402e9e:	4604      	mov	r4, r0
  402ea0:	460d      	mov	r5, r1
  402ea2:	e6ea      	b.n	402c7a <atan+0x4a>
  402ea4:	2200      	movs	r2, #0
  402ea6:	4b2c      	ldr	r3, [pc, #176]	; (402f58 <atan+0x328>)
  402ea8:	f000 fa52 	bl	403350 <__aeabi_dsub>
  402eac:	2200      	movs	r2, #0
  402eae:	4606      	mov	r6, r0
  402eb0:	460f      	mov	r7, r1
  402eb2:	4b29      	ldr	r3, [pc, #164]	; (402f58 <atan+0x328>)
  402eb4:	4620      	mov	r0, r4
  402eb6:	4629      	mov	r1, r5
  402eb8:	f000 fa4c 	bl	403354 <__adddf3>
  402ebc:	4602      	mov	r2, r0
  402ebe:	460b      	mov	r3, r1
  402ec0:	4630      	mov	r0, r6
  402ec2:	4639      	mov	r1, r7
  402ec4:	f000 fd22 	bl	40390c <__aeabi_ddiv>
  402ec8:	f04f 0b01 	mov.w	fp, #1
  402ecc:	4604      	mov	r4, r0
  402ece:	460d      	mov	r5, r1
  402ed0:	e6d3      	b.n	402c7a <atan+0x4a>
  402ed2:	bf00      	nop
  402ed4:	f3af 8000 	nop.w
  402ed8:	e322da11 	.word	0xe322da11
  402edc:	3f90ad3a 	.word	0x3f90ad3a
  402ee0:	24760deb 	.word	0x24760deb
  402ee4:	3fa97b4b 	.word	0x3fa97b4b
  402ee8:	a0d03d51 	.word	0xa0d03d51
  402eec:	3fb10d66 	.word	0x3fb10d66
  402ef0:	c54c206e 	.word	0xc54c206e
  402ef4:	3fb745cd 	.word	0x3fb745cd
  402ef8:	920083ff 	.word	0x920083ff
  402efc:	3fc24924 	.word	0x3fc24924
  402f00:	5555550d 	.word	0x5555550d
  402f04:	3fd55555 	.word	0x3fd55555
  402f08:	2c6a6c2f 	.word	0x2c6a6c2f
  402f0c:	bfa2b444 	.word	0xbfa2b444
  402f10:	52defd9a 	.word	0x52defd9a
  402f14:	3fadde2d 	.word	0x3fadde2d
  402f18:	af749a6d 	.word	0xaf749a6d
  402f1c:	3fb3b0f2 	.word	0x3fb3b0f2
  402f20:	fe231671 	.word	0xfe231671
  402f24:	3fbc71c6 	.word	0x3fbc71c6
  402f28:	9998ebc4 	.word	0x9998ebc4
  402f2c:	3fc99999 	.word	0x3fc99999
  402f30:	8800759c 	.word	0x8800759c
  402f34:	7e37e43c 	.word	0x7e37e43c
  402f38:	440fffff 	.word	0x440fffff
  402f3c:	7ff00000 	.word	0x7ff00000
  402f40:	3ff921fb 	.word	0x3ff921fb
  402f44:	bff921fb 	.word	0xbff921fb
  402f48:	54442d18 	.word	0x54442d18
  402f4c:	3fdbffff 	.word	0x3fdbffff
  402f50:	00404608 	.word	0x00404608
  402f54:	004045e8 	.word	0x004045e8
  402f58:	3ff00000 	.word	0x3ff00000
  402f5c:	3ff2ffff 	.word	0x3ff2ffff
  402f60:	40037fff 	.word	0x40037fff
  402f64:	3ff80000 	.word	0x3ff80000
  402f68:	bff00000 	.word	0xbff00000

00402f6c <fabs>:
  402f6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  402f70:	4770      	bx	lr
  402f72:	bf00      	nop

00402f74 <atan2>:
  402f74:	f000 b85c 	b.w	403030 <__ieee754_atan2>

00402f78 <sqrt>:
  402f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402f7c:	b08b      	sub	sp, #44	; 0x2c
  402f7e:	4604      	mov	r4, r0
  402f80:	460d      	mov	r5, r1
  402f82:	f000 f91f 	bl	4031c4 <__ieee754_sqrt>
  402f86:	4b28      	ldr	r3, [pc, #160]	; (403028 <sqrt+0xb0>)
  402f88:	f993 a000 	ldrsb.w	sl, [r3]
  402f8c:	f1ba 3fff 	cmp.w	sl, #4294967295
  402f90:	4606      	mov	r6, r0
  402f92:	460f      	mov	r7, r1
  402f94:	d012      	beq.n	402fbc <sqrt+0x44>
  402f96:	4622      	mov	r2, r4
  402f98:	462b      	mov	r3, r5
  402f9a:	4620      	mov	r0, r4
  402f9c:	4629      	mov	r1, r5
  402f9e:	f000 fe25 	bl	403bec <__aeabi_dcmpun>
  402fa2:	4683      	mov	fp, r0
  402fa4:	b950      	cbnz	r0, 402fbc <sqrt+0x44>
  402fa6:	f04f 0800 	mov.w	r8, #0
  402faa:	f04f 0900 	mov.w	r9, #0
  402fae:	4642      	mov	r2, r8
  402fb0:	464b      	mov	r3, r9
  402fb2:	4620      	mov	r0, r4
  402fb4:	4629      	mov	r1, r5
  402fb6:	f000 fdf1 	bl	403b9c <__aeabi_dcmplt>
  402fba:	b920      	cbnz	r0, 402fc6 <sqrt+0x4e>
  402fbc:	4630      	mov	r0, r6
  402fbe:	4639      	mov	r1, r7
  402fc0:	b00b      	add	sp, #44	; 0x2c
  402fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fc6:	4b19      	ldr	r3, [pc, #100]	; (40302c <sqrt+0xb4>)
  402fc8:	f8cd b020 	str.w	fp, [sp, #32]
  402fcc:	2201      	movs	r2, #1
  402fce:	e9cd 4504 	strd	r4, r5, [sp, #16]
  402fd2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  402fd6:	e88d 000c 	stmia.w	sp, {r2, r3}
  402fda:	f1ba 0f00 	cmp.w	sl, #0
  402fde:	d015      	beq.n	40300c <sqrt+0x94>
  402fe0:	4642      	mov	r2, r8
  402fe2:	464b      	mov	r3, r9
  402fe4:	4640      	mov	r0, r8
  402fe6:	4649      	mov	r1, r9
  402fe8:	f000 fc90 	bl	40390c <__aeabi_ddiv>
  402fec:	f1ba 0f02 	cmp.w	sl, #2
  402ff0:	e9cd 0106 	strd	r0, r1, [sp, #24]
  402ff4:	d10c      	bne.n	403010 <sqrt+0x98>
  402ff6:	f001 f905 	bl	404204 <__errno>
  402ffa:	2321      	movs	r3, #33	; 0x21
  402ffc:	6003      	str	r3, [r0, #0]
  402ffe:	9b08      	ldr	r3, [sp, #32]
  403000:	b963      	cbnz	r3, 40301c <sqrt+0xa4>
  403002:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403006:	b00b      	add	sp, #44	; 0x2c
  403008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40300c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  403010:	4668      	mov	r0, sp
  403012:	f000 f997 	bl	403344 <matherr>
  403016:	2800      	cmp	r0, #0
  403018:	d1f1      	bne.n	402ffe <sqrt+0x86>
  40301a:	e7ec      	b.n	402ff6 <sqrt+0x7e>
  40301c:	f001 f8f2 	bl	404204 <__errno>
  403020:	9b08      	ldr	r3, [sp, #32]
  403022:	6003      	str	r3, [r0, #0]
  403024:	e7ed      	b.n	403002 <sqrt+0x8a>
  403026:	bf00      	nop
  403028:	20400004 	.word	0x20400004
  40302c:	00404628 	.word	0x00404628

00403030 <__ieee754_atan2>:
  403030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403034:	4254      	negs	r4, r2
  403036:	4314      	orrs	r4, r2
  403038:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
  40303c:	f8df e180 	ldr.w	lr, [pc, #384]	; 4031c0 <__ieee754_atan2+0x190>
  403040:	ea49 74d4 	orr.w	r4, r9, r4, lsr #31
  403044:	4574      	cmp	r4, lr
  403046:	4606      	mov	r6, r0
  403048:	460d      	mov	r5, r1
  40304a:	d83e      	bhi.n	4030ca <__ieee754_atan2+0x9a>
  40304c:	4244      	negs	r4, r0
  40304e:	4304      	orrs	r4, r0
  403050:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  403054:	ea4b 74d4 	orr.w	r4, fp, r4, lsr #31
  403058:	4574      	cmp	r4, lr
  40305a:	468a      	mov	sl, r1
  40305c:	d835      	bhi.n	4030ca <__ieee754_atan2+0x9a>
  40305e:	f103 4440 	add.w	r4, r3, #3221225472	; 0xc0000000
  403062:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
  403066:	4314      	orrs	r4, r2
  403068:	d044      	beq.n	4030f4 <__ieee754_atan2+0xc4>
  40306a:	179c      	asrs	r4, r3, #30
  40306c:	f004 0402 	and.w	r4, r4, #2
  403070:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
  403074:	ea50 010b 	orrs.w	r1, r0, fp
  403078:	d02f      	beq.n	4030da <__ieee754_atan2+0xaa>
  40307a:	ea52 0109 	orrs.w	r1, r2, r9
  40307e:	d033      	beq.n	4030e8 <__ieee754_atan2+0xb8>
  403080:	45f1      	cmp	r9, lr
  403082:	d046      	beq.n	403112 <__ieee754_atan2+0xe2>
  403084:	45f3      	cmp	fp, lr
  403086:	d02f      	beq.n	4030e8 <__ieee754_atan2+0xb8>
  403088:	ebc9 090b 	rsb	r9, r9, fp
  40308c:	ea4f 5929 	mov.w	r9, r9, asr #20
  403090:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
  403094:	dc34      	bgt.n	403100 <__ieee754_atan2+0xd0>
  403096:	2b00      	cmp	r3, #0
  403098:	db57      	blt.n	40314a <__ieee754_atan2+0x11a>
  40309a:	4630      	mov	r0, r6
  40309c:	4629      	mov	r1, r5
  40309e:	f000 fc35 	bl	40390c <__aeabi_ddiv>
  4030a2:	f7ff ff63 	bl	402f6c <fabs>
  4030a6:	f7ff fdc3 	bl	402c30 <atan>
  4030aa:	2c01      	cmp	r4, #1
  4030ac:	d04a      	beq.n	403144 <__ieee754_atan2+0x114>
  4030ae:	2c02      	cmp	r4, #2
  4030b0:	d03b      	beq.n	40312a <__ieee754_atan2+0xfa>
  4030b2:	b184      	cbz	r4, 4030d6 <__ieee754_atan2+0xa6>
  4030b4:	a332      	add	r3, pc, #200	; (adr r3, 403180 <__ieee754_atan2+0x150>)
  4030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4030ba:	f000 f949 	bl	403350 <__aeabi_dsub>
  4030be:	a332      	add	r3, pc, #200	; (adr r3, 403188 <__ieee754_atan2+0x158>)
  4030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
  4030c4:	f000 f944 	bl	403350 <__aeabi_dsub>
  4030c8:	e005      	b.n	4030d6 <__ieee754_atan2+0xa6>
  4030ca:	4610      	mov	r0, r2
  4030cc:	4619      	mov	r1, r3
  4030ce:	4632      	mov	r2, r6
  4030d0:	462b      	mov	r3, r5
  4030d2:	f000 f93f 	bl	403354 <__adddf3>
  4030d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030da:	2c02      	cmp	r4, #2
  4030dc:	d014      	beq.n	403108 <__ieee754_atan2+0xd8>
  4030de:	2c03      	cmp	r4, #3
  4030e0:	d10c      	bne.n	4030fc <__ieee754_atan2+0xcc>
  4030e2:	482d      	ldr	r0, [pc, #180]	; (403198 <__ieee754_atan2+0x168>)
  4030e4:	492d      	ldr	r1, [pc, #180]	; (40319c <__ieee754_atan2+0x16c>)
  4030e6:	e7f6      	b.n	4030d6 <__ieee754_atan2+0xa6>
  4030e8:	f1ba 0f00 	cmp.w	sl, #0
  4030ec:	482a      	ldr	r0, [pc, #168]	; (403198 <__ieee754_atan2+0x168>)
  4030ee:	db0e      	blt.n	40310e <__ieee754_atan2+0xde>
  4030f0:	492b      	ldr	r1, [pc, #172]	; (4031a0 <__ieee754_atan2+0x170>)
  4030f2:	e7f0      	b.n	4030d6 <__ieee754_atan2+0xa6>
  4030f4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4030f8:	f7ff bd9a 	b.w	402c30 <atan>
  4030fc:	4629      	mov	r1, r5
  4030fe:	e7ea      	b.n	4030d6 <__ieee754_atan2+0xa6>
  403100:	a123      	add	r1, pc, #140	; (adr r1, 403190 <__ieee754_atan2+0x160>)
  403102:	e9d1 0100 	ldrd	r0, r1, [r1]
  403106:	e7d0      	b.n	4030aa <__ieee754_atan2+0x7a>
  403108:	4823      	ldr	r0, [pc, #140]	; (403198 <__ieee754_atan2+0x168>)
  40310a:	4926      	ldr	r1, [pc, #152]	; (4031a4 <__ieee754_atan2+0x174>)
  40310c:	e7e3      	b.n	4030d6 <__ieee754_atan2+0xa6>
  40310e:	4926      	ldr	r1, [pc, #152]	; (4031a8 <__ieee754_atan2+0x178>)
  403110:	e7e1      	b.n	4030d6 <__ieee754_atan2+0xa6>
  403112:	45cb      	cmp	fp, r9
  403114:	d01f      	beq.n	403156 <__ieee754_atan2+0x126>
  403116:	2c02      	cmp	r4, #2
  403118:	d0f6      	beq.n	403108 <__ieee754_atan2+0xd8>
  40311a:	2c03      	cmp	r4, #3
  40311c:	d0e1      	beq.n	4030e2 <__ieee754_atan2+0xb2>
  40311e:	2c01      	cmp	r4, #1
  403120:	f04f 0000 	mov.w	r0, #0
  403124:	d020      	beq.n	403168 <__ieee754_atan2+0x138>
  403126:	4601      	mov	r1, r0
  403128:	e7d5      	b.n	4030d6 <__ieee754_atan2+0xa6>
  40312a:	a315      	add	r3, pc, #84	; (adr r3, 403180 <__ieee754_atan2+0x150>)
  40312c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403130:	f000 f90e 	bl	403350 <__aeabi_dsub>
  403134:	4602      	mov	r2, r0
  403136:	460b      	mov	r3, r1
  403138:	a113      	add	r1, pc, #76	; (adr r1, 403188 <__ieee754_atan2+0x158>)
  40313a:	e9d1 0100 	ldrd	r0, r1, [r1]
  40313e:	f000 f907 	bl	403350 <__aeabi_dsub>
  403142:	e7c8      	b.n	4030d6 <__ieee754_atan2+0xa6>
  403144:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403148:	e7c5      	b.n	4030d6 <__ieee754_atan2+0xa6>
  40314a:	f119 0f3c 	cmn.w	r9, #60	; 0x3c
  40314e:	daa4      	bge.n	40309a <__ieee754_atan2+0x6a>
  403150:	2000      	movs	r0, #0
  403152:	2100      	movs	r1, #0
  403154:	e7a9      	b.n	4030aa <__ieee754_atan2+0x7a>
  403156:	2c02      	cmp	r4, #2
  403158:	d00e      	beq.n	403178 <__ieee754_atan2+0x148>
  40315a:	2c03      	cmp	r4, #3
  40315c:	d009      	beq.n	403172 <__ieee754_atan2+0x142>
  40315e:	2c01      	cmp	r4, #1
  403160:	480d      	ldr	r0, [pc, #52]	; (403198 <__ieee754_atan2+0x168>)
  403162:	d004      	beq.n	40316e <__ieee754_atan2+0x13e>
  403164:	4911      	ldr	r1, [pc, #68]	; (4031ac <__ieee754_atan2+0x17c>)
  403166:	e7b6      	b.n	4030d6 <__ieee754_atan2+0xa6>
  403168:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40316c:	e7b3      	b.n	4030d6 <__ieee754_atan2+0xa6>
  40316e:	4910      	ldr	r1, [pc, #64]	; (4031b0 <__ieee754_atan2+0x180>)
  403170:	e7b1      	b.n	4030d6 <__ieee754_atan2+0xa6>
  403172:	4810      	ldr	r0, [pc, #64]	; (4031b4 <__ieee754_atan2+0x184>)
  403174:	4910      	ldr	r1, [pc, #64]	; (4031b8 <__ieee754_atan2+0x188>)
  403176:	e7ae      	b.n	4030d6 <__ieee754_atan2+0xa6>
  403178:	480e      	ldr	r0, [pc, #56]	; (4031b4 <__ieee754_atan2+0x184>)
  40317a:	4910      	ldr	r1, [pc, #64]	; (4031bc <__ieee754_atan2+0x18c>)
  40317c:	e7ab      	b.n	4030d6 <__ieee754_atan2+0xa6>
  40317e:	bf00      	nop
  403180:	33145c07 	.word	0x33145c07
  403184:	3ca1a626 	.word	0x3ca1a626
  403188:	54442d18 	.word	0x54442d18
  40318c:	400921fb 	.word	0x400921fb
  403190:	54442d18 	.word	0x54442d18
  403194:	3ff921fb 	.word	0x3ff921fb
  403198:	54442d18 	.word	0x54442d18
  40319c:	c00921fb 	.word	0xc00921fb
  4031a0:	3ff921fb 	.word	0x3ff921fb
  4031a4:	400921fb 	.word	0x400921fb
  4031a8:	bff921fb 	.word	0xbff921fb
  4031ac:	3fe921fb 	.word	0x3fe921fb
  4031b0:	bfe921fb 	.word	0xbfe921fb
  4031b4:	7f3321d2 	.word	0x7f3321d2
  4031b8:	c002d97c 	.word	0xc002d97c
  4031bc:	4002d97c 	.word	0x4002d97c
  4031c0:	7ff00000 	.word	0x7ff00000

004031c4 <__ieee754_sqrt>:
  4031c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4031c8:	4e5d      	ldr	r6, [pc, #372]	; (403340 <__ieee754_sqrt+0x17c>)
  4031ca:	46b6      	mov	lr, r6
  4031cc:	400e      	ands	r6, r1
  4031ce:	4576      	cmp	r6, lr
  4031d0:	460c      	mov	r4, r1
  4031d2:	4605      	mov	r5, r0
  4031d4:	f000 8095 	beq.w	403302 <__ieee754_sqrt+0x13e>
  4031d8:	2900      	cmp	r1, #0
  4031da:	460b      	mov	r3, r1
  4031dc:	4602      	mov	r2, r0
  4031de:	dd73      	ble.n	4032c8 <__ieee754_sqrt+0x104>
  4031e0:	150f      	asrs	r7, r1, #20
  4031e2:	d07e      	beq.n	4032e2 <__ieee754_sqrt+0x11e>
  4031e4:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  4031e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
  4031ec:	07f8      	lsls	r0, r7, #31
  4031ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4031f2:	d464      	bmi.n	4032be <__ieee754_sqrt+0xfa>
  4031f4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
  4031f8:	2600      	movs	r6, #0
  4031fa:	440b      	add	r3, r1
  4031fc:	107f      	asrs	r7, r7, #1
  4031fe:	0052      	lsls	r2, r2, #1
  403200:	46b6      	mov	lr, r6
  403202:	2016      	movs	r0, #22
  403204:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  403208:	eb0e 0401 	add.w	r4, lr, r1
  40320c:	429c      	cmp	r4, r3
  40320e:	ea4f 75d2 	mov.w	r5, r2, lsr #31
  403212:	ea4f 0242 	mov.w	r2, r2, lsl #1
  403216:	dc03      	bgt.n	403220 <__ieee754_sqrt+0x5c>
  403218:	1b1b      	subs	r3, r3, r4
  40321a:	eb04 0e01 	add.w	lr, r4, r1
  40321e:	440e      	add	r6, r1
  403220:	3801      	subs	r0, #1
  403222:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  403226:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40322a:	d1ed      	bne.n	403208 <__ieee754_sqrt+0x44>
  40322c:	4684      	mov	ip, r0
  40322e:	2420      	movs	r4, #32
  403230:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403234:	e009      	b.n	40324a <__ieee754_sqrt+0x86>
  403236:	d020      	beq.n	40327a <__ieee754_sqrt+0xb6>
  403238:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
  40323c:	3c01      	subs	r4, #1
  40323e:	ea4f 0151 	mov.w	r1, r1, lsr #1
  403242:	442b      	add	r3, r5
  403244:	ea4f 0242 	mov.w	r2, r2, lsl #1
  403248:	d020      	beq.n	40328c <__ieee754_sqrt+0xc8>
  40324a:	459e      	cmp	lr, r3
  40324c:	eb01 050c 	add.w	r5, r1, ip
  403250:	daf1      	bge.n	403236 <__ieee754_sqrt+0x72>
  403252:	2d00      	cmp	r5, #0
  403254:	eb05 0c01 	add.w	ip, r5, r1
  403258:	db09      	blt.n	40326e <__ieee754_sqrt+0xaa>
  40325a:	46f0      	mov	r8, lr
  40325c:	4295      	cmp	r5, r2
  40325e:	ebce 0303 	rsb	r3, lr, r3
  403262:	d900      	bls.n	403266 <__ieee754_sqrt+0xa2>
  403264:	3b01      	subs	r3, #1
  403266:	1b52      	subs	r2, r2, r5
  403268:	4408      	add	r0, r1
  40326a:	46c6      	mov	lr, r8
  40326c:	e7e4      	b.n	403238 <__ieee754_sqrt+0x74>
  40326e:	f1bc 0f00 	cmp.w	ip, #0
  403272:	dbf2      	blt.n	40325a <__ieee754_sqrt+0x96>
  403274:	f10e 0801 	add.w	r8, lr, #1
  403278:	e7f0      	b.n	40325c <__ieee754_sqrt+0x98>
  40327a:	4295      	cmp	r5, r2
  40327c:	d817      	bhi.n	4032ae <__ieee754_sqrt+0xea>
  40327e:	2d00      	cmp	r5, #0
  403280:	eb05 0c01 	add.w	ip, r5, r1
  403284:	db47      	blt.n	403316 <__ieee754_sqrt+0x152>
  403286:	4698      	mov	r8, r3
  403288:	2300      	movs	r3, #0
  40328a:	e7ec      	b.n	403266 <__ieee754_sqrt+0xa2>
  40328c:	4313      	orrs	r3, r2
  40328e:	d110      	bne.n	4032b2 <__ieee754_sqrt+0xee>
  403290:	0840      	lsrs	r0, r0, #1
  403292:	1073      	asrs	r3, r6, #1
  403294:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
  403298:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40329c:	07f2      	lsls	r2, r6, #31
  40329e:	eb03 5907 	add.w	r9, r3, r7, lsl #20
  4032a2:	bf48      	it	mi
  4032a4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
  4032a8:	4649      	mov	r1, r9
  4032aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032ae:	4673      	mov	r3, lr
  4032b0:	e7c2      	b.n	403238 <__ieee754_sqrt+0x74>
  4032b2:	1c41      	adds	r1, r0, #1
  4032b4:	d033      	beq.n	40331e <__ieee754_sqrt+0x15a>
  4032b6:	f000 0301 	and.w	r3, r0, #1
  4032ba:	4418      	add	r0, r3
  4032bc:	e7e8      	b.n	403290 <__ieee754_sqrt+0xcc>
  4032be:	005b      	lsls	r3, r3, #1
  4032c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
  4032c4:	0052      	lsls	r2, r2, #1
  4032c6:	e795      	b.n	4031f4 <__ieee754_sqrt+0x30>
  4032c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4032cc:	4306      	orrs	r6, r0
  4032ce:	d0ec      	beq.n	4032aa <__ieee754_sqrt+0xe6>
  4032d0:	bb69      	cbnz	r1, 40332e <__ieee754_sqrt+0x16a>
  4032d2:	460f      	mov	r7, r1
  4032d4:	0ad3      	lsrs	r3, r2, #11
  4032d6:	3f15      	subs	r7, #21
  4032d8:	0552      	lsls	r2, r2, #21
  4032da:	2b00      	cmp	r3, #0
  4032dc:	d0fa      	beq.n	4032d4 <__ieee754_sqrt+0x110>
  4032de:	02dd      	lsls	r5, r3, #11
  4032e0:	d420      	bmi.n	403324 <__ieee754_sqrt+0x160>
  4032e2:	2100      	movs	r1, #0
  4032e4:	e000      	b.n	4032e8 <__ieee754_sqrt+0x124>
  4032e6:	4601      	mov	r1, r0
  4032e8:	005b      	lsls	r3, r3, #1
  4032ea:	02dc      	lsls	r4, r3, #11
  4032ec:	f101 0001 	add.w	r0, r1, #1
  4032f0:	d5f9      	bpl.n	4032e6 <__ieee754_sqrt+0x122>
  4032f2:	f1c0 0420 	rsb	r4, r0, #32
  4032f6:	fa22 f404 	lsr.w	r4, r2, r4
  4032fa:	4323      	orrs	r3, r4
  4032fc:	1a7f      	subs	r7, r7, r1
  4032fe:	4082      	lsls	r2, r0
  403300:	e770      	b.n	4031e4 <__ieee754_sqrt+0x20>
  403302:	4602      	mov	r2, r0
  403304:	460b      	mov	r3, r1
  403306:	f000 f9d7 	bl	4036b8 <__aeabi_dmul>
  40330a:	462a      	mov	r2, r5
  40330c:	4623      	mov	r3, r4
  40330e:	f000 f821 	bl	403354 <__adddf3>
  403312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403316:	f1bc 0f00 	cmp.w	ip, #0
  40331a:	daab      	bge.n	403274 <__ieee754_sqrt+0xb0>
  40331c:	e7b3      	b.n	403286 <__ieee754_sqrt+0xc2>
  40331e:	3601      	adds	r6, #1
  403320:	4620      	mov	r0, r4
  403322:	e7b6      	b.n	403292 <__ieee754_sqrt+0xce>
  403324:	2420      	movs	r4, #32
  403326:	f04f 31ff 	mov.w	r1, #4294967295
  40332a:	2000      	movs	r0, #0
  40332c:	e7e3      	b.n	4032f6 <__ieee754_sqrt+0x132>
  40332e:	4602      	mov	r2, r0
  403330:	460b      	mov	r3, r1
  403332:	f000 f80d 	bl	403350 <__aeabi_dsub>
  403336:	4602      	mov	r2, r0
  403338:	460b      	mov	r3, r1
  40333a:	f000 fae7 	bl	40390c <__aeabi_ddiv>
  40333e:	e7b4      	b.n	4032aa <__ieee754_sqrt+0xe6>
  403340:	7ff00000 	.word	0x7ff00000

00403344 <matherr>:
  403344:	2000      	movs	r0, #0
  403346:	4770      	bx	lr

00403348 <__aeabi_drsub>:
  403348:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40334c:	e002      	b.n	403354 <__adddf3>
  40334e:	bf00      	nop

00403350 <__aeabi_dsub>:
  403350:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403354 <__adddf3>:
  403354:	b530      	push	{r4, r5, lr}
  403356:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40335a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40335e:	ea94 0f05 	teq	r4, r5
  403362:	bf08      	it	eq
  403364:	ea90 0f02 	teqeq	r0, r2
  403368:	bf1f      	itttt	ne
  40336a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40336e:	ea55 0c02 	orrsne.w	ip, r5, r2
  403372:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  403376:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40337a:	f000 80e2 	beq.w	403542 <__adddf3+0x1ee>
  40337e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  403382:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  403386:	bfb8      	it	lt
  403388:	426d      	neglt	r5, r5
  40338a:	dd0c      	ble.n	4033a6 <__adddf3+0x52>
  40338c:	442c      	add	r4, r5
  40338e:	ea80 0202 	eor.w	r2, r0, r2
  403392:	ea81 0303 	eor.w	r3, r1, r3
  403396:	ea82 0000 	eor.w	r0, r2, r0
  40339a:	ea83 0101 	eor.w	r1, r3, r1
  40339e:	ea80 0202 	eor.w	r2, r0, r2
  4033a2:	ea81 0303 	eor.w	r3, r1, r3
  4033a6:	2d36      	cmp	r5, #54	; 0x36
  4033a8:	bf88      	it	hi
  4033aa:	bd30      	pophi	{r4, r5, pc}
  4033ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4033b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4033b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4033b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4033bc:	d002      	beq.n	4033c4 <__adddf3+0x70>
  4033be:	4240      	negs	r0, r0
  4033c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4033c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4033c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4033cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4033d0:	d002      	beq.n	4033d8 <__adddf3+0x84>
  4033d2:	4252      	negs	r2, r2
  4033d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4033d8:	ea94 0f05 	teq	r4, r5
  4033dc:	f000 80a7 	beq.w	40352e <__adddf3+0x1da>
  4033e0:	f1a4 0401 	sub.w	r4, r4, #1
  4033e4:	f1d5 0e20 	rsbs	lr, r5, #32
  4033e8:	db0d      	blt.n	403406 <__adddf3+0xb2>
  4033ea:	fa02 fc0e 	lsl.w	ip, r2, lr
  4033ee:	fa22 f205 	lsr.w	r2, r2, r5
  4033f2:	1880      	adds	r0, r0, r2
  4033f4:	f141 0100 	adc.w	r1, r1, #0
  4033f8:	fa03 f20e 	lsl.w	r2, r3, lr
  4033fc:	1880      	adds	r0, r0, r2
  4033fe:	fa43 f305 	asr.w	r3, r3, r5
  403402:	4159      	adcs	r1, r3
  403404:	e00e      	b.n	403424 <__adddf3+0xd0>
  403406:	f1a5 0520 	sub.w	r5, r5, #32
  40340a:	f10e 0e20 	add.w	lr, lr, #32
  40340e:	2a01      	cmp	r2, #1
  403410:	fa03 fc0e 	lsl.w	ip, r3, lr
  403414:	bf28      	it	cs
  403416:	f04c 0c02 	orrcs.w	ip, ip, #2
  40341a:	fa43 f305 	asr.w	r3, r3, r5
  40341e:	18c0      	adds	r0, r0, r3
  403420:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403428:	d507      	bpl.n	40343a <__adddf3+0xe6>
  40342a:	f04f 0e00 	mov.w	lr, #0
  40342e:	f1dc 0c00 	rsbs	ip, ip, #0
  403432:	eb7e 0000 	sbcs.w	r0, lr, r0
  403436:	eb6e 0101 	sbc.w	r1, lr, r1
  40343a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40343e:	d31b      	bcc.n	403478 <__adddf3+0x124>
  403440:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403444:	d30c      	bcc.n	403460 <__adddf3+0x10c>
  403446:	0849      	lsrs	r1, r1, #1
  403448:	ea5f 0030 	movs.w	r0, r0, rrx
  40344c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403450:	f104 0401 	add.w	r4, r4, #1
  403454:	ea4f 5244 	mov.w	r2, r4, lsl #21
  403458:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40345c:	f080 809a 	bcs.w	403594 <__adddf3+0x240>
  403460:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403464:	bf08      	it	eq
  403466:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40346a:	f150 0000 	adcs.w	r0, r0, #0
  40346e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403472:	ea41 0105 	orr.w	r1, r1, r5
  403476:	bd30      	pop	{r4, r5, pc}
  403478:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40347c:	4140      	adcs	r0, r0
  40347e:	eb41 0101 	adc.w	r1, r1, r1
  403482:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403486:	f1a4 0401 	sub.w	r4, r4, #1
  40348a:	d1e9      	bne.n	403460 <__adddf3+0x10c>
  40348c:	f091 0f00 	teq	r1, #0
  403490:	bf04      	itt	eq
  403492:	4601      	moveq	r1, r0
  403494:	2000      	moveq	r0, #0
  403496:	fab1 f381 	clz	r3, r1
  40349a:	bf08      	it	eq
  40349c:	3320      	addeq	r3, #32
  40349e:	f1a3 030b 	sub.w	r3, r3, #11
  4034a2:	f1b3 0220 	subs.w	r2, r3, #32
  4034a6:	da0c      	bge.n	4034c2 <__adddf3+0x16e>
  4034a8:	320c      	adds	r2, #12
  4034aa:	dd08      	ble.n	4034be <__adddf3+0x16a>
  4034ac:	f102 0c14 	add.w	ip, r2, #20
  4034b0:	f1c2 020c 	rsb	r2, r2, #12
  4034b4:	fa01 f00c 	lsl.w	r0, r1, ip
  4034b8:	fa21 f102 	lsr.w	r1, r1, r2
  4034bc:	e00c      	b.n	4034d8 <__adddf3+0x184>
  4034be:	f102 0214 	add.w	r2, r2, #20
  4034c2:	bfd8      	it	le
  4034c4:	f1c2 0c20 	rsble	ip, r2, #32
  4034c8:	fa01 f102 	lsl.w	r1, r1, r2
  4034cc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4034d0:	bfdc      	itt	le
  4034d2:	ea41 010c 	orrle.w	r1, r1, ip
  4034d6:	4090      	lslle	r0, r2
  4034d8:	1ae4      	subs	r4, r4, r3
  4034da:	bfa2      	ittt	ge
  4034dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4034e0:	4329      	orrge	r1, r5
  4034e2:	bd30      	popge	{r4, r5, pc}
  4034e4:	ea6f 0404 	mvn.w	r4, r4
  4034e8:	3c1f      	subs	r4, #31
  4034ea:	da1c      	bge.n	403526 <__adddf3+0x1d2>
  4034ec:	340c      	adds	r4, #12
  4034ee:	dc0e      	bgt.n	40350e <__adddf3+0x1ba>
  4034f0:	f104 0414 	add.w	r4, r4, #20
  4034f4:	f1c4 0220 	rsb	r2, r4, #32
  4034f8:	fa20 f004 	lsr.w	r0, r0, r4
  4034fc:	fa01 f302 	lsl.w	r3, r1, r2
  403500:	ea40 0003 	orr.w	r0, r0, r3
  403504:	fa21 f304 	lsr.w	r3, r1, r4
  403508:	ea45 0103 	orr.w	r1, r5, r3
  40350c:	bd30      	pop	{r4, r5, pc}
  40350e:	f1c4 040c 	rsb	r4, r4, #12
  403512:	f1c4 0220 	rsb	r2, r4, #32
  403516:	fa20 f002 	lsr.w	r0, r0, r2
  40351a:	fa01 f304 	lsl.w	r3, r1, r4
  40351e:	ea40 0003 	orr.w	r0, r0, r3
  403522:	4629      	mov	r1, r5
  403524:	bd30      	pop	{r4, r5, pc}
  403526:	fa21 f004 	lsr.w	r0, r1, r4
  40352a:	4629      	mov	r1, r5
  40352c:	bd30      	pop	{r4, r5, pc}
  40352e:	f094 0f00 	teq	r4, #0
  403532:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403536:	bf06      	itte	eq
  403538:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40353c:	3401      	addeq	r4, #1
  40353e:	3d01      	subne	r5, #1
  403540:	e74e      	b.n	4033e0 <__adddf3+0x8c>
  403542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403546:	bf18      	it	ne
  403548:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40354c:	d029      	beq.n	4035a2 <__adddf3+0x24e>
  40354e:	ea94 0f05 	teq	r4, r5
  403552:	bf08      	it	eq
  403554:	ea90 0f02 	teqeq	r0, r2
  403558:	d005      	beq.n	403566 <__adddf3+0x212>
  40355a:	ea54 0c00 	orrs.w	ip, r4, r0
  40355e:	bf04      	itt	eq
  403560:	4619      	moveq	r1, r3
  403562:	4610      	moveq	r0, r2
  403564:	bd30      	pop	{r4, r5, pc}
  403566:	ea91 0f03 	teq	r1, r3
  40356a:	bf1e      	ittt	ne
  40356c:	2100      	movne	r1, #0
  40356e:	2000      	movne	r0, #0
  403570:	bd30      	popne	{r4, r5, pc}
  403572:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  403576:	d105      	bne.n	403584 <__adddf3+0x230>
  403578:	0040      	lsls	r0, r0, #1
  40357a:	4149      	adcs	r1, r1
  40357c:	bf28      	it	cs
  40357e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  403582:	bd30      	pop	{r4, r5, pc}
  403584:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  403588:	bf3c      	itt	cc
  40358a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40358e:	bd30      	popcc	{r4, r5, pc}
  403590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403594:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  403598:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40359c:	f04f 0000 	mov.w	r0, #0
  4035a0:	bd30      	pop	{r4, r5, pc}
  4035a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4035a6:	bf1a      	itte	ne
  4035a8:	4619      	movne	r1, r3
  4035aa:	4610      	movne	r0, r2
  4035ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4035b0:	bf1c      	itt	ne
  4035b2:	460b      	movne	r3, r1
  4035b4:	4602      	movne	r2, r0
  4035b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4035ba:	bf06      	itte	eq
  4035bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4035c0:	ea91 0f03 	teqeq	r1, r3
  4035c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4035c8:	bd30      	pop	{r4, r5, pc}
  4035ca:	bf00      	nop

004035cc <__aeabi_ui2d>:
  4035cc:	f090 0f00 	teq	r0, #0
  4035d0:	bf04      	itt	eq
  4035d2:	2100      	moveq	r1, #0
  4035d4:	4770      	bxeq	lr
  4035d6:	b530      	push	{r4, r5, lr}
  4035d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4035dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4035e0:	f04f 0500 	mov.w	r5, #0
  4035e4:	f04f 0100 	mov.w	r1, #0
  4035e8:	e750      	b.n	40348c <__adddf3+0x138>
  4035ea:	bf00      	nop

004035ec <__aeabi_i2d>:
  4035ec:	f090 0f00 	teq	r0, #0
  4035f0:	bf04      	itt	eq
  4035f2:	2100      	moveq	r1, #0
  4035f4:	4770      	bxeq	lr
  4035f6:	b530      	push	{r4, r5, lr}
  4035f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4035fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403600:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403604:	bf48      	it	mi
  403606:	4240      	negmi	r0, r0
  403608:	f04f 0100 	mov.w	r1, #0
  40360c:	e73e      	b.n	40348c <__adddf3+0x138>
  40360e:	bf00      	nop

00403610 <__aeabi_f2d>:
  403610:	0042      	lsls	r2, r0, #1
  403612:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403616:	ea4f 0131 	mov.w	r1, r1, rrx
  40361a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40361e:	bf1f      	itttt	ne
  403620:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403624:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403628:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40362c:	4770      	bxne	lr
  40362e:	f092 0f00 	teq	r2, #0
  403632:	bf14      	ite	ne
  403634:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403638:	4770      	bxeq	lr
  40363a:	b530      	push	{r4, r5, lr}
  40363c:	f44f 7460 	mov.w	r4, #896	; 0x380
  403640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403648:	e720      	b.n	40348c <__adddf3+0x138>
  40364a:	bf00      	nop

0040364c <__aeabi_ul2d>:
  40364c:	ea50 0201 	orrs.w	r2, r0, r1
  403650:	bf08      	it	eq
  403652:	4770      	bxeq	lr
  403654:	b530      	push	{r4, r5, lr}
  403656:	f04f 0500 	mov.w	r5, #0
  40365a:	e00a      	b.n	403672 <__aeabi_l2d+0x16>

0040365c <__aeabi_l2d>:
  40365c:	ea50 0201 	orrs.w	r2, r0, r1
  403660:	bf08      	it	eq
  403662:	4770      	bxeq	lr
  403664:	b530      	push	{r4, r5, lr}
  403666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40366a:	d502      	bpl.n	403672 <__aeabi_l2d+0x16>
  40366c:	4240      	negs	r0, r0
  40366e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403672:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403676:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40367a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40367e:	f43f aedc 	beq.w	40343a <__adddf3+0xe6>
  403682:	f04f 0203 	mov.w	r2, #3
  403686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40368a:	bf18      	it	ne
  40368c:	3203      	addne	r2, #3
  40368e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  403692:	bf18      	it	ne
  403694:	3203      	addne	r2, #3
  403696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40369a:	f1c2 0320 	rsb	r3, r2, #32
  40369e:	fa00 fc03 	lsl.w	ip, r0, r3
  4036a2:	fa20 f002 	lsr.w	r0, r0, r2
  4036a6:	fa01 fe03 	lsl.w	lr, r1, r3
  4036aa:	ea40 000e 	orr.w	r0, r0, lr
  4036ae:	fa21 f102 	lsr.w	r1, r1, r2
  4036b2:	4414      	add	r4, r2
  4036b4:	e6c1      	b.n	40343a <__adddf3+0xe6>
  4036b6:	bf00      	nop

004036b8 <__aeabi_dmul>:
  4036b8:	b570      	push	{r4, r5, r6, lr}
  4036ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4036be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4036c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4036c6:	bf1d      	ittte	ne
  4036c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4036cc:	ea94 0f0c 	teqne	r4, ip
  4036d0:	ea95 0f0c 	teqne	r5, ip
  4036d4:	f000 f8de 	bleq	403894 <__aeabi_dmul+0x1dc>
  4036d8:	442c      	add	r4, r5
  4036da:	ea81 0603 	eor.w	r6, r1, r3
  4036de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4036e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4036e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4036ea:	bf18      	it	ne
  4036ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4036f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4036f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4036f8:	d038      	beq.n	40376c <__aeabi_dmul+0xb4>
  4036fa:	fba0 ce02 	umull	ip, lr, r0, r2
  4036fe:	f04f 0500 	mov.w	r5, #0
  403702:	fbe1 e502 	umlal	lr, r5, r1, r2
  403706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40370a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40370e:	f04f 0600 	mov.w	r6, #0
  403712:	fbe1 5603 	umlal	r5, r6, r1, r3
  403716:	f09c 0f00 	teq	ip, #0
  40371a:	bf18      	it	ne
  40371c:	f04e 0e01 	orrne.w	lr, lr, #1
  403720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40372c:	d204      	bcs.n	403738 <__aeabi_dmul+0x80>
  40372e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403732:	416d      	adcs	r5, r5
  403734:	eb46 0606 	adc.w	r6, r6, r6
  403738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40373c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  403748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40374c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403750:	bf88      	it	hi
  403752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403756:	d81e      	bhi.n	403796 <__aeabi_dmul+0xde>
  403758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40375c:	bf08      	it	eq
  40375e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403762:	f150 0000 	adcs.w	r0, r0, #0
  403766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40376a:	bd70      	pop	{r4, r5, r6, pc}
  40376c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403770:	ea46 0101 	orr.w	r1, r6, r1
  403774:	ea40 0002 	orr.w	r0, r0, r2
  403778:	ea81 0103 	eor.w	r1, r1, r3
  40377c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  403780:	bfc2      	ittt	gt
  403782:	ebd4 050c 	rsbsgt	r5, r4, ip
  403786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40378a:	bd70      	popgt	{r4, r5, r6, pc}
  40378c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403790:	f04f 0e00 	mov.w	lr, #0
  403794:	3c01      	subs	r4, #1
  403796:	f300 80ab 	bgt.w	4038f0 <__aeabi_dmul+0x238>
  40379a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40379e:	bfde      	ittt	le
  4037a0:	2000      	movle	r0, #0
  4037a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4037a6:	bd70      	pople	{r4, r5, r6, pc}
  4037a8:	f1c4 0400 	rsb	r4, r4, #0
  4037ac:	3c20      	subs	r4, #32
  4037ae:	da35      	bge.n	40381c <__aeabi_dmul+0x164>
  4037b0:	340c      	adds	r4, #12
  4037b2:	dc1b      	bgt.n	4037ec <__aeabi_dmul+0x134>
  4037b4:	f104 0414 	add.w	r4, r4, #20
  4037b8:	f1c4 0520 	rsb	r5, r4, #32
  4037bc:	fa00 f305 	lsl.w	r3, r0, r5
  4037c0:	fa20 f004 	lsr.w	r0, r0, r4
  4037c4:	fa01 f205 	lsl.w	r2, r1, r5
  4037c8:	ea40 0002 	orr.w	r0, r0, r2
  4037cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4037d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4037d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4037d8:	fa21 f604 	lsr.w	r6, r1, r4
  4037dc:	eb42 0106 	adc.w	r1, r2, r6
  4037e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4037e4:	bf08      	it	eq
  4037e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4037ea:	bd70      	pop	{r4, r5, r6, pc}
  4037ec:	f1c4 040c 	rsb	r4, r4, #12
  4037f0:	f1c4 0520 	rsb	r5, r4, #32
  4037f4:	fa00 f304 	lsl.w	r3, r0, r4
  4037f8:	fa20 f005 	lsr.w	r0, r0, r5
  4037fc:	fa01 f204 	lsl.w	r2, r1, r4
  403800:	ea40 0002 	orr.w	r0, r0, r2
  403804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40380c:	f141 0100 	adc.w	r1, r1, #0
  403810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403814:	bf08      	it	eq
  403816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40381a:	bd70      	pop	{r4, r5, r6, pc}
  40381c:	f1c4 0520 	rsb	r5, r4, #32
  403820:	fa00 f205 	lsl.w	r2, r0, r5
  403824:	ea4e 0e02 	orr.w	lr, lr, r2
  403828:	fa20 f304 	lsr.w	r3, r0, r4
  40382c:	fa01 f205 	lsl.w	r2, r1, r5
  403830:	ea43 0302 	orr.w	r3, r3, r2
  403834:	fa21 f004 	lsr.w	r0, r1, r4
  403838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40383c:	fa21 f204 	lsr.w	r2, r1, r4
  403840:	ea20 0002 	bic.w	r0, r0, r2
  403844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  403848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40384c:	bf08      	it	eq
  40384e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403852:	bd70      	pop	{r4, r5, r6, pc}
  403854:	f094 0f00 	teq	r4, #0
  403858:	d10f      	bne.n	40387a <__aeabi_dmul+0x1c2>
  40385a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40385e:	0040      	lsls	r0, r0, #1
  403860:	eb41 0101 	adc.w	r1, r1, r1
  403864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403868:	bf08      	it	eq
  40386a:	3c01      	subeq	r4, #1
  40386c:	d0f7      	beq.n	40385e <__aeabi_dmul+0x1a6>
  40386e:	ea41 0106 	orr.w	r1, r1, r6
  403872:	f095 0f00 	teq	r5, #0
  403876:	bf18      	it	ne
  403878:	4770      	bxne	lr
  40387a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40387e:	0052      	lsls	r2, r2, #1
  403880:	eb43 0303 	adc.w	r3, r3, r3
  403884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  403888:	bf08      	it	eq
  40388a:	3d01      	subeq	r5, #1
  40388c:	d0f7      	beq.n	40387e <__aeabi_dmul+0x1c6>
  40388e:	ea43 0306 	orr.w	r3, r3, r6
  403892:	4770      	bx	lr
  403894:	ea94 0f0c 	teq	r4, ip
  403898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40389c:	bf18      	it	ne
  40389e:	ea95 0f0c 	teqne	r5, ip
  4038a2:	d00c      	beq.n	4038be <__aeabi_dmul+0x206>
  4038a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4038a8:	bf18      	it	ne
  4038aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4038ae:	d1d1      	bne.n	403854 <__aeabi_dmul+0x19c>
  4038b0:	ea81 0103 	eor.w	r1, r1, r3
  4038b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4038b8:	f04f 0000 	mov.w	r0, #0
  4038bc:	bd70      	pop	{r4, r5, r6, pc}
  4038be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4038c2:	bf06      	itte	eq
  4038c4:	4610      	moveq	r0, r2
  4038c6:	4619      	moveq	r1, r3
  4038c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4038cc:	d019      	beq.n	403902 <__aeabi_dmul+0x24a>
  4038ce:	ea94 0f0c 	teq	r4, ip
  4038d2:	d102      	bne.n	4038da <__aeabi_dmul+0x222>
  4038d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4038d8:	d113      	bne.n	403902 <__aeabi_dmul+0x24a>
  4038da:	ea95 0f0c 	teq	r5, ip
  4038de:	d105      	bne.n	4038ec <__aeabi_dmul+0x234>
  4038e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4038e4:	bf1c      	itt	ne
  4038e6:	4610      	movne	r0, r2
  4038e8:	4619      	movne	r1, r3
  4038ea:	d10a      	bne.n	403902 <__aeabi_dmul+0x24a>
  4038ec:	ea81 0103 	eor.w	r1, r1, r3
  4038f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4038f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4038f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4038fc:	f04f 0000 	mov.w	r0, #0
  403900:	bd70      	pop	{r4, r5, r6, pc}
  403902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40390a:	bd70      	pop	{r4, r5, r6, pc}

0040390c <__aeabi_ddiv>:
  40390c:	b570      	push	{r4, r5, r6, lr}
  40390e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40391a:	bf1d      	ittte	ne
  40391c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403920:	ea94 0f0c 	teqne	r4, ip
  403924:	ea95 0f0c 	teqne	r5, ip
  403928:	f000 f8a7 	bleq	403a7a <__aeabi_ddiv+0x16e>
  40392c:	eba4 0405 	sub.w	r4, r4, r5
  403930:	ea81 0e03 	eor.w	lr, r1, r3
  403934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403938:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40393c:	f000 8088 	beq.w	403a50 <__aeabi_ddiv+0x144>
  403940:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  403948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40394c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403950:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  403958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40395c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403964:	429d      	cmp	r5, r3
  403966:	bf08      	it	eq
  403968:	4296      	cmpeq	r6, r2
  40396a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40396e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403972:	d202      	bcs.n	40397a <__aeabi_ddiv+0x6e>
  403974:	085b      	lsrs	r3, r3, #1
  403976:	ea4f 0232 	mov.w	r2, r2, rrx
  40397a:	1ab6      	subs	r6, r6, r2
  40397c:	eb65 0503 	sbc.w	r5, r5, r3
  403980:	085b      	lsrs	r3, r3, #1
  403982:	ea4f 0232 	mov.w	r2, r2, rrx
  403986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40398a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40398e:	ebb6 0e02 	subs.w	lr, r6, r2
  403992:	eb75 0e03 	sbcs.w	lr, r5, r3
  403996:	bf22      	ittt	cs
  403998:	1ab6      	subcs	r6, r6, r2
  40399a:	4675      	movcs	r5, lr
  40399c:	ea40 000c 	orrcs.w	r0, r0, ip
  4039a0:	085b      	lsrs	r3, r3, #1
  4039a2:	ea4f 0232 	mov.w	r2, r2, rrx
  4039a6:	ebb6 0e02 	subs.w	lr, r6, r2
  4039aa:	eb75 0e03 	sbcs.w	lr, r5, r3
  4039ae:	bf22      	ittt	cs
  4039b0:	1ab6      	subcs	r6, r6, r2
  4039b2:	4675      	movcs	r5, lr
  4039b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4039b8:	085b      	lsrs	r3, r3, #1
  4039ba:	ea4f 0232 	mov.w	r2, r2, rrx
  4039be:	ebb6 0e02 	subs.w	lr, r6, r2
  4039c2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4039c6:	bf22      	ittt	cs
  4039c8:	1ab6      	subcs	r6, r6, r2
  4039ca:	4675      	movcs	r5, lr
  4039cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4039d0:	085b      	lsrs	r3, r3, #1
  4039d2:	ea4f 0232 	mov.w	r2, r2, rrx
  4039d6:	ebb6 0e02 	subs.w	lr, r6, r2
  4039da:	eb75 0e03 	sbcs.w	lr, r5, r3
  4039de:	bf22      	ittt	cs
  4039e0:	1ab6      	subcs	r6, r6, r2
  4039e2:	4675      	movcs	r5, lr
  4039e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4039e8:	ea55 0e06 	orrs.w	lr, r5, r6
  4039ec:	d018      	beq.n	403a20 <__aeabi_ddiv+0x114>
  4039ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4039f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4039f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4039fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4039fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403a0a:	d1c0      	bne.n	40398e <__aeabi_ddiv+0x82>
  403a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a10:	d10b      	bne.n	403a2a <__aeabi_ddiv+0x11e>
  403a12:	ea41 0100 	orr.w	r1, r1, r0
  403a16:	f04f 0000 	mov.w	r0, #0
  403a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403a1e:	e7b6      	b.n	40398e <__aeabi_ddiv+0x82>
  403a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a24:	bf04      	itt	eq
  403a26:	4301      	orreq	r1, r0
  403a28:	2000      	moveq	r0, #0
  403a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403a2e:	bf88      	it	hi
  403a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403a34:	f63f aeaf 	bhi.w	403796 <__aeabi_dmul+0xde>
  403a38:	ebb5 0c03 	subs.w	ip, r5, r3
  403a3c:	bf04      	itt	eq
  403a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
  403a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403a46:	f150 0000 	adcs.w	r0, r0, #0
  403a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403a4e:	bd70      	pop	{r4, r5, r6, pc}
  403a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403a5c:	bfc2      	ittt	gt
  403a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
  403a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403a66:	bd70      	popgt	{r4, r5, r6, pc}
  403a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403a6c:	f04f 0e00 	mov.w	lr, #0
  403a70:	3c01      	subs	r4, #1
  403a72:	e690      	b.n	403796 <__aeabi_dmul+0xde>
  403a74:	ea45 0e06 	orr.w	lr, r5, r6
  403a78:	e68d      	b.n	403796 <__aeabi_dmul+0xde>
  403a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403a7e:	ea94 0f0c 	teq	r4, ip
  403a82:	bf08      	it	eq
  403a84:	ea95 0f0c 	teqeq	r5, ip
  403a88:	f43f af3b 	beq.w	403902 <__aeabi_dmul+0x24a>
  403a8c:	ea94 0f0c 	teq	r4, ip
  403a90:	d10a      	bne.n	403aa8 <__aeabi_ddiv+0x19c>
  403a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403a96:	f47f af34 	bne.w	403902 <__aeabi_dmul+0x24a>
  403a9a:	ea95 0f0c 	teq	r5, ip
  403a9e:	f47f af25 	bne.w	4038ec <__aeabi_dmul+0x234>
  403aa2:	4610      	mov	r0, r2
  403aa4:	4619      	mov	r1, r3
  403aa6:	e72c      	b.n	403902 <__aeabi_dmul+0x24a>
  403aa8:	ea95 0f0c 	teq	r5, ip
  403aac:	d106      	bne.n	403abc <__aeabi_ddiv+0x1b0>
  403aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403ab2:	f43f aefd 	beq.w	4038b0 <__aeabi_dmul+0x1f8>
  403ab6:	4610      	mov	r0, r2
  403ab8:	4619      	mov	r1, r3
  403aba:	e722      	b.n	403902 <__aeabi_dmul+0x24a>
  403abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403ac0:	bf18      	it	ne
  403ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403ac6:	f47f aec5 	bne.w	403854 <__aeabi_dmul+0x19c>
  403aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403ace:	f47f af0d 	bne.w	4038ec <__aeabi_dmul+0x234>
  403ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403ad6:	f47f aeeb 	bne.w	4038b0 <__aeabi_dmul+0x1f8>
  403ada:	e712      	b.n	403902 <__aeabi_dmul+0x24a>

00403adc <__gedf2>:
  403adc:	f04f 3cff 	mov.w	ip, #4294967295
  403ae0:	e006      	b.n	403af0 <__cmpdf2+0x4>
  403ae2:	bf00      	nop

00403ae4 <__ledf2>:
  403ae4:	f04f 0c01 	mov.w	ip, #1
  403ae8:	e002      	b.n	403af0 <__cmpdf2+0x4>
  403aea:	bf00      	nop

00403aec <__cmpdf2>:
  403aec:	f04f 0c01 	mov.w	ip, #1
  403af0:	f84d cd04 	str.w	ip, [sp, #-4]!
  403af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403b00:	bf18      	it	ne
  403b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403b06:	d01b      	beq.n	403b40 <__cmpdf2+0x54>
  403b08:	b001      	add	sp, #4
  403b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403b0e:	bf0c      	ite	eq
  403b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403b14:	ea91 0f03 	teqne	r1, r3
  403b18:	bf02      	ittt	eq
  403b1a:	ea90 0f02 	teqeq	r0, r2
  403b1e:	2000      	moveq	r0, #0
  403b20:	4770      	bxeq	lr
  403b22:	f110 0f00 	cmn.w	r0, #0
  403b26:	ea91 0f03 	teq	r1, r3
  403b2a:	bf58      	it	pl
  403b2c:	4299      	cmppl	r1, r3
  403b2e:	bf08      	it	eq
  403b30:	4290      	cmpeq	r0, r2
  403b32:	bf2c      	ite	cs
  403b34:	17d8      	asrcs	r0, r3, #31
  403b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403b3a:	f040 0001 	orr.w	r0, r0, #1
  403b3e:	4770      	bx	lr
  403b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403b48:	d102      	bne.n	403b50 <__cmpdf2+0x64>
  403b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403b4e:	d107      	bne.n	403b60 <__cmpdf2+0x74>
  403b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403b58:	d1d6      	bne.n	403b08 <__cmpdf2+0x1c>
  403b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403b5e:	d0d3      	beq.n	403b08 <__cmpdf2+0x1c>
  403b60:	f85d 0b04 	ldr.w	r0, [sp], #4
  403b64:	4770      	bx	lr
  403b66:	bf00      	nop

00403b68 <__aeabi_cdrcmple>:
  403b68:	4684      	mov	ip, r0
  403b6a:	4610      	mov	r0, r2
  403b6c:	4662      	mov	r2, ip
  403b6e:	468c      	mov	ip, r1
  403b70:	4619      	mov	r1, r3
  403b72:	4663      	mov	r3, ip
  403b74:	e000      	b.n	403b78 <__aeabi_cdcmpeq>
  403b76:	bf00      	nop

00403b78 <__aeabi_cdcmpeq>:
  403b78:	b501      	push	{r0, lr}
  403b7a:	f7ff ffb7 	bl	403aec <__cmpdf2>
  403b7e:	2800      	cmp	r0, #0
  403b80:	bf48      	it	mi
  403b82:	f110 0f00 	cmnmi.w	r0, #0
  403b86:	bd01      	pop	{r0, pc}

00403b88 <__aeabi_dcmpeq>:
  403b88:	f84d ed08 	str.w	lr, [sp, #-8]!
  403b8c:	f7ff fff4 	bl	403b78 <__aeabi_cdcmpeq>
  403b90:	bf0c      	ite	eq
  403b92:	2001      	moveq	r0, #1
  403b94:	2000      	movne	r0, #0
  403b96:	f85d fb08 	ldr.w	pc, [sp], #8
  403b9a:	bf00      	nop

00403b9c <__aeabi_dcmplt>:
  403b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
  403ba0:	f7ff ffea 	bl	403b78 <__aeabi_cdcmpeq>
  403ba4:	bf34      	ite	cc
  403ba6:	2001      	movcc	r0, #1
  403ba8:	2000      	movcs	r0, #0
  403baa:	f85d fb08 	ldr.w	pc, [sp], #8
  403bae:	bf00      	nop

00403bb0 <__aeabi_dcmple>:
  403bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bb4:	f7ff ffe0 	bl	403b78 <__aeabi_cdcmpeq>
  403bb8:	bf94      	ite	ls
  403bba:	2001      	movls	r0, #1
  403bbc:	2000      	movhi	r0, #0
  403bbe:	f85d fb08 	ldr.w	pc, [sp], #8
  403bc2:	bf00      	nop

00403bc4 <__aeabi_dcmpge>:
  403bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bc8:	f7ff ffce 	bl	403b68 <__aeabi_cdrcmple>
  403bcc:	bf94      	ite	ls
  403bce:	2001      	movls	r0, #1
  403bd0:	2000      	movhi	r0, #0
  403bd2:	f85d fb08 	ldr.w	pc, [sp], #8
  403bd6:	bf00      	nop

00403bd8 <__aeabi_dcmpgt>:
  403bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bdc:	f7ff ffc4 	bl	403b68 <__aeabi_cdrcmple>
  403be0:	bf34      	ite	cc
  403be2:	2001      	movcc	r0, #1
  403be4:	2000      	movcs	r0, #0
  403be6:	f85d fb08 	ldr.w	pc, [sp], #8
  403bea:	bf00      	nop

00403bec <__aeabi_dcmpun>:
  403bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403bf4:	d102      	bne.n	403bfc <__aeabi_dcmpun+0x10>
  403bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403bfa:	d10a      	bne.n	403c12 <__aeabi_dcmpun+0x26>
  403bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403c04:	d102      	bne.n	403c0c <__aeabi_dcmpun+0x20>
  403c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403c0a:	d102      	bne.n	403c12 <__aeabi_dcmpun+0x26>
  403c0c:	f04f 0000 	mov.w	r0, #0
  403c10:	4770      	bx	lr
  403c12:	f04f 0001 	mov.w	r0, #1
  403c16:	4770      	bx	lr

00403c18 <__aeabi_d2iz>:
  403c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403c20:	d215      	bcs.n	403c4e <__aeabi_d2iz+0x36>
  403c22:	d511      	bpl.n	403c48 <__aeabi_d2iz+0x30>
  403c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403c2c:	d912      	bls.n	403c54 <__aeabi_d2iz+0x3c>
  403c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403c3e:	fa23 f002 	lsr.w	r0, r3, r2
  403c42:	bf18      	it	ne
  403c44:	4240      	negne	r0, r0
  403c46:	4770      	bx	lr
  403c48:	f04f 0000 	mov.w	r0, #0
  403c4c:	4770      	bx	lr
  403c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403c52:	d105      	bne.n	403c60 <__aeabi_d2iz+0x48>
  403c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403c58:	bf08      	it	eq
  403c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  403c5e:	4770      	bx	lr
  403c60:	f04f 0000 	mov.w	r0, #0
  403c64:	4770      	bx	lr
  403c66:	bf00      	nop

00403c68 <__aeabi_d2uiz>:
  403c68:	004a      	lsls	r2, r1, #1
  403c6a:	d211      	bcs.n	403c90 <__aeabi_d2uiz+0x28>
  403c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403c70:	d211      	bcs.n	403c96 <__aeabi_d2uiz+0x2e>
  403c72:	d50d      	bpl.n	403c90 <__aeabi_d2uiz+0x28>
  403c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403c7c:	d40e      	bmi.n	403c9c <__aeabi_d2uiz+0x34>
  403c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403c8a:	fa23 f002 	lsr.w	r0, r3, r2
  403c8e:	4770      	bx	lr
  403c90:	f04f 0000 	mov.w	r0, #0
  403c94:	4770      	bx	lr
  403c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403c9a:	d102      	bne.n	403ca2 <__aeabi_d2uiz+0x3a>
  403c9c:	f04f 30ff 	mov.w	r0, #4294967295
  403ca0:	4770      	bx	lr
  403ca2:	f04f 0000 	mov.w	r0, #0
  403ca6:	4770      	bx	lr

00403ca8 <__aeabi_d2f>:
  403ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  403cb0:	bf24      	itt	cs
  403cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  403cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  403cba:	d90d      	bls.n	403cd8 <__aeabi_d2f+0x30>
  403cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  403cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  403cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  403ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  403cd0:	bf08      	it	eq
  403cd2:	f020 0001 	biceq.w	r0, r0, #1
  403cd6:	4770      	bx	lr
  403cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  403cdc:	d121      	bne.n	403d22 <__aeabi_d2f+0x7a>
  403cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  403ce2:	bfbc      	itt	lt
  403ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  403ce8:	4770      	bxlt	lr
  403cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
  403cf2:	f1c2 0218 	rsb	r2, r2, #24
  403cf6:	f1c2 0c20 	rsb	ip, r2, #32
  403cfa:	fa10 f30c 	lsls.w	r3, r0, ip
  403cfe:	fa20 f002 	lsr.w	r0, r0, r2
  403d02:	bf18      	it	ne
  403d04:	f040 0001 	orrne.w	r0, r0, #1
  403d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  403d10:	fa03 fc0c 	lsl.w	ip, r3, ip
  403d14:	ea40 000c 	orr.w	r0, r0, ip
  403d18:	fa23 f302 	lsr.w	r3, r3, r2
  403d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  403d20:	e7cc      	b.n	403cbc <__aeabi_d2f+0x14>
  403d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
  403d26:	d107      	bne.n	403d38 <__aeabi_d2f+0x90>
  403d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  403d2c:	bf1e      	ittt	ne
  403d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  403d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  403d36:	4770      	bxne	lr
  403d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  403d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403d44:	4770      	bx	lr
  403d46:	bf00      	nop

00403d48 <__aeabi_frsub>:
  403d48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  403d4c:	e002      	b.n	403d54 <__addsf3>
  403d4e:	bf00      	nop

00403d50 <__aeabi_fsub>:
  403d50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00403d54 <__addsf3>:
  403d54:	0042      	lsls	r2, r0, #1
  403d56:	bf1f      	itttt	ne
  403d58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  403d5c:	ea92 0f03 	teqne	r2, r3
  403d60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  403d64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  403d68:	d06a      	beq.n	403e40 <__addsf3+0xec>
  403d6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  403d6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  403d72:	bfc1      	itttt	gt
  403d74:	18d2      	addgt	r2, r2, r3
  403d76:	4041      	eorgt	r1, r0
  403d78:	4048      	eorgt	r0, r1
  403d7a:	4041      	eorgt	r1, r0
  403d7c:	bfb8      	it	lt
  403d7e:	425b      	neglt	r3, r3
  403d80:	2b19      	cmp	r3, #25
  403d82:	bf88      	it	hi
  403d84:	4770      	bxhi	lr
  403d86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  403d8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403d8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  403d92:	bf18      	it	ne
  403d94:	4240      	negne	r0, r0
  403d96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403d9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  403d9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  403da2:	bf18      	it	ne
  403da4:	4249      	negne	r1, r1
  403da6:	ea92 0f03 	teq	r2, r3
  403daa:	d03f      	beq.n	403e2c <__addsf3+0xd8>
  403dac:	f1a2 0201 	sub.w	r2, r2, #1
  403db0:	fa41 fc03 	asr.w	ip, r1, r3
  403db4:	eb10 000c 	adds.w	r0, r0, ip
  403db8:	f1c3 0320 	rsb	r3, r3, #32
  403dbc:	fa01 f103 	lsl.w	r1, r1, r3
  403dc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  403dc4:	d502      	bpl.n	403dcc <__addsf3+0x78>
  403dc6:	4249      	negs	r1, r1
  403dc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  403dcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  403dd0:	d313      	bcc.n	403dfa <__addsf3+0xa6>
  403dd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  403dd6:	d306      	bcc.n	403de6 <__addsf3+0x92>
  403dd8:	0840      	lsrs	r0, r0, #1
  403dda:	ea4f 0131 	mov.w	r1, r1, rrx
  403dde:	f102 0201 	add.w	r2, r2, #1
  403de2:	2afe      	cmp	r2, #254	; 0xfe
  403de4:	d251      	bcs.n	403e8a <__addsf3+0x136>
  403de6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  403dea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403dee:	bf08      	it	eq
  403df0:	f020 0001 	biceq.w	r0, r0, #1
  403df4:	ea40 0003 	orr.w	r0, r0, r3
  403df8:	4770      	bx	lr
  403dfa:	0049      	lsls	r1, r1, #1
  403dfc:	eb40 0000 	adc.w	r0, r0, r0
  403e00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  403e04:	f1a2 0201 	sub.w	r2, r2, #1
  403e08:	d1ed      	bne.n	403de6 <__addsf3+0x92>
  403e0a:	fab0 fc80 	clz	ip, r0
  403e0e:	f1ac 0c08 	sub.w	ip, ip, #8
  403e12:	ebb2 020c 	subs.w	r2, r2, ip
  403e16:	fa00 f00c 	lsl.w	r0, r0, ip
  403e1a:	bfaa      	itet	ge
  403e1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  403e20:	4252      	neglt	r2, r2
  403e22:	4318      	orrge	r0, r3
  403e24:	bfbc      	itt	lt
  403e26:	40d0      	lsrlt	r0, r2
  403e28:	4318      	orrlt	r0, r3
  403e2a:	4770      	bx	lr
  403e2c:	f092 0f00 	teq	r2, #0
  403e30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  403e34:	bf06      	itte	eq
  403e36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  403e3a:	3201      	addeq	r2, #1
  403e3c:	3b01      	subne	r3, #1
  403e3e:	e7b5      	b.n	403dac <__addsf3+0x58>
  403e40:	ea4f 0341 	mov.w	r3, r1, lsl #1
  403e44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  403e48:	bf18      	it	ne
  403e4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  403e4e:	d021      	beq.n	403e94 <__addsf3+0x140>
  403e50:	ea92 0f03 	teq	r2, r3
  403e54:	d004      	beq.n	403e60 <__addsf3+0x10c>
  403e56:	f092 0f00 	teq	r2, #0
  403e5a:	bf08      	it	eq
  403e5c:	4608      	moveq	r0, r1
  403e5e:	4770      	bx	lr
  403e60:	ea90 0f01 	teq	r0, r1
  403e64:	bf1c      	itt	ne
  403e66:	2000      	movne	r0, #0
  403e68:	4770      	bxne	lr
  403e6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  403e6e:	d104      	bne.n	403e7a <__addsf3+0x126>
  403e70:	0040      	lsls	r0, r0, #1
  403e72:	bf28      	it	cs
  403e74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  403e78:	4770      	bx	lr
  403e7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  403e7e:	bf3c      	itt	cc
  403e80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  403e84:	4770      	bxcc	lr
  403e86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  403e8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  403e8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403e92:	4770      	bx	lr
  403e94:	ea7f 6222 	mvns.w	r2, r2, asr #24
  403e98:	bf16      	itet	ne
  403e9a:	4608      	movne	r0, r1
  403e9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  403ea0:	4601      	movne	r1, r0
  403ea2:	0242      	lsls	r2, r0, #9
  403ea4:	bf06      	itte	eq
  403ea6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  403eaa:	ea90 0f01 	teqeq	r0, r1
  403eae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  403eb2:	4770      	bx	lr

00403eb4 <__aeabi_ui2f>:
  403eb4:	f04f 0300 	mov.w	r3, #0
  403eb8:	e004      	b.n	403ec4 <__aeabi_i2f+0x8>
  403eba:	bf00      	nop

00403ebc <__aeabi_i2f>:
  403ebc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  403ec0:	bf48      	it	mi
  403ec2:	4240      	negmi	r0, r0
  403ec4:	ea5f 0c00 	movs.w	ip, r0
  403ec8:	bf08      	it	eq
  403eca:	4770      	bxeq	lr
  403ecc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  403ed0:	4601      	mov	r1, r0
  403ed2:	f04f 0000 	mov.w	r0, #0
  403ed6:	e01c      	b.n	403f12 <__aeabi_l2f+0x2a>

00403ed8 <__aeabi_ul2f>:
  403ed8:	ea50 0201 	orrs.w	r2, r0, r1
  403edc:	bf08      	it	eq
  403ede:	4770      	bxeq	lr
  403ee0:	f04f 0300 	mov.w	r3, #0
  403ee4:	e00a      	b.n	403efc <__aeabi_l2f+0x14>
  403ee6:	bf00      	nop

00403ee8 <__aeabi_l2f>:
  403ee8:	ea50 0201 	orrs.w	r2, r0, r1
  403eec:	bf08      	it	eq
  403eee:	4770      	bxeq	lr
  403ef0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  403ef4:	d502      	bpl.n	403efc <__aeabi_l2f+0x14>
  403ef6:	4240      	negs	r0, r0
  403ef8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403efc:	ea5f 0c01 	movs.w	ip, r1
  403f00:	bf02      	ittt	eq
  403f02:	4684      	moveq	ip, r0
  403f04:	4601      	moveq	r1, r0
  403f06:	2000      	moveq	r0, #0
  403f08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  403f0c:	bf08      	it	eq
  403f0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  403f12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  403f16:	fabc f28c 	clz	r2, ip
  403f1a:	3a08      	subs	r2, #8
  403f1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  403f20:	db10      	blt.n	403f44 <__aeabi_l2f+0x5c>
  403f22:	fa01 fc02 	lsl.w	ip, r1, r2
  403f26:	4463      	add	r3, ip
  403f28:	fa00 fc02 	lsl.w	ip, r0, r2
  403f2c:	f1c2 0220 	rsb	r2, r2, #32
  403f30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403f34:	fa20 f202 	lsr.w	r2, r0, r2
  403f38:	eb43 0002 	adc.w	r0, r3, r2
  403f3c:	bf08      	it	eq
  403f3e:	f020 0001 	biceq.w	r0, r0, #1
  403f42:	4770      	bx	lr
  403f44:	f102 0220 	add.w	r2, r2, #32
  403f48:	fa01 fc02 	lsl.w	ip, r1, r2
  403f4c:	f1c2 0220 	rsb	r2, r2, #32
  403f50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  403f54:	fa21 f202 	lsr.w	r2, r1, r2
  403f58:	eb43 0002 	adc.w	r0, r3, r2
  403f5c:	bf08      	it	eq
  403f5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  403f62:	4770      	bx	lr

00403f64 <__aeabi_fmul>:
  403f64:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403f68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  403f6c:	bf1e      	ittt	ne
  403f6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  403f72:	ea92 0f0c 	teqne	r2, ip
  403f76:	ea93 0f0c 	teqne	r3, ip
  403f7a:	d06f      	beq.n	40405c <__aeabi_fmul+0xf8>
  403f7c:	441a      	add	r2, r3
  403f7e:	ea80 0c01 	eor.w	ip, r0, r1
  403f82:	0240      	lsls	r0, r0, #9
  403f84:	bf18      	it	ne
  403f86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  403f8a:	d01e      	beq.n	403fca <__aeabi_fmul+0x66>
  403f8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  403f90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  403f94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  403f98:	fba0 3101 	umull	r3, r1, r0, r1
  403f9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  403fa0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  403fa4:	bf3e      	ittt	cc
  403fa6:	0049      	lslcc	r1, r1, #1
  403fa8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  403fac:	005b      	lslcc	r3, r3, #1
  403fae:	ea40 0001 	orr.w	r0, r0, r1
  403fb2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  403fb6:	2afd      	cmp	r2, #253	; 0xfd
  403fb8:	d81d      	bhi.n	403ff6 <__aeabi_fmul+0x92>
  403fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  403fbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403fc2:	bf08      	it	eq
  403fc4:	f020 0001 	biceq.w	r0, r0, #1
  403fc8:	4770      	bx	lr
  403fca:	f090 0f00 	teq	r0, #0
  403fce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  403fd2:	bf08      	it	eq
  403fd4:	0249      	lsleq	r1, r1, #9
  403fd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  403fda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  403fde:	3a7f      	subs	r2, #127	; 0x7f
  403fe0:	bfc2      	ittt	gt
  403fe2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  403fe6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  403fea:	4770      	bxgt	lr
  403fec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403ff0:	f04f 0300 	mov.w	r3, #0
  403ff4:	3a01      	subs	r2, #1
  403ff6:	dc5d      	bgt.n	4040b4 <__aeabi_fmul+0x150>
  403ff8:	f112 0f19 	cmn.w	r2, #25
  403ffc:	bfdc      	itt	le
  403ffe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  404002:	4770      	bxle	lr
  404004:	f1c2 0200 	rsb	r2, r2, #0
  404008:	0041      	lsls	r1, r0, #1
  40400a:	fa21 f102 	lsr.w	r1, r1, r2
  40400e:	f1c2 0220 	rsb	r2, r2, #32
  404012:	fa00 fc02 	lsl.w	ip, r0, r2
  404016:	ea5f 0031 	movs.w	r0, r1, rrx
  40401a:	f140 0000 	adc.w	r0, r0, #0
  40401e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  404022:	bf08      	it	eq
  404024:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  404028:	4770      	bx	lr
  40402a:	f092 0f00 	teq	r2, #0
  40402e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  404032:	bf02      	ittt	eq
  404034:	0040      	lsleq	r0, r0, #1
  404036:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40403a:	3a01      	subeq	r2, #1
  40403c:	d0f9      	beq.n	404032 <__aeabi_fmul+0xce>
  40403e:	ea40 000c 	orr.w	r0, r0, ip
  404042:	f093 0f00 	teq	r3, #0
  404046:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40404a:	bf02      	ittt	eq
  40404c:	0049      	lsleq	r1, r1, #1
  40404e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  404052:	3b01      	subeq	r3, #1
  404054:	d0f9      	beq.n	40404a <__aeabi_fmul+0xe6>
  404056:	ea41 010c 	orr.w	r1, r1, ip
  40405a:	e78f      	b.n	403f7c <__aeabi_fmul+0x18>
  40405c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  404060:	ea92 0f0c 	teq	r2, ip
  404064:	bf18      	it	ne
  404066:	ea93 0f0c 	teqne	r3, ip
  40406a:	d00a      	beq.n	404082 <__aeabi_fmul+0x11e>
  40406c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  404070:	bf18      	it	ne
  404072:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  404076:	d1d8      	bne.n	40402a <__aeabi_fmul+0xc6>
  404078:	ea80 0001 	eor.w	r0, r0, r1
  40407c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  404080:	4770      	bx	lr
  404082:	f090 0f00 	teq	r0, #0
  404086:	bf17      	itett	ne
  404088:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40408c:	4608      	moveq	r0, r1
  40408e:	f091 0f00 	teqne	r1, #0
  404092:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  404096:	d014      	beq.n	4040c2 <__aeabi_fmul+0x15e>
  404098:	ea92 0f0c 	teq	r2, ip
  40409c:	d101      	bne.n	4040a2 <__aeabi_fmul+0x13e>
  40409e:	0242      	lsls	r2, r0, #9
  4040a0:	d10f      	bne.n	4040c2 <__aeabi_fmul+0x15e>
  4040a2:	ea93 0f0c 	teq	r3, ip
  4040a6:	d103      	bne.n	4040b0 <__aeabi_fmul+0x14c>
  4040a8:	024b      	lsls	r3, r1, #9
  4040aa:	bf18      	it	ne
  4040ac:	4608      	movne	r0, r1
  4040ae:	d108      	bne.n	4040c2 <__aeabi_fmul+0x15e>
  4040b0:	ea80 0001 	eor.w	r0, r0, r1
  4040b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4040b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4040bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4040c0:	4770      	bx	lr
  4040c2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4040c6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  4040ca:	4770      	bx	lr

004040cc <__aeabi_fdiv>:
  4040cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4040d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4040d4:	bf1e      	ittt	ne
  4040d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4040da:	ea92 0f0c 	teqne	r2, ip
  4040de:	ea93 0f0c 	teqne	r3, ip
  4040e2:	d069      	beq.n	4041b8 <__aeabi_fdiv+0xec>
  4040e4:	eba2 0203 	sub.w	r2, r2, r3
  4040e8:	ea80 0c01 	eor.w	ip, r0, r1
  4040ec:	0249      	lsls	r1, r1, #9
  4040ee:	ea4f 2040 	mov.w	r0, r0, lsl #9
  4040f2:	d037      	beq.n	404164 <__aeabi_fdiv+0x98>
  4040f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4040f8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4040fc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  404100:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  404104:	428b      	cmp	r3, r1
  404106:	bf38      	it	cc
  404108:	005b      	lslcc	r3, r3, #1
  40410a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  40410e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  404112:	428b      	cmp	r3, r1
  404114:	bf24      	itt	cs
  404116:	1a5b      	subcs	r3, r3, r1
  404118:	ea40 000c 	orrcs.w	r0, r0, ip
  40411c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  404120:	bf24      	itt	cs
  404122:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  404126:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40412a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40412e:	bf24      	itt	cs
  404130:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  404134:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404138:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40413c:	bf24      	itt	cs
  40413e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  404142:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404146:	011b      	lsls	r3, r3, #4
  404148:	bf18      	it	ne
  40414a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40414e:	d1e0      	bne.n	404112 <__aeabi_fdiv+0x46>
  404150:	2afd      	cmp	r2, #253	; 0xfd
  404152:	f63f af50 	bhi.w	403ff6 <__aeabi_fmul+0x92>
  404156:	428b      	cmp	r3, r1
  404158:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40415c:	bf08      	it	eq
  40415e:	f020 0001 	biceq.w	r0, r0, #1
  404162:	4770      	bx	lr
  404164:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  404168:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40416c:	327f      	adds	r2, #127	; 0x7f
  40416e:	bfc2      	ittt	gt
  404170:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  404174:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  404178:	4770      	bxgt	lr
  40417a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40417e:	f04f 0300 	mov.w	r3, #0
  404182:	3a01      	subs	r2, #1
  404184:	e737      	b.n	403ff6 <__aeabi_fmul+0x92>
  404186:	f092 0f00 	teq	r2, #0
  40418a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40418e:	bf02      	ittt	eq
  404190:	0040      	lsleq	r0, r0, #1
  404192:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  404196:	3a01      	subeq	r2, #1
  404198:	d0f9      	beq.n	40418e <__aeabi_fdiv+0xc2>
  40419a:	ea40 000c 	orr.w	r0, r0, ip
  40419e:	f093 0f00 	teq	r3, #0
  4041a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4041a6:	bf02      	ittt	eq
  4041a8:	0049      	lsleq	r1, r1, #1
  4041aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4041ae:	3b01      	subeq	r3, #1
  4041b0:	d0f9      	beq.n	4041a6 <__aeabi_fdiv+0xda>
  4041b2:	ea41 010c 	orr.w	r1, r1, ip
  4041b6:	e795      	b.n	4040e4 <__aeabi_fdiv+0x18>
  4041b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  4041bc:	ea92 0f0c 	teq	r2, ip
  4041c0:	d108      	bne.n	4041d4 <__aeabi_fdiv+0x108>
  4041c2:	0242      	lsls	r2, r0, #9
  4041c4:	f47f af7d 	bne.w	4040c2 <__aeabi_fmul+0x15e>
  4041c8:	ea93 0f0c 	teq	r3, ip
  4041cc:	f47f af70 	bne.w	4040b0 <__aeabi_fmul+0x14c>
  4041d0:	4608      	mov	r0, r1
  4041d2:	e776      	b.n	4040c2 <__aeabi_fmul+0x15e>
  4041d4:	ea93 0f0c 	teq	r3, ip
  4041d8:	d104      	bne.n	4041e4 <__aeabi_fdiv+0x118>
  4041da:	024b      	lsls	r3, r1, #9
  4041dc:	f43f af4c 	beq.w	404078 <__aeabi_fmul+0x114>
  4041e0:	4608      	mov	r0, r1
  4041e2:	e76e      	b.n	4040c2 <__aeabi_fmul+0x15e>
  4041e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4041e8:	bf18      	it	ne
  4041ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4041ee:	d1ca      	bne.n	404186 <__aeabi_fdiv+0xba>
  4041f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4041f4:	f47f af5c 	bne.w	4040b0 <__aeabi_fmul+0x14c>
  4041f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4041fc:	f47f af3c 	bne.w	404078 <__aeabi_fmul+0x114>
  404200:	e75f      	b.n	4040c2 <__aeabi_fmul+0x15e>
  404202:	bf00      	nop

00404204 <__errno>:
  404204:	4b01      	ldr	r3, [pc, #4]	; (40420c <__errno+0x8>)
  404206:	6818      	ldr	r0, [r3, #0]
  404208:	4770      	bx	lr
  40420a:	bf00      	nop
  40420c:	20400430 	.word	0x20400430

00404210 <__libc_init_array>:
  404210:	b570      	push	{r4, r5, r6, lr}
  404212:	4e0f      	ldr	r6, [pc, #60]	; (404250 <__libc_init_array+0x40>)
  404214:	4d0f      	ldr	r5, [pc, #60]	; (404254 <__libc_init_array+0x44>)
  404216:	1b76      	subs	r6, r6, r5
  404218:	10b6      	asrs	r6, r6, #2
  40421a:	bf18      	it	ne
  40421c:	2400      	movne	r4, #0
  40421e:	d005      	beq.n	40422c <__libc_init_array+0x1c>
  404220:	3401      	adds	r4, #1
  404222:	f855 3b04 	ldr.w	r3, [r5], #4
  404226:	4798      	blx	r3
  404228:	42a6      	cmp	r6, r4
  40422a:	d1f9      	bne.n	404220 <__libc_init_array+0x10>
  40422c:	4e0a      	ldr	r6, [pc, #40]	; (404258 <__libc_init_array+0x48>)
  40422e:	4d0b      	ldr	r5, [pc, #44]	; (40425c <__libc_init_array+0x4c>)
  404230:	1b76      	subs	r6, r6, r5
  404232:	f000 fa83 	bl	40473c <_init>
  404236:	10b6      	asrs	r6, r6, #2
  404238:	bf18      	it	ne
  40423a:	2400      	movne	r4, #0
  40423c:	d006      	beq.n	40424c <__libc_init_array+0x3c>
  40423e:	3401      	adds	r4, #1
  404240:	f855 3b04 	ldr.w	r3, [r5], #4
  404244:	4798      	blx	r3
  404246:	42a6      	cmp	r6, r4
  404248:	d1f9      	bne.n	40423e <__libc_init_array+0x2e>
  40424a:	bd70      	pop	{r4, r5, r6, pc}
  40424c:	bd70      	pop	{r4, r5, r6, pc}
  40424e:	bf00      	nop
  404250:	00404748 	.word	0x00404748
  404254:	00404748 	.word	0x00404748
  404258:	00404754 	.word	0x00404754
  40425c:	00404748 	.word	0x00404748

00404260 <isspace>:
  404260:	4b03      	ldr	r3, [pc, #12]	; (404270 <isspace+0x10>)
  404262:	681b      	ldr	r3, [r3, #0]
  404264:	4418      	add	r0, r3
  404266:	7840      	ldrb	r0, [r0, #1]
  404268:	f000 0008 	and.w	r0, r0, #8
  40426c:	4770      	bx	lr
  40426e:	bf00      	nop
  404270:	20400434 	.word	0x20400434

00404274 <strcat>:
  404274:	0783      	lsls	r3, r0, #30
  404276:	b510      	push	{r4, lr}
  404278:	4604      	mov	r4, r0
  40427a:	d110      	bne.n	40429e <strcat+0x2a>
  40427c:	6802      	ldr	r2, [r0, #0]
  40427e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404282:	ea23 0302 	bic.w	r3, r3, r2
  404286:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40428a:	d108      	bne.n	40429e <strcat+0x2a>
  40428c:	f850 2f04 	ldr.w	r2, [r0, #4]!
  404290:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
  404294:	ea23 0302 	bic.w	r3, r3, r2
  404298:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  40429c:	d0f6      	beq.n	40428c <strcat+0x18>
  40429e:	7803      	ldrb	r3, [r0, #0]
  4042a0:	b11b      	cbz	r3, 4042aa <strcat+0x36>
  4042a2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4042a6:	2b00      	cmp	r3, #0
  4042a8:	d1fb      	bne.n	4042a2 <strcat+0x2e>
  4042aa:	f000 f803 	bl	4042b4 <strcpy>
  4042ae:	4620      	mov	r0, r4
  4042b0:	bd10      	pop	{r4, pc}
  4042b2:	bf00      	nop

004042b4 <strcpy>:
  4042b4:	ea80 0201 	eor.w	r2, r0, r1
  4042b8:	4684      	mov	ip, r0
  4042ba:	f012 0f03 	tst.w	r2, #3
  4042be:	d14f      	bne.n	404360 <strcpy+0xac>
  4042c0:	f011 0f03 	tst.w	r1, #3
  4042c4:	d132      	bne.n	40432c <strcpy+0x78>
  4042c6:	f84d 4d04 	str.w	r4, [sp, #-4]!
  4042ca:	f011 0f04 	tst.w	r1, #4
  4042ce:	f851 3b04 	ldr.w	r3, [r1], #4
  4042d2:	d00b      	beq.n	4042ec <strcpy+0x38>
  4042d4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4042d8:	439a      	bics	r2, r3
  4042da:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4042de:	bf04      	itt	eq
  4042e0:	f84c 3b04 	streq.w	r3, [ip], #4
  4042e4:	f851 3b04 	ldreq.w	r3, [r1], #4
  4042e8:	d116      	bne.n	404318 <strcpy+0x64>
  4042ea:	bf00      	nop
  4042ec:	f851 4b04 	ldr.w	r4, [r1], #4
  4042f0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  4042f4:	439a      	bics	r2, r3
  4042f6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4042fa:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  4042fe:	d10b      	bne.n	404318 <strcpy+0x64>
  404300:	f84c 3b04 	str.w	r3, [ip], #4
  404304:	43a2      	bics	r2, r4
  404306:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40430a:	bf04      	itt	eq
  40430c:	f851 3b04 	ldreq.w	r3, [r1], #4
  404310:	f84c 4b04 	streq.w	r4, [ip], #4
  404314:	d0ea      	beq.n	4042ec <strcpy+0x38>
  404316:	4623      	mov	r3, r4
  404318:	f80c 3b01 	strb.w	r3, [ip], #1
  40431c:	f013 0fff 	tst.w	r3, #255	; 0xff
  404320:	ea4f 2333 	mov.w	r3, r3, ror #8
  404324:	d1f8      	bne.n	404318 <strcpy+0x64>
  404326:	f85d 4b04 	ldr.w	r4, [sp], #4
  40432a:	4770      	bx	lr
  40432c:	f011 0f01 	tst.w	r1, #1
  404330:	d006      	beq.n	404340 <strcpy+0x8c>
  404332:	f811 2b01 	ldrb.w	r2, [r1], #1
  404336:	f80c 2b01 	strb.w	r2, [ip], #1
  40433a:	2a00      	cmp	r2, #0
  40433c:	bf08      	it	eq
  40433e:	4770      	bxeq	lr
  404340:	f011 0f02 	tst.w	r1, #2
  404344:	d0bf      	beq.n	4042c6 <strcpy+0x12>
  404346:	f831 2b02 	ldrh.w	r2, [r1], #2
  40434a:	f012 0fff 	tst.w	r2, #255	; 0xff
  40434e:	bf16      	itet	ne
  404350:	f82c 2b02 	strhne.w	r2, [ip], #2
  404354:	f88c 2000 	strbeq.w	r2, [ip]
  404358:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  40435c:	d1b3      	bne.n	4042c6 <strcpy+0x12>
  40435e:	4770      	bx	lr
  404360:	f811 2b01 	ldrb.w	r2, [r1], #1
  404364:	f80c 2b01 	strb.w	r2, [ip], #1
  404368:	2a00      	cmp	r2, #0
  40436a:	d1f9      	bne.n	404360 <strcpy+0xac>
  40436c:	4770      	bx	lr
  40436e:	bf00      	nop
	...

00404380 <strlen>:
  404380:	f890 f000 	pld	[r0]
  404384:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404388:	f020 0107 	bic.w	r1, r0, #7
  40438c:	f06f 0c00 	mvn.w	ip, #0
  404390:	f010 0407 	ands.w	r4, r0, #7
  404394:	f891 f020 	pld	[r1, #32]
  404398:	f040 8049 	bne.w	40442e <strlen+0xae>
  40439c:	f04f 0400 	mov.w	r4, #0
  4043a0:	f06f 0007 	mvn.w	r0, #7
  4043a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4043a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4043ac:	f100 0008 	add.w	r0, r0, #8
  4043b0:	fa82 f24c 	uadd8	r2, r2, ip
  4043b4:	faa4 f28c 	sel	r2, r4, ip
  4043b8:	fa83 f34c 	uadd8	r3, r3, ip
  4043bc:	faa2 f38c 	sel	r3, r2, ip
  4043c0:	bb4b      	cbnz	r3, 404416 <strlen+0x96>
  4043c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4043c6:	fa82 f24c 	uadd8	r2, r2, ip
  4043ca:	f100 0008 	add.w	r0, r0, #8
  4043ce:	faa4 f28c 	sel	r2, r4, ip
  4043d2:	fa83 f34c 	uadd8	r3, r3, ip
  4043d6:	faa2 f38c 	sel	r3, r2, ip
  4043da:	b9e3      	cbnz	r3, 404416 <strlen+0x96>
  4043dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4043e0:	fa82 f24c 	uadd8	r2, r2, ip
  4043e4:	f100 0008 	add.w	r0, r0, #8
  4043e8:	faa4 f28c 	sel	r2, r4, ip
  4043ec:	fa83 f34c 	uadd8	r3, r3, ip
  4043f0:	faa2 f38c 	sel	r3, r2, ip
  4043f4:	b97b      	cbnz	r3, 404416 <strlen+0x96>
  4043f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4043fa:	f101 0120 	add.w	r1, r1, #32
  4043fe:	fa82 f24c 	uadd8	r2, r2, ip
  404402:	f100 0008 	add.w	r0, r0, #8
  404406:	faa4 f28c 	sel	r2, r4, ip
  40440a:	fa83 f34c 	uadd8	r3, r3, ip
  40440e:	faa2 f38c 	sel	r3, r2, ip
  404412:	2b00      	cmp	r3, #0
  404414:	d0c6      	beq.n	4043a4 <strlen+0x24>
  404416:	2a00      	cmp	r2, #0
  404418:	bf04      	itt	eq
  40441a:	3004      	addeq	r0, #4
  40441c:	461a      	moveq	r2, r3
  40441e:	ba12      	rev	r2, r2
  404420:	fab2 f282 	clz	r2, r2
  404424:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404428:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40442c:	4770      	bx	lr
  40442e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404432:	f004 0503 	and.w	r5, r4, #3
  404436:	f1c4 0000 	rsb	r0, r4, #0
  40443a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40443e:	f014 0f04 	tst.w	r4, #4
  404442:	f891 f040 	pld	[r1, #64]	; 0x40
  404446:	fa0c f505 	lsl.w	r5, ip, r5
  40444a:	ea62 0205 	orn	r2, r2, r5
  40444e:	bf1c      	itt	ne
  404450:	ea63 0305 	ornne	r3, r3, r5
  404454:	4662      	movne	r2, ip
  404456:	f04f 0400 	mov.w	r4, #0
  40445a:	e7a9      	b.n	4043b0 <strlen+0x30>

0040445c <register_fini>:
  40445c:	4b02      	ldr	r3, [pc, #8]	; (404468 <register_fini+0xc>)
  40445e:	b113      	cbz	r3, 404466 <register_fini+0xa>
  404460:	4802      	ldr	r0, [pc, #8]	; (40446c <register_fini+0x10>)
  404462:	f000 b805 	b.w	404470 <atexit>
  404466:	4770      	bx	lr
  404468:	00000000 	.word	0x00000000
  40446c:	0040447d 	.word	0x0040447d

00404470 <atexit>:
  404470:	2300      	movs	r3, #0
  404472:	4601      	mov	r1, r0
  404474:	461a      	mov	r2, r3
  404476:	4618      	mov	r0, r3
  404478:	f000 b814 	b.w	4044a4 <__register_exitproc>

0040447c <__libc_fini_array>:
  40447c:	b538      	push	{r3, r4, r5, lr}
  40447e:	4d07      	ldr	r5, [pc, #28]	; (40449c <__libc_fini_array+0x20>)
  404480:	4c07      	ldr	r4, [pc, #28]	; (4044a0 <__libc_fini_array+0x24>)
  404482:	1b2c      	subs	r4, r5, r4
  404484:	10a4      	asrs	r4, r4, #2
  404486:	d005      	beq.n	404494 <__libc_fini_array+0x18>
  404488:	3c01      	subs	r4, #1
  40448a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40448e:	4798      	blx	r3
  404490:	2c00      	cmp	r4, #0
  404492:	d1f9      	bne.n	404488 <__libc_fini_array+0xc>
  404494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404498:	f000 b95c 	b.w	404754 <_fini>
  40449c:	00404764 	.word	0x00404764
  4044a0:	00404760 	.word	0x00404760

004044a4 <__register_exitproc>:
  4044a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4044a8:	4c25      	ldr	r4, [pc, #148]	; (404540 <__register_exitproc+0x9c>)
  4044aa:	6825      	ldr	r5, [r4, #0]
  4044ac:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4044b0:	4606      	mov	r6, r0
  4044b2:	4688      	mov	r8, r1
  4044b4:	4692      	mov	sl, r2
  4044b6:	4699      	mov	r9, r3
  4044b8:	b3c4      	cbz	r4, 40452c <__register_exitproc+0x88>
  4044ba:	6860      	ldr	r0, [r4, #4]
  4044bc:	281f      	cmp	r0, #31
  4044be:	dc17      	bgt.n	4044f0 <__register_exitproc+0x4c>
  4044c0:	1c43      	adds	r3, r0, #1
  4044c2:	b176      	cbz	r6, 4044e2 <__register_exitproc+0x3e>
  4044c4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4044c8:	2201      	movs	r2, #1
  4044ca:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4044ce:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4044d2:	4082      	lsls	r2, r0
  4044d4:	4311      	orrs	r1, r2
  4044d6:	2e02      	cmp	r6, #2
  4044d8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4044dc:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4044e0:	d01e      	beq.n	404520 <__register_exitproc+0x7c>
  4044e2:	3002      	adds	r0, #2
  4044e4:	6063      	str	r3, [r4, #4]
  4044e6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4044ea:	2000      	movs	r0, #0
  4044ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4044f0:	4b14      	ldr	r3, [pc, #80]	; (404544 <__register_exitproc+0xa0>)
  4044f2:	b303      	cbz	r3, 404536 <__register_exitproc+0x92>
  4044f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4044f8:	f3af 8000 	nop.w
  4044fc:	4604      	mov	r4, r0
  4044fe:	b1d0      	cbz	r0, 404536 <__register_exitproc+0x92>
  404500:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  404504:	2700      	movs	r7, #0
  404506:	e880 0088 	stmia.w	r0, {r3, r7}
  40450a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40450e:	4638      	mov	r0, r7
  404510:	2301      	movs	r3, #1
  404512:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  404516:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40451a:	2e00      	cmp	r6, #0
  40451c:	d0e1      	beq.n	4044e2 <__register_exitproc+0x3e>
  40451e:	e7d1      	b.n	4044c4 <__register_exitproc+0x20>
  404520:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  404524:	430a      	orrs	r2, r1
  404526:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40452a:	e7da      	b.n	4044e2 <__register_exitproc+0x3e>
  40452c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  404530:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  404534:	e7c1      	b.n	4044ba <__register_exitproc+0x16>
  404536:	f04f 30ff 	mov.w	r0, #4294967295
  40453a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40453e:	bf00      	nop
  404540:	00404634 	.word	0x00404634
  404544:	00000000 	.word	0x00000000
  404548:	2d2d2d2d 	.word	0x2d2d2d2d
  40454c:	2d2d2d2d 	.word	0x2d2d2d2d
  404550:	2d2d2d2d 	.word	0x2d2d2d2d
  404554:	2d2d2d2d 	.word	0x2d2d2d2d
  404558:	0000002d 	.word	0x0000002d
  40455c:	0000000a 	.word	0x0000000a
  404560:	69747365 	.word	0x69747365
  404564:	676e416d 	.word	0x676e416d
  404568:	3a58656c 	.word	0x3a58656c
  40456c:	00000000 	.word	0x00000000
  404570:	0066766f 	.word	0x0066766f
  404574:	0000002e 	.word	0x0000002e
  404578:	69747365 	.word	0x69747365
  40457c:	676e416d 	.word	0x676e416d
  404580:	3a59656c 	.word	0x3a59656c
  404584:	00000000 	.word	0x00000000
  404588:	6f727265 	.word	0x6f727265
  40458c:	6e692072 	.word	0x6e692072
  404590:	49207469 	.word	0x49207469
  404594:	003a4332 	.word	0x003a4332
  404598:	74696e49 	.word	0x74696e49
  40459c:	43324920 	.word	0x43324920
  4045a0:	004b4f20 	.word	0x004b4f20
  4045a4:	74696e49 	.word	0x74696e49
  4045a8:	6f726420 	.word	0x6f726420
  4045ac:	7441696e 	.word	0x7441696e
  4045b0:	4b4f2074 	.word	0x4b4f2074
  4045b4:	00000000 	.word	0x00000000
  4045b8:	00000001 	.word	0x00000001
  4045bc:	00000002 	.word	0x00000002
  4045c0:	00000004 	.word	0x00000004
  4045c4:	00000008 	.word	0x00000008
  4045c8:	00000010 	.word	0x00000010
  4045cc:	00000020 	.word	0x00000020
  4045d0:	00000040 	.word	0x00000040
  4045d4:	00000080 	.word	0x00000080
  4045d8:	00000100 	.word	0x00000100
  4045dc:	00000200 	.word	0x00000200
  4045e0:	00000400 	.word	0x00000400
  4045e4:	00000000 	.word	0x00000000

004045e8 <atanlo>:
  4045e8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
  4045f8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

00404608 <atanhi>:
  404608:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
  404618:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
  404628:	74727173 00000000 00000043              sqrt....C...

00404634 <_global_impure_ptr>:
  404634:	20400008                                ..@ 

00404638 <_ctype_>:
  404638:	20202000 20202020 28282020 20282828     .         ((((( 
  404648:	20202020 20202020 20202020 20202020                     
  404658:	10108820 10101010 10101010 10101010      ...............
  404668:	04040410 04040404 10040404 10101010     ................
  404678:	41411010 41414141 01010101 01010101     ..AAAAAA........
  404688:	01010101 01010101 01010101 10101010     ................
  404698:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4046a8:	02020202 02020202 02020202 10101010     ................
  4046b8:	00000020 00000000 00000000 00000000      ...............
	...

0040473c <_init>:
  40473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40473e:	bf00      	nop
  404740:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404742:	bc08      	pop	{r3}
  404744:	469e      	mov	lr, r3
  404746:	4770      	bx	lr

00404748 <__init_array_start>:
  404748:	0040445d 	.word	0x0040445d

0040474c <__frame_dummy_init_array_entry>:
  40474c:	00400165 00401a01                       e.@...@.

00404754 <_fini>:
  404754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404756:	bf00      	nop
  404758:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40475a:	bc08      	pop	{r3}
  40475c:	469e      	mov	lr, r3
  40475e:	4770      	bx	lr

00404760 <__fini_array_start>:
  404760:	00400141 	.word	0x00400141
